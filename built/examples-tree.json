[
  {
    "type": "page",
    "title": "P01 - Find the last box of a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P01-scottp.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "JGpWEg3fMjMG7wEp4Kwxb",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P01 - Find the last box of a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P01 - Find the last box of a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 63,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 63,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "tQLxex4sDDz-vQKk0KZPr"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 64,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 86,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 64,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 86,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "mHIAtDbZOPMlcA8NO6bZz"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "LISP\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "LISP\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 87,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 99,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 87,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 99,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "LISP"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P01 (*) Find the last box of a list.\nExample:\n* (my-last '(a b c d))\n(D)\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P01 (*) Find the last box of a list.\n    Example:\n    * (my-last '(a b c d))\n    (D)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 100,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 189,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Note that, in LISP-speak, the last \"box\" is the last one-element sublist of\nthe list. In perl6, a single element can generally be used as a list and\nvice versa; as a result, this example does not distinguish between a single\nelement and a list containing a single element.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Note that, in LISP-speak, the last \"box\" is the last one-element sublist of\nthe list. In perl6, a single element can generally be used as a list and\nvice versa; as a result, this example does not distinguish between a single\nelement and a list containing a single element.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 190,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 463,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example:\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example:\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 464,
                      "line": 21,
                      "column": 1
                    },
                    "end": {
                      "offset": 480,
                      "line": 22,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 464,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 480,
                  "line": 22,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example:"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say my_last <a b c d>;\nd\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say my_last <a b c d>;\n    d\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 481,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 516,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 526,
              "line": 27,
              "column": 1
            }
          },
          "id": "AxjlMbksHC4ZXotSukHe1"
        },
        {
          "text": "\n# a. One line example:\n#       <> can be used to generate an array, similar to perl 5 - qw<a b c d>\n#       [] is used to select the element number\n#       * means the number of elements\n#       say is like print to stdout with a new line\n#       .say can be called as everything is an object\n<A B C D E F>[* - 1].say;\n\n# b. Subroutine example\n#       @l lists can be passed in as parameters - no need to use references\n#       .elems - is the number of elements, this time called on the object\n#       say called in procedure form\nsub my_last(@l) {\n        return @l[@l.elems - 1];\n}\nsay my_last(<A B C D>);\n\n# c. Pop like perl5\n#       pop the last element off, which also returns it\n#       say either way\nsay <X Y Z>.Array.pop;\n<X Y Z>.Array.pop.say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 526,
              "line": 27,
              "column": 1
            },
            "end": {
              "offset": 1322,
              "line": 52,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P01 - Find the last element of a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P01-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "wSSwyMgOpiLChXAzERRV1",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P01 - Find the last element of a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P01 - Find the last element of a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 67,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 67,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "zdMeLnztOblxOkxWGLbnf"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 68,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 90,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 68,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 90,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "dmBk5DeCb71qDSW8x1rC-"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Use of the C<Whatever> type to grab the last element of a list.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Use of the "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "Whatever"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " type to grab the last element of a list.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 91,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 155,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 156,
                      "line": 11,
                      "column": 1
                    },
                    "end": {
                      "offset": 171,
                      "line": 12,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 156,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 171,
                  "line": 12,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say last-elem(<a b c d e>)\ne\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say last-elem(<a b c d e>)\n    e\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 172,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 211,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 221,
              "line": 17,
              "column": 1
            }
          },
          "id": "jBIdjCQcq6D9eKfkbXaoj"
        },
        {
          "text": "\nsub last-elem(@list) {\n    @list[* - 1];\n}\n\nsay last-elem(<a b c d e>);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 221,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 334,
              "line": 25,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P02 - Find the last but one box of a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P02-scottp.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Tcx7_-1KB-WPGZ-r7sBxS",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P02 - Find the last but one box of a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P02 - Find the last but one box of a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "8mZcgeX2EvMuTiA8Co7mG"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 72,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 94,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 72,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 94,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "R2PKIwAYa-a7tzYC1eEtN"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Specification:\n    P02 - Find the last two elements of a list.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Specification:\n    P02 - Find the last two elements of a list.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 95,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 158,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example:\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example:\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 159,
                      "line": 12,
                      "column": 1
                    },
                    "end": {
                      "offset": 175,
                      "line": 13,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 159,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 175,
                  "line": 13,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example:"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say ~my_but_last(<A B C D>);\nC D\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say ~my_but_last(<A B C D>);\n    C D\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 176,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 219,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "LISP\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "LISP\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 220,
                      "line": 17,
                      "column": 1
                    },
                    "end": {
                      "offset": 232,
                      "line": 18,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 220,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 232,
                  "line": 18,
                  "column": 1
                }
              },
              "level": "1",
              "id": "LISP"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P02 (*) Find the last but one box of a list.\nExample:\n* (my-but-last '(a b c d))\n(C D)\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P02 (*) Find the last but one box of a list.\n    Example:\n    * (my-but-last '(a b c d))\n    (C D)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 233,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 336,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 346,
              "line": 25,
              "column": 1
            }
          },
          "id": "3ObkDHl8SUXMrIFjBX5Jr"
        },
        {
          "text": "\n# a. One line example\n#   <> can be used to generate an list, similar to perl 5 - qw<a b c d>\n#   [] is used to slice a list or array and returns a list\n#   * means the number of elements\n#   say is like print to stdout with a new line\n#   .say can be called as everything is an object\n#   we pass a list to [] to ask for the second-last and last elements\n\"{<A B C D E F>.[*-2,*-1]}\".say;\n\n# b. Subroutine example\n#   @l lists can be passed in as parameters - no need to use references\n#   .elems - is the number of elements, this time called on the object\n#   say called in procedure form\n#   This time we use the range operator .. to create a Range object\nsub my_but_last (@l) {\n    return @l[@l.elems-2 .. @l.elems-1];\n}\n\n#   ~ operator stringifies the result: ~<a b> goes to 'a b'\nsay ~my_but_last(<a b c d>);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 346,
              "line": 25,
              "column": 1
            },
            "end": {
              "offset": 1201,
              "line": 48,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P02 - Find the last two elements of a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P02-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Hz5Ym3k-0Io_gIujBVIXQ",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P02 - Find the last two elements of a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P02 - Find the last two elements of a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 72,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 72,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "lgBmTKx79vlNinka6TzbR"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 73,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 95,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 73,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 95,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "4eWy-Q6XE4t3pUq3-3nrX"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Further use of the C<Whatever> type to grab the last elements of a list.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Further use of the "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "Whatever"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " type to grab the last elements of a list.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 96,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 169,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 170,
                      "line": 11,
                      "column": 1
                    },
                    "end": {
                      "offset": 185,
                      "line": 12,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 170,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 185,
                  "line": 12,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say last-two(<a b c d e>)\nd e\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say last-two(<a b c d e>)\n    d e\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 186,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 226,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 236,
              "line": 17,
              "column": 1
            }
          },
          "id": "GzuzUIGIxPjzvQYJ5BPbP"
        },
        {
          "text": "\nsub last-two(@list)\n{\n    @list[* - 2, * - 1];\n}\n\nsay \"{last-two(<a b c d e>)}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 236,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 358,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P03 - Find the K'th element of a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P03-scottp.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Q1B2YfR1TXZiu-frz_IA1",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P03 - Find the K'th element of a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P03 - Find the K'th element of a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 67,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 67,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "z_STFg8gqBznJRiVJGf3c"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 68,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 90,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 68,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 90,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "6yCbhbi-A6xNLbHIhDufx"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Specification:\n  P03 - Find the K'th element of a list.\n        The first element in the list is number 1.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Specification:\n  P03 - Find the K'th element of a list.\n        The first element in the list is number 1.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 91,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 198,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example:\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example:\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 199,
                      "line": 13,
                      "column": 1
                    },
                    "end": {
                      "offset": 215,
                      "line": 14,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 199,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 215,
                  "line": 14,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example:"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say element_at <a b c d e>,3;\nc\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say element_at <a b c d e>,3;\n    c\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 216,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 258,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "LISP\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "LISP\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 259,
                      "line": 18,
                      "column": 1
                    },
                    "end": {
                      "offset": 271,
                      "line": 19,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 259,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 271,
                  "line": 19,
                  "column": 1
                }
              },
              "level": "1",
              "id": "LISP"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P03 (*) Find the K'th element of a list.\nThe first element in the list is number 1.\nExample:\n* (element-at '(a b c d e) 3)\nC\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P03 (*) Find the K'th element of a list.\n    The first element in the list is number 1.\n    Example:\n    * (element-at '(a b c d e) 3)\n    C\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 272,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 417,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 427,
              "line": 27,
              "column": 1
            }
          },
          "id": "FyJn2IdZW1_vRt9Ultlhi"
        },
        {
          "text": "\n# a. One line example:\n#   <> can be used to generate an array, similar to perl 5 - qw<a b c d>\n#   [] is used to select the element number\n#   note that the first element's index is 0, so we must subtract 1\n#   say is like print to stdout with a new line\n#   .say can be called as a method since everything is an object\n<A B C D E F>[3 - 1].say;\n\n# b. Subroutine example\n#   @l lists can be passed in as parameters - no need to use references\n#   $n a scalar location in the array\n#       Note you can pass this in after an array because the array\n#       is not slurped in like it would be in Perl 5 !\n#   .elems - is the number of elements, this time called on the object\n#   say called in procedure form\nsub element_at (@l, $n) {\n    return @l[$n - 1];\n}\nsay element_at <a b c d e>,3;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 427,
              "line": 27,
              "column": 1
            },
            "end": {
              "offset": 1257,
              "line": 49,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P03 - Find the kth element of a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P03-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "cl3n_tOGZY9aD7O7PO6Hu",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P03 - Find the C<k>th element of a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P03 - Find the "
                    },
                    {
                      "content": [
                        {
                          "type": "text",
                          "value": "k"
                        }
                      ],
                      "type": "fcode",
                      "name": "C"
                    },
                    {
                      "type": "text",
                      "value": "th element of a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 69,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 69,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "E6BZ3qHdhlQu7uEX_tT1W"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 70,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 92,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 70,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 92,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "0sBPqyGjcwGf28OlEwQOI"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 93,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 108,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 93,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 108,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say get-at(<a b c d e>, 4)\ne\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say get-at(<a b c d e>, 4)\n    e\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 109,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 148,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 158,
              "line": 15,
              "column": 1
            }
          },
          "id": "yAf-W5Ae20r7XtuOXbwhA"
        },
        {
          "text": "\nsub get-at(@list, $elem)\n{\n    @list[$elem];\n}\n\nsay get-at(<a b c d e>, 4);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 158,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 275,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P04 - Find the number of elements of a list\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P04-scottp.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "IZ_6pxvz-elt9cn2VtbSs",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P04 - Find the number of elements of a list\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P04 - Find the number of elements of a list\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 72,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 72,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "l4XVs3jW_Fg0ntoCDPiq1"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 73,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 95,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 73,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 95,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "uN26R5vuPPQGuSEYZUfv7"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Specification:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Specification:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 96,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 111,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "P04 - Find the number of elements of a list\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P04 - Find the number of elements of a list\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 112,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 160,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 170,
              "line": 14,
              "column": 1
            }
          },
          "id": "vuFbQQGOjiv24UPvh_GkE"
        },
        {
          "text": "\n# a. The .elems method:\n#   <> can be used to generate an array, similar to perl 5 - qw<a b c d>\n#   .elems can be called as the array create an object\n#   .say can be called on the returned object\n<a b c d>.elems.say;\n\n# b. The unary + operator:\n#   + coerces its operand to numeric context\n#   a Positional in numeric context returns the count of its elements\nsay +<a b c d>;\nsay +<a b c d>[0,2]; # works on slices too\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 170,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 632,
              "line": 28,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P04 - Find the number of elements in a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P04-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "G8GO-ePYn4tgU7DjPgDCh",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P04 - Find the number of elements in a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P04 - Find the number of elements in a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 73,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 73,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "mfO9clClrVxfsXAuFvcvv"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 74,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 96,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 74,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 96,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "OSPkPp0KNIsq-t70dyLFQ"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 97,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 112,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 97,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 112,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say get-num-elems(<a b c d e>);\n5\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say get-num-elems(<a b c d e>);\n    5\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 113,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 157,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 167,
              "line": 15,
              "column": 1
            }
          },
          "id": "QvYHqeD_N_f3qQ2-lhjSK"
        },
        {
          "text": "\nsub get-num-elems(@list)\n{\n    @list.elems;\n}\n\nsay get-num-elems(<a b c d e>);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 167,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 287,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P05 - Reverse a list\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P05-scottp.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "r55GL-vSPPSzm6u-6zFeu",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P05 - Reverse a list\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P05 - Reverse a list\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "zsvxNKuaaHUnF1Dszwtu5"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 72,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 72,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "5pe--ChCn_qhgozc_D9ac"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Specification:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Specification:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 73,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 88,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "P05 - Reverse a list\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P05 - Reverse a list\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 89,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 114,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 124,
              "line": 14,
              "column": 1
            }
          },
          "id": "FHrYVb_ZzNaEQ0MYomG_H"
        },
        {
          "text": "\n# a. One line example\n#       <> used to create an array\n#       .reverse on the object to reverse the order\n#       .join called to present the data with a \" \"\n#       say displays the result\nsay <A B C D>.list.reverse.join(' ');\n\n# b. Perl representation\n#       .perl serialises the data as perl representation (like Data::Dumper in perl5)\n#       .say to display the result (print with a new line)\n<A B C D>.reverse.list.perl.say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 124,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 600,
              "line": 28,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P05 - Reverse a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P05-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "UGjkwaDK3FB5rGsc-ajjc",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P05 - Reverse a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P05 - Reverse a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 50,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 50,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "pm0TmWwM4yCak2im701kY"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 51,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 73,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 51,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 73,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "_jRkO59HwN5RMP8RPUiLb"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 74,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 89,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 74,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 89,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say reverse-list(<a b c d e>);\ne d c b a\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say reverse-list(<a b c d e>);\n    e d c b a\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 90,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 141,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 151,
              "line": 15,
              "column": 1
            }
          },
          "id": "cFX7aRFOWuNGkfIgL3n0H"
        },
        {
          "text": "\nsub reverse-list(@list)\n{\n    @list.reverse;\n}\n\nsay \"{reverse-list(<a b c d e>)}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 151,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 275,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P06 - Find out whether a list is a palindrome.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P06-ajs.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "NLVZlyEuwPeJQQhYJKgHf",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P06 - Find out whether a list is a palindrome.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P06 - Find out whether a list is a palindrome.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "f8OXpeJJMF8xVTWZ_oztl"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Aaron Sherman\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Aaron Sherman\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 76,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 98,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 76,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 98,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "d22sr6aWUqwH_ccHTa4d6"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 108,
              "line": 10,
              "column": 1
            }
          },
          "id": "G_GEx4PkRg9M2R-kJOAjb"
        },
        {
          "text": "\nsub palindromic(@list) {\n    return True if @list < 2;\n\n    my $start = 0;\n    my $end = @list.end;\n    my $mid_start = floor(@list / 2 - 1);\n    my $mid_end = ceiling(@list / 2);\n    @list[$start .. $mid_start] ~~ @list[$mid_end .. $end].reverse.list;\n}\n\nmy @examples = [\n    [[< a b c d E >], False],\n    [[< a b c b a >], True],\n    [[< a b b E >], False],\n    [[< E b b a>], False],\n    [[< a b b a >], True],\n    [[< a >], True],\n    [[< a a >], True],\n    [[< E a >], False] ];\n\nfor @examples -> ($list, $result) {\n    my $is-result = $result ?? \"\" !! \"not \";\n    if palindromic($list) != $result {\n        die \"{$list.perl} was expected {$is-result}to be a palindrome, but isn't\";\n    }\n    else {\n        say $list ~ \" is {$is-result}a palindrome\";\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 108,
              "line": 10,
              "column": 1
            },
            "end": {
              "offset": 914,
              "line": 42,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P06 - Find out whether a list is a palindrome.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P06-scottp.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Cx61tmfq9PXojusKjyvCl",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P06 - Find out whether a list is a palindrome.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P06 - Find out whether a list is a palindrome.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "FaKzYK4CTOXddQf6-hNnm"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 76,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 98,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 76,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 98,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "ayK4aiQcur5hkWRaC_98h"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Specification:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Specification:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 99,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 114,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "P06 (*) Find out whether a list is a palindrome.\nA palindrome can be read forward or backward; e.g. <x a m a x>.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P06 (*) Find out whether a list is a palindrome.\n    A palindrome can be read forward or backward; e.g. <x a m a x>.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 115,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 236,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "LISP\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "LISP\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 237,
                      "line": 14,
                      "column": 1
                    },
                    "end": {
                      "offset": 249,
                      "line": 15,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 237,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 249,
                  "line": 15,
                  "column": 1
                }
              },
              "level": "1",
              "id": "LISP"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P06 (*) Find out whether a list is a palindrome.\nA palindrome can be read forward or backward; e.g. (x a m a x).\n",
              "margin": " ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P06 (*) Find out whether a list is a palindrome.\n A palindrome can be read forward or backward; e.g. (x a m a x).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 250,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 365,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 375,
              "line": 20,
              "column": 1
            }
          },
          "id": "iGnTRc7Imy5BoB5MQyUBD"
        },
        {
          "text": "\n# Create a list palindrome\nmy @l = <A B C B A>;\n# Reverse the list (see P05)\n# Then compare it\n#       ==      This will compare two lists, and return true if they contain the same\n#       elements - but it does not care about the order of the elements.\n#       eq  This will turn the list into a string, and compare those\nif (@l eq @l.reverse) {\n    say \"{@l}\", ' is a palindrome';\n}\nelse {\n    say \"{@l}\", ' is not a palindrome';\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 375,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 850,
              "line": 36,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P06 - Find out whether a list is a palindrome.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P06-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Dprvz4im8ki1awsR-q2Ur",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P06 - Find out whether a list is a palindrome.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P06 - Find out whether a list is a palindrome.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "a9SVYfz7YkKUEojdhl8sH"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 76,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 98,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 76,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 98,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "tfIPObkwBEMo4_jxeacmM"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 99,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 114,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 99,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 114,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say palindromic(<a b c d e>);\nFalse\n> say palindromic(<a b c b a>);\nTrue\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say palindromic(<a b c d e>);\n    False\n    > say palindromic(<a b c b a>);\n    True\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 115,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 206,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 216,
              "line": 17,
              "column": 1
            }
          },
          "id": "LFlgpBR5fBupORFxfcnJe"
        },
        {
          "text": "\nsub palindromic(@list)\n{\n    @list ~~ @list.reverse.list;\n}\n\nsay palindromic(<a b c d e>);\nsay palindromic(<a b c b a>);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 216,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 378,
              "line": 27,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P07 - Flatten a nested array structure.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P07-eric256.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "-HL9GVufrcpk15Zm_VZC_",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P07 - Flatten a nested array structure.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P07 - Flatten a nested array structure.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "jMkFZ3Gqt4jcU0XxItPbC"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Eric Hodges\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Eric Hodges\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 69,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 89,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 69,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 89,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "AHKhdj5XmjMELzIVJgfVi"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 90,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 111,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 90,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 111,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P07 (**) Flatten a nested array structure.\n    Transform an array, possibly holding arrays as elements into a `flat'\n    list by replacing each array with its elements (recursively).\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P07 (**) Flatten a nested array structure.\n       Transform an array, possibly holding arrays as elements into a `flat'\n       list by replacing each array with its elements (recursively).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 112,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 304,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 305,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 320,
                      "line": 16,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 305,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 320,
                  "line": 16,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> splat([1,[2,[3,4],5]]).perl.say;\n(1, 2, 3, 4, 5)\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> splat([1,[2,[3,4],5]]).perl.say;\n    (1, 2, 3, 4, 5)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 321,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 380,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 390,
              "line": 21,
              "column": 1
            }
          },
          "id": "q3r5JA7mdz8G7CXV4Cflt"
        },
        {
          "text": "\nsub splat (@t) {\n    return (gather @t.deepmap(*.take)).list;\n}\n\nsplat(['a', ['b',['c','d'], 'e']]).perl.say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 390,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 541,
              "line": 29,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P07 - Flatten a nested array structure.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P07-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "u8fS7hsUYbQQoUgHhkfC8",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P07 - Flatten a nested array structure.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P07 - Flatten a nested array structure.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "QooWcR-3SpNX9CmKQTt7a"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Orginally Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Orginally Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 69,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 101,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 69,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 101,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "ozBgfBATLRfTAC_OWiZMW"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 102,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 117,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 102,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 117,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> my @a = 1, 2, [3, 4], 5;\n> say @a.flat.list.perl\n(1, 2, 3, 4, 5)\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> my @a = 1, 2, [3, 4], 5;\n    > say @a.flat.list.perl\n    (1, 2, 3, 4, 5)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 118,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 197,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 207,
              "line": 16,
              "column": 1
            }
          },
          "id": "-naxTAJZd4B9Wpj4IFURR"
        },
        {
          "text": "\nmy @a := 1, 2, [3, 4], 5;\n\nsay @a.perl;\nsay 'Flattened:';\nsay @a.flat.list.perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 207,
              "line": 16,
              "column": 1
            },
            "end": {
              "offset": 329,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P07 - Flatten a nested array structure.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P07-viklund.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "cgtqMRckY302GCAphZUz8",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P07 - Flatten a nested array structure.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P07 - Flatten a nested array structure.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "KTUpKGLKxZfZ9cSUoOQSb"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Johan Viklund\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Johan Viklund\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 69,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 91,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 69,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 91,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "FEFx9Xnkz7jDukJ5fX1zV"
            },
            {
              "type": "blankline"
            },
            {
              "text": "We use the gather/take structure.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "We use the gather/take structure.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 92,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 126,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A gather block builds a list using take statements. Each take adds one\nelement to the list. The gather block returns the complete list.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A gather block builds a list using take statements. Each take adds one\nelement to the list. The gather block returns the complete list.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 127,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 263,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A gather block operates with dynamic scope, so the take statements may be\nin another subroutine.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A gather block operates with dynamic scope, so the take statements may be\nin another subroutine.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 264,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 361,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "for @t -> $t\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "for @t -"
                        },
                        {
                          "type": "text",
                          "value": ">"
                        },
                        {
                          "type": "text",
                          "value": " $t\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 362,
                          "line": 17,
                          "column": 1
                        },
                        "end": {
                          "offset": 381,
                          "line": 18,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 362,
                      "line": 17,
                      "column": 1
                    },
                    "end": {
                      "offset": 381,
                      "line": 18,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "WIt25uiEBe2zAxrqLaqkC"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "iterates over C<@t>, placing each element in turn in C<$t>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "iterates over "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "@t"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": ", placing each element in turn in "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "$t"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 382,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 441,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "~~\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "~~\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 442,
                          "line": 21,
                          "column": 1
                        },
                        "end": {
                          "offset": 451,
                          "line": 22,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 442,
                      "line": 21,
                      "column": 1
                    },
                    "end": {
                      "offset": 451,
                      "line": 22,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "zf5HVoM2X0tyWNkiUe1z9"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "is the smart match operator. Here we use it to check the type of C<$t>.\nwe could have said C<$t.isa(Array)> instead.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "is the smart match operator. Here we use it to check the type of "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "$t"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": ".\nwe could have said "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "$t.isa(Array)"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " instead.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 452,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 569,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 570,
                      "line": 26,
                      "column": 1
                    },
                    "end": {
                      "offset": 591,
                      "line": 27,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 570,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 591,
                  "line": 27,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P07 (**) Flatten a nested array structure.\n    Transform an array, possibly holding arrays as elements into a `flat'\n    list by replacing each array with its elements (recursively).\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P07 (**) Flatten a nested array structure.\n       Transform an array, possibly holding arrays as elements into a `flat'\n       list by replacing each array with its elements (recursively).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 592,
                  "line": 28,
                  "column": 1
                },
                "end": {
                  "offset": 784,
                  "line": 31,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 785,
                      "line": 32,
                      "column": 1
                    },
                    "end": {
                      "offset": 800,
                      "line": 33,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 785,
                  "line": 32,
                  "column": 1
                },
                "end": {
                  "offset": 800,
                  "line": 33,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> splat([1,[2,[3,4],5]]).perl.say;\n(1, 2, 3, 4, 5)\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> splat([1,[2,[3,4],5]]).perl.say;\n    (1, 2, 3, 4, 5)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 801,
                  "line": 34,
                  "column": 1
                },
                "end": {
                  "offset": 860,
                  "line": 36,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 870,
              "line": 38,
              "column": 1
            }
          },
          "id": "mQyt6I9VZNQhGoDX4xQI_"
        },
        {
          "text": "\nsub _splat(@t) {\n    for @t -> $t {\n        if $t ~~ Array { _splat($t) }\n        else           { take $t }\n    }\n}\n\nsub splat (@t) { gather _splat(@t) }\n\nsplat([1, [2,[3,4], 5]]).list.perl.say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 870,
              "line": 38,
              "column": 1
            },
            "end": {
              "offset": 1107,
              "line": 51,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P08 - Eliminate consecutive duplicates of list elements.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P08-eric256.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "gcr5B0m8bZPAX8JHftNWt",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P08 - Eliminate consecutive duplicates of list elements.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P08 - Eliminate consecutive duplicates of list elements.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "jjrACo4HHcNAahfU83MwO"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Eric Hodges\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Eric Hodges\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 86,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 106,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 86,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 106,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "T1SvDKUxgb6o6jvDYe7Jk"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 107,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 128,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 107,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 128,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P08 (**) Eliminate consecutive duplicates of list elements.\n    If a list contains repeated elements they should be replaced with a\n    single copy of the element. The order of the elements should not be\n    changed.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P08 (**) Eliminate consecutive duplicates of list elements.\n       If a list contains repeated elements they should be replaced with a\n       single copy of the element. The order of the elements should not be\n       changed.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 129,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 358,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 359,
                      "line": 16,
                      "column": 1
                    },
                    "end": {
                      "offset": 374,
                      "line": 17,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 359,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 374,
                  "line": 17,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say ~compress(<a a a a b c c a a d e e e e>)\na b c a d e\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say ~compress(<a a a a b c c a a d e e e e>)\n    a b c a d e\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 375,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 442,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 452,
              "line": 22,
              "column": 1
            }
          },
          "id": "zRqtnrWRbqulpzUOg0cIG"
        },
        {
          "text": "\ndie \"Example doesn't yet work in Niecza\" if $*VM ~~ 'niecza';\n\nsub compress (@in) {\n    my @return;\n    my $last;\n    for @in -> $i {\n        FIRST { $last = '' }\n        if ($i ne $last) {\n            @return.push($i);\n            $last = $i;\n        }\n    }\n    return @return;\n}\n\ncompress(<a a a a b c c a a d e e e e>).perl.say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 452,
              "line": 22,
              "column": 1
            },
            "end": {
              "offset": 826,
              "line": 41,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P08 - Eliminate consecutive duplicates of list elements.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P08-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "6dsrJ_VEAkz2yPUSornIe",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P08 - Eliminate consecutive duplicates of list elements.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P08 - Eliminate consecutive duplicates of list elements.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "5L7CH47LhnjP09N4Bf4BQ"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 86,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 108,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 86,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 108,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "-la-XTynu-X1iKuAjQ1ay"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 109,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 124,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 109,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 124,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say eliminate-consecutive-duplicates(<a a a a a b b c b d e e>);\na b c b d e\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say eliminate-consecutive-duplicates(<a a a a a b b c b d e e>);\n    a b c b d e\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 125,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 212,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 222,
              "line": 15,
              "column": 1
            }
          },
          "id": "AJzsoncOsWCI0PfDJUVKa"
        },
        {
          "text": "\nsub eliminate-consecutive-duplicates(@list)\n{\n    my $last = ();\n\n    gather for @list -> $e\n    {\n        # ~~ is the smart match operator.\n        # It's the closest thing I can think of to a comparison function\n        # which doesn't enforce a particular context... should be alright. :-)\n        next if $e ~~ $last;\n\n        $last = $e;\n\n        take $e;\n    }\n}\n\nsay \"{eliminate-consecutive-duplicates(<a a a a a b b c b d e e>)}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 222,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 702,
              "line": 36,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P08 - Eliminate consecutive duplicates of list elements.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P08-viklund.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "xZQK6ED1fBVdztjknoSrA",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P08 - Eliminate consecutive duplicates of list elements.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P08 - Eliminate consecutive duplicates of list elements.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "uVMx50pbtF8iM9sHivM62"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Johan Viklund\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Johan Viklund\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 86,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 108,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 86,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 108,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Fww7iS60_ebumc5Ha_GkY"
            },
            {
              "type": "blankline"
            },
            {
              "text": "We define an infix operator called 'compress' such that:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "We define an infix operator called 'compress' such that:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 109,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 166,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "'a' compress 'a' gives 'a'\n'a' compress 'b' gives ('a','b')\n(@a,'a') compress 'a' gives ( @a,'a')\n(@a,'a') compress 'b' gives ( @a,'a','b')\n",
              "margin": "       ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "'a' compress 'a' gives 'a'\n       'a' compress 'b' gives ('a','b')\n  (@a,'a') compress 'a' gives ( @a,'a')\n  (@a,'a') compress 'b' gives ( @a,'a','b')\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 167,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 325,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Now all we need to do is split our array up and insert compress.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Now all we need to do is split our array up and insert compress.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 326,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 391,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "given <a a b c c d> we want:\n'a' compress 'a' compress 'b' compress 'c' compress 'c' compress 'd'\n",
              "margin": "  ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "given <a a b c c d> we want:\n  'a' compress 'a' compress 'b' compress 'c' compress 'c' compress 'd'\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 392,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 494,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The reduce metaoperator does exactly this. For example:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The reduce metaoperator does exactly this. For example:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 495,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 551,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "[+] (1,2,3,4,5) == 1 + 2 + 3 + 4 + 5 == 15\n[~] <a b c d e> eq 'a' ~ 'b' ~ 'c' ~ 'd' ~ 'e' eq 'abcde'\n",
              "margin": "  ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "[+] (1,2,3,4,5) == 1 + 2 + 3 + 4 + 5 == 15\n  [~] <a b c d e> eq 'a' ~ 'b' ~ 'c' ~ 'd' ~ 'e' eq 'abcde'\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 552,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 657,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 658,
                      "line": 26,
                      "column": 1
                    },
                    "end": {
                      "offset": 679,
                      "line": 27,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 658,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 679,
                  "line": 27,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P08 (**) Eliminate consecutive duplicates of list elements.\n    If a list contains repeated elements they should be replaced with a\n    single copy of the element. The order of the elements should not be\n    changed.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P08 (**) Eliminate consecutive duplicates of list elements.\n       If a list contains repeated elements they should be replaced with a\n       single copy of the element. The order of the elements should not be\n       changed.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 680,
                  "line": 28,
                  "column": 1
                },
                "end": {
                  "offset": 909,
                  "line": 32,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 910,
                      "line": 33,
                      "column": 1
                    },
                    "end": {
                      "offset": 925,
                      "line": 34,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 910,
                  "line": 33,
                  "column": 1
                },
                "end": {
                  "offset": 925,
                  "line": 34,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say [compress] <a a a a b c c a a d e e e e>\na b c a d e\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say [compress] <a a a a b c c a a d e e e e>\n    a b c a d e\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 926,
                  "line": 35,
                  "column": 1
                },
                "end": {
                  "offset": 993,
                  "line": 37,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1003,
              "line": 39,
              "column": 1
            }
          },
          "id": "SgK2gBBmCjgVgY4VoLGFU"
        },
        {
          "text": "\nmulti infix:<compress> ( $a, $b ) { $a      ~~ $b ?? $a !! ( $a, $b ) }\nmulti infix:<compress> ( @a, $b ) { @a[*-1] ~~ $b ?? @a !! ( @a, $b ).flat }\n\nsay ([compress] <a a a a b c c a a d e e e e>).perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1003,
              "line": 39,
              "column": 1
            },
            "end": {
              "offset": 1247,
              "line": 46,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P09 - Pack consecutive duplicates of list elements into sublists.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P09-rje.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "9I0rZ1cIiewlSdYq1FIEC",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P09 - Pack consecutive duplicates of list elements into sublists.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P09 - Pack consecutive duplicates of list elements into sublists.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 94,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 94,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "0WZ8uFv4k85yZcV-LqYKD"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Rob Eaglestone\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Rob Eaglestone\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 95,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 118,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 95,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 118,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "V2EAHYVSr9Oe0WWDnXj0Q"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 119,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 140,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 119,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 140,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P09 (**) Pack consecutive duplicates of list elements into sublists.\n    If a list contains repeated elements they should be placed in separate\n    sublists.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P09 (**) Pack consecutive duplicates of list elements into sublists.\n       If a list contains repeated elements they should be placed in separate\n       sublists.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 141,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 308,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 309,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 324,
                      "line": 16,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 309,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 324,
                  "line": 16,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> pack_dup(<a a a a b c c a a d e e e e>).perl.say\n[[\"a\",\"a\",\"a\",\"a\"],[\"b\"],[\"c\",\"c\"],[\"a\",\"a\"],[\"d\"],[\"e\",\"e\",\"e\",\"e\"]]\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> pack_dup(<a a a a b c c a a d e e e e>).perl.say\n    [[\"a\",\"a\",\"a\",\"a\"],[\"b\"],[\"c\",\"c\"],[\"a\",\"a\"],[\"d\"],[\"e\",\"e\",\"e\",\"e\"]]\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 325,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 454,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 464,
              "line": 21,
              "column": 1
            }
          },
          "id": "C9TZLddrXXL5f6yCjgdlt"
        },
        {
          "text": "\n# Robert Eaglestone  22 sept 09\n#\n#   My first Perl6 script - I'm sure this can be done better\n#\nmy @in = <a a a a b c c a a d e e e e>;\nmy @out = pack_dup( @in );\n@out.perl.say;\n\nsub pack_dup(@in) {\n    my @out = [ [@in.shift], ];\n\n    for @in -> $elem {\n        push @out, [] if $elem ne @out[*-1][0];\n        push @out[*-1], $elem;\n    }\n    return @out;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 464,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 865,
              "line": 41,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P09 - Pack consecutive duplicates of list elements into sublists.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P09-scottp.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "cJCC7Aa7SiqE2vr6lwgS7",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P09 - Pack consecutive duplicates of list elements into sublists.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P09 - Pack consecutive duplicates of list elements into sublists.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 94,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 94,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "BWO4CHqheRFxmdd3QvXs1"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 95,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 117,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 95,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 117,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "qLr6MZfnk8n7zoXsgWpPa"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 118,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 139,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 118,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 139,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P09 (**) Pack consecutive duplicates of list elements into sublists.\n    If a list contains repeated elements they should be placed in separate\n    sublists.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P09 (**) Pack consecutive duplicates of list elements into sublists.\n       If a list contains repeated elements they should be placed in separate\n       sublists.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 140,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 307,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 308,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 323,
                      "line": 16,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 308,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 323,
                  "line": 16,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> pack_dup(<a a a a b c c a a d e e e e>).perl.say\n[[\"a\",\"a\",\"a\",\"a\"],[\"b\"],[\"c\",\"c\"],[\"a\",\"a\"],[\"d\"],[\"e\",\"e\",\"e\",\"e\"]]\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> pack_dup(<a a a a b c c a a d e e e e>).perl.say\n    [[\"a\",\"a\",\"a\",\"a\"],[\"b\"],[\"c\",\"c\"],[\"a\",\"a\"],[\"d\"],[\"e\",\"e\",\"e\",\"e\"]]\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 324,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 453,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 463,
              "line": 21,
              "column": 1
            }
          },
          "id": "QtTvr37jGawcqr4bJD16M"
        },
        {
          "text": "\nmy @l = <a a a a b c c a a d e e e e>;\nsub packit (@in) {\n    my @out;\n    my @last = [shift @in,];\n    for @in -> $t {\n        if (@last[0] ne $t) {\n            push @out, @last;\n            @last := [$t,];\n        }\n        else {\n            push @last, $t;\n        }\n    }\n    if (@last.elems) {\n        push @out, @last;\n    }\n    return @out;\n}\nsay ~@l;\nsay packit(@l).perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 463,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 885,
              "line": 44,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P09 - Pack consecutive duplicate elements of a list into sublists.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P09-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "YNEWTGW7rnNf_OU4lDlgp",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P09 - Pack consecutive duplicate elements of a list into sublists.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P09 - Pack consecutive duplicate elements of a list into sublists.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 95,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 95,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "1Jrj7Quxgf6FQNMHI3aTK"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 96,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 118,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 96,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 118,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "ZlU-DHtn0Bs9l852AF9le"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 119,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 134,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 119,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 134,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say pack-consecutive-dups(<a a a a a b b c b d e e>.list).perl;\n> ([\"a\", \"a\", \"a\", \"a\", \"a\"], [\"b\", \"b\"], [\"c\"], [\"b\"], [\"d\"], [\"e\", \"e\"]).list\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say pack-consecutive-dups(<a a a a a b b c b d e e>.list).perl;\n    > ([\"a\", \"a\", \"a\", \"a\", \"a\"], [\"b\", \"b\"], [\"c\"], [\"b\"], [\"d\"], [\"e\", \"e\"]).list\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 135,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 289,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 299,
              "line": 15,
              "column": 1
            }
          },
          "id": "iLUXD8asQFOSNHzhE9E_e"
        },
        {
          "text": "\nsub pack-consecutive-dups(@list)\n{\n    gather while @list.elems\n    {\n        my $last = @list[0];\n\n        take [\n            gather while @list.elems\n                   and @list[0] ~~ $last\n            {\n                take ($last = @list.shift)\n            }\n        ]\n    }.list\n}\n\nsay pack-consecutive-dups([<a a a a a b b c b d e e>]).perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 299,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 689,
              "line": 35,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P09 - Pack consecutive duplicates of list elements into sublists.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P09-unobe.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "96743KEKqgGHnIVgEpRJc",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P09 - Pack consecutive duplicates of list elements into sublists.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P09 - Pack consecutive duplicates of list elements into sublists.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 94,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 94,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "pwMatJRLImjQwevjfsTkq"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Romano\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Romano\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 95,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 116,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 95,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 116,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "ZV4Q6bif8a5WAKxln7HAH"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 117,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 138,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 117,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 138,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P09 (**) Pack consecutive duplicates of list elements into sublists.\n    If a list contains repeated elements they should be placed in separate\n    sublists.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P09 (**) Pack consecutive duplicates of list elements into sublists.\n        If a list contains repeated elements they should be placed in separate\n        sublists.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 139,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 309,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 310,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 325,
                      "line": 16,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 310,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 325,
                  "line": 16,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> pack_dup(<a a a a b c c a a d e e e e>).perl.say\n[[\"a\",\"a\",\"a\",\"a\"],[\"b\"],[\"c\",\"c\"],[\"a\",\"a\"],[\"d\"],[\"e\",\"e\",\"e\",\"e\"]]\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> pack_dup(<a a a a b c c a a d e e e e>).perl.say\n    [[\"a\",\"a\",\"a\",\"a\"],[\"b\"],[\"c\",\"c\"],[\"a\",\"a\"],[\"d\"],[\"e\",\"e\",\"e\",\"e\"]]\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 326,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 455,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 465,
              "line": 21,
              "column": 1
            }
          },
          "id": "pQxnh6xgZiEjiooIgXe6W"
        },
        {
          "text": "\nmy @l = <a a a a b c c a a d e e e e>;\nsub prob09 (@in) {\n    return gather while @in.elems {\n        my $val = @in[0];\n        take [gather while @in.elems and @in[0] ~~ $val { take shift @in }];\n    }\n}\nsay ~@l;\nsay prob09(@l).list.perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 465,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 746,
              "line": 33,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P10 - Run-length encoding of a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P10-scottp.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "-02Xt5qg7SnOkpOrXStt3",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P10 - Run-length encoding of a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P10 - Run-length encoding of a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 65,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 65,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "QabdhcmwtA4ARxq_PKojj"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 66,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 88,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 66,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 88,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "BkncU-HW2jJ4ba5K_sexx"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 89,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 110,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 89,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 110,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P10 (*) Run-length encoding of a list.\n    Use the result of problem P09 to implement the so-called run-length\n    encoding data compression method. Consecutive duplicates of elements\n    are encoded as arrays [N, E] where N is the number of duplicates of the\n    element E.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P10 (*) Run-length encoding of a list.\n       Use the result of problem P09 to implement the so-called run-length\n       encoding data compression method. Consecutive duplicates of elements\n       are encoded as arrays [N, E] where N is the number of duplicates of the\n       element E.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 111,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 401,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 402,
                      "line": 17,
                      "column": 1
                    },
                    "end": {
                      "offset": 417,
                      "line": 18,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 402,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 417,
                  "line": 18,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> encode(<a a a a b c c a a d e e e e>).perl.say\n[[4, \"a\"], [1, \"b\"], [2, \"c\"], [2, \"a\"], [1, \"d\"], [4, \"e\"]]\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> encode(<a a a a b c c a a d e e e e>).perl.say\n    [[4, \"a\"], [1, \"b\"], [2, \"c\"], [2, \"a\"], [1, \"d\"], [4, \"e\"]]\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 418,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 536,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 546,
              "line": 23,
              "column": 1
            }
          },
          "id": "J-gAVAR_3PV3rCfFvkZ1B"
        },
        {
          "text": "\nmy @l = <a a a a b c c a a d e e e e>;\nsub packit (@in) {\n    my @out;\n    my $last = shift @in;\n    my $count = 1;\n    for @in -> $t {\n        if ($last eq $t) {\n            $count++;\n        }\n        else {\n            push @out, $[$count, $last];\n            $last = $t;\n            $count = 1;\n        }\n    }\n    push @out, $[$count, $last];\n    return @out;\n}\nsay ~@l;\nsay packit(@l).perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 546,
              "line": 23,
              "column": 1
            },
            "end": {
              "offset": 984,
              "line": 46,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P10 - Run-length encoding of a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P10-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "CCpoq1Kwh4inzvL5aPYu1",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P10 - Run-length encoding of a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P10 - Run-length encoding of a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 65,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 65,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "_Stb6BwhxDWJi3UhTyOb7"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 66,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 88,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 66,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 88,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "nqqzYy5xsdVQoPo3U1WPY"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 89,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 104,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 89,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 104,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say encode(<a a a a a b b c b d e e>.list).perl;\n([5, \"a\"], [2, \"b\"], [1, \"c\"], [1, \"b\"], [1, \"d\"], [2, \"e\"]).list\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say encode(<a a a a a b b c b d e e>.list).perl;\n    ([5, \"a\"], [2, \"b\"], [1, \"c\"], [1, \"b\"], [1, \"d\"], [2, \"e\"]).list\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 105,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 230,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 240,
              "line": 15,
              "column": 1
            }
          },
          "id": "vjnuWqMs98hzbgQbNkrbG"
        },
        {
          "text": "\nsub encode(@ls)\n{\n    my @list = @ls[*];\n    gather while @list.elems {\n        my $value = @list[0];\n        my $count = 0;\n\n        while @list.elems and @list[0] ~~ $value {\n            $count++;\n            shift @list\n        }\n\n        take [$count, $value];\n    }\n}\n\nsay encode(<a a a a a b b c b d e e>).list.perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 240,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 604,
              "line": 35,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P10 - Run-length encoding of a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P10-unobe.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "TVEISHGtFgH5-9ZlUfSWw",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P10 - Run-length encoding of a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P10 - Run-length encoding of a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 65,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 65,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "j6EcSS7FaMkWK00jsMb-t"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Romano\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Romano\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 66,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 87,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 66,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 87,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "1baFTJHE9RD8WMTYcmkk5"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 88,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 109,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 88,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 109,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P10 (*) Run-length encoding of a list.\n    Use the result of problem P09 to implement the so-called run-length\n    encoding data compression method. Consecutive duplicates of elements\n    are encoded as arrays [N, E] where N is the number of duplicates of the\n    element E.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P10 (*) Run-length encoding of a list.\n       Use the result of problem P09 to implement the so-called run-length\n       encoding data compression method. Consecutive duplicates of elements\n       are encoded as arrays [N, E] where N is the number of duplicates of the\n       element E.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 110,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 400,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 401,
                      "line": 17,
                      "column": 1
                    },
                    "end": {
                      "offset": 416,
                      "line": 18,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 401,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 416,
                  "line": 18,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> prob10(<a a a a b c c a a d e e e e>).perl.say\n[[4, \"a\"], [1, \"b\"], [2, \"c\"], [2, \"a\"], [1, \"d\"], [4, \"e\"]]\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> prob10(<a a a a b c c a a d e e e e>).perl.say\n    [[4, \"a\"], [1, \"b\"], [2, \"c\"], [2, \"a\"], [1, \"d\"], [4, \"e\"]]\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 417,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 535,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 545,
              "line": 23,
              "column": 1
            }
          },
          "id": "p208CwMQkAt6AWAtuVZRz"
        },
        {
          "text": "\nmy @l = <a a a a b c c a a d e e e e>;\nsub prob10 (@in) {\n    return gather loop {\n        last if !@in.elems;\n        my $val = @in[0];\n        take [\n            gather {\n                loop {\n                    last if !@in.elems;\n                    @in[0] ~~ $val ?? take(shift @in) !! last\n                };\n            }.elems, $val\n        ];\n    };\n}\nsay ~@l;\nsay prob10(@l).list.perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 545,
              "line": 23,
              "column": 1
            },
            "end": {
              "offset": 984,
              "line": 43,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P11 - Modified run-length encoding.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P11-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "f7eE5JUGKt4YhxtmhkJpb",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P11 - Modified run-length encoding.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P11 - Modified run-length encoding.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 64,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 64,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "NgJlBMCCmXYAjFjRU27fH"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 65,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 87,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 65,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 87,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "io6fFFn3QoBBy2Q4umlcL"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 88,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 103,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 88,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 103,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say encode(<a a a a b c c a a d e e e e>.list).perl;\n([4, \"a\"], \"b\", [2, \"c\"], [2, \"a\"], \"d\", [4, \"e\"])\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say encode(<a a a a b c c a a d e e e e>.list).perl;\n    ([4, \"a\"], \"b\", [2, \"c\"], [2, \"a\"], \"d\", [4, \"e\"])\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 104,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 218,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 228,
              "line": 15,
              "column": 1
            }
          },
          "id": "a2Klawcm_0jIURGVHg00H"
        },
        {
          "text": "\nsub encode(@list)\n{\n    gather while @list.elems {\n        my $value = @list[0];\n        my $count = 0;\n\n        while @list.elems and @list[0] ~~ $value {\n            $count++;\n            shift @list\n        }\n\n        take $count == 1 ?? $value !! [$count, $value];\n    }\n}\n\nsay encode([<a a a a b c c a a d e e e e>]).list.perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 228,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 602,
              "line": 34,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P11 - Modified run-length encoding.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P11-unobe.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "jHt5-dpju4dXleLRnvY-6",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P11 - Modified run-length encoding.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P11 - Modified run-length encoding.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 64,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 64,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "J9uxgAn_I15y4QxifO95X"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Romano\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Romano\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 65,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 86,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 65,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 86,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "88Lm_doHAbPfvcpYd6yfU"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 87,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 108,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 87,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 108,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P11 (*) Modified run-length encoding.\n    Modify the result of problem P10 in such a way that if an element has\n    no duplicates it is simply copied into the result list. Only elements\n    with duplicates are transferred as (N E) lists.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P11 (*) Modified run-length encoding.\n       Modify the result of problem P10 in such a way that if an element has\n       no duplicates it is simply copied into the result list. Only elements\n       with duplicates are transferred as (N E) lists.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 109,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 359,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 360,
                      "line": 16,
                      "column": 1
                    },
                    "end": {
                      "offset": 375,
                      "line": 17,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 360,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 375,
                  "line": 17,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> encode_modified(<a a a a b c c a a d e e e e>).perl.say\n([4, \"a\"], \"b\", [2, \"c\"], [2, \"a\"], \"d\", [4, \"e\"])\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> encode_modified(<a a a a b c c a a d e e e e>).perl.say\n    ([4, \"a\"], \"b\", [2, \"c\"], [2, \"a\"], \"d\", [4, \"e\"])\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 376,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 493,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 503,
              "line": 22,
              "column": 1
            }
          },
          "id": "3p3DLf8HTJcDwx52GNjqN"
        },
        {
          "text": "\nmy @l = <a a a a b c c a a d e e e e>;\nsub prob11 (@in) {\n    return gather loop {\n        last if !@in.elems;\n        my $val = @in[0];\n        my @a = gather loop {\n            last if !@in.elems;\n            @in[0] ~~ $val ?? take(shift @in) !! last\n        };\n        take @a.end ?? [@a.elems, $val] !! $val;\n    };\n}\nsay ~@l;\nsay prob11(@l).list.perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 503,
              "line": 22,
              "column": 1
            },
            "end": {
              "offset": 901,
              "line": 39,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P12 - Decode a run-length encoded list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P12-rhebus.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "wUK3hMEXR06-ncY4215df",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P12 - Decode a run-length encoded list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P12 - Decode a run-length encoded list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "oYT52GP5SGP5e8GusZj8b"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Philip Potter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Philip Potter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 69,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 91,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 69,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 91,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "wi6QFbs_F2LiQx2TE_RAE"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 92,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 113,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 92,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 113,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P12 (**) Decode a run-length encoded list.\n    Given a run-length code list generated as specified in problem P11.\n    Construct its uncompressed version.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P12 (**) Decode a run-length encoded list.\n       Given a run-length code list generated as specified in problem P11.\n       Construct its uncompressed version.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 114,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 278,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "We use the following constructs:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "We use the following constructs:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 279,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 312,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": ".map\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": ".map\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 313,
                          "line": 17,
                          "column": 1
                        },
                        "end": {
                          "offset": 324,
                          "line": 18,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 313,
                      "line": 17,
                      "column": 1
                    },
                    "end": {
                      "offset": 324,
                      "line": 18,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "otaVMlzElif5YzqqldVNH"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "creates a modified sequence by applying the block to each element in\nturn. Within the block the element is represented by $_\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "creates a modified sequence by applying the block to each element in\nturn. Within the block the element is represented by $_\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 325,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 450,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "when expr { block }\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "when expr { block }\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 451,
                          "line": 22,
                          "column": 1
                        },
                        "end": {
                          "offset": 477,
                          "line": 23,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 451,
                      "line": 22,
                      "column": 1
                    },
                    "end": {
                      "offset": 477,
                      "line": 23,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "jhsKCyfVfOGCKgfQs2dXs"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "roughly equivalent to: if $_ ~~ expr { block; next }\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "roughly equivalent to: if $_ ~~ expr { block; next }\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 478,
                  "line": 24,
                  "column": 1
                },
                "end": {
                  "offset": 531,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "xx\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "xx\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 532,
                          "line": 26,
                          "column": 1
                        },
                        "end": {
                          "offset": 541,
                          "line": 27,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 532,
                      "line": 26,
                      "column": 1
                    },
                    "end": {
                      "offset": 541,
                      "line": 27,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "xopCI3sKxOGNJSvEij3vv"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "list repetition operator. (<1 2> xx 3) is the same as <1 2 1 2 1 2>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "list repetition operator. (<1 2> xx 3) is the same as <1 2 1 2 1 2>\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 542,
                  "line": 28,
                  "column": 1
                },
                "end": {
                  "offset": 610,
                  "line": 29,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": ".flat\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": ".flat\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 611,
                          "line": 30,
                          "column": 1
                        },
                        "end": {
                          "offset": 623,
                          "line": 31,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 611,
                      "line": 30,
                      "column": 1
                    },
                    "end": {
                      "offset": 623,
                      "line": 31,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "DQPtxEkIjxaU30Ub1Q15Z"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "flattens a sequence. The map has constructed a sequence of Parcels:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "flattens a sequence. The map has constructed a sequence of Parcels:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 624,
                  "line": 32,
                  "column": 1
                },
                "end": {
                  "offset": 692,
                  "line": 33,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "(('a','a','a','a'),'b',('c','c'))\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "(('a','a','a','a'),'b',('c','c'))\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 693,
                  "line": 34,
                  "column": 1
                },
                "end": {
                  "offset": 731,
                  "line": 35,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "This sequence may be presented flat or hierarchical depending on\ncontext. We use .flat to force a flattened context.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "This sequence may be presented flat or hierarchical depending on\ncontext. We use .flat to force a flattened context.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 732,
                  "line": 36,
                  "column": 1
                },
                "end": {
                  "offset": 849,
                  "line": 38,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 850,
                      "line": 39,
                      "column": 1
                    },
                    "end": {
                      "offset": 865,
                      "line": 40,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 850,
                  "line": 39,
                  "column": 1
                },
                "end": {
                  "offset": 865,
                  "line": 40,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say prob12(([4,'a'],'b',[2,'c'],[2,'a'],'d',[4,'e']))\na a a a b c c a a d e e e e\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say prob12(([4,'a'],'b',[2,'c'],[2,'a'],'d',[4,'e']))\n    a a a a b c c a a d e e e e\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 866,
                  "line": 41,
                  "column": 1
                },
                "end": {
                  "offset": 958,
                  "line": 43,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 968,
              "line": 45,
              "column": 1
            }
          },
          "id": "X2LxWsiYwACqnWXrPhfPd"
        },
        {
          "text": "\nsub prob12 (@a) {\n    my $l = @a.map: {\n        when Array { $_[1] xx $_[0] }\n        $_\n    }\n    return $l.flat;\n}\n\nmy @l = ([4,'a'],'b',[2,'c'],[2,'a'],'d',[4,'e']);\n\nsay ~@l;\nprob12(@l).list.perl.say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 968,
              "line": 45,
              "column": 1
            },
            "end": {
              "offset": 1214,
              "line": 60,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P12 - Decode modified run-length encoding.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P12-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "hYOq8X_qCgwm9Ut_8D7FR",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P12 - Decode modified run-length encoding.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P12 - Decode modified run-length encoding.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "U2RV6X0Bzu5xFHZgHoLmP"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 72,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 94,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 72,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 94,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Mj6arrdMkUvgfEsT8kqEM"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 95,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 110,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 95,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 110,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say decode(([5, \"a\"], [2, \"b\"], \"c\", \"b\", \"d\", [2, \"e\"]).list).perl;\n(\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"b\", \"d\", \"e\", \"e\").list\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say decode(([5, \"a\"], [2, \"b\"], \"c\", \"b\", \"d\", [2, \"e\"]).list).perl;\n    (\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"b\", \"d\", \"e\", \"e\").list\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 111,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 256,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 266,
              "line": 15,
              "column": 1
            }
          },
          "id": "9w50laAP6e5_dCMO8Z2X6"
        },
        {
          "text": "\nsub decode(@list)\n{\n    gather for @list -> $e\n    {\n        $e !~~ Array ?? take($e) !! take(($e[1] xx $e[0]).list)\n    }\n}\n\nsay decode(([5, \"a\"], [2, \"b\"], \"c\", \"b\", \"d\", [2, \"e\"]).list).flat.list.perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 266,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 512,
              "line": 27,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P12 - Decode a run-length encoded list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P12-unobe.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "cQRjNfu2L79zIexqSTOdv",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P12 - Decode a run-length encoded list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P12 - Decode a run-length encoded list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "htUZvGI9iZQoewyX2ZddD"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Romano\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Romano\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 69,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 90,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 69,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 90,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "jbGBwkCncn-TDySyJKnU6"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 91,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 112,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 91,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 112,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P12 (**) Decode a run-length encoded list.\n    Given a run-length code list generated as specified in problem P11.\n    Construct its uncompressed version.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P12 (**) Decode a run-length encoded list.\n       Given a run-length code list generated as specified in problem P11.\n       Construct its uncompressed version.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 113,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 277,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 278,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 293,
                      "line": 16,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 278,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 293,
                  "line": 16,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say prob12(([<4 a>],'b',[<2 c>],[<2 a>], 'd', [<4 e>]));\na a a a b c c a a d e e e e\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say prob12(([<4 a>],'b',[<2 c>],[<2 a>], 'd', [<4 e>]));\n    a a a a b c c a a d e e e e\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 294,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 389,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 399,
              "line": 21,
              "column": 1
            }
          },
          "id": "-ctBuTxtvJYEflF1DPkQc"
        },
        {
          "text": "\nmy @l = ([('4', 'a')],'b',[('2', 'c')],[('2','a')], 'd', [('4','e')]);\nsub prob12 (@in) {\n    my @out;\n    for 0 ... (@in.end) -> $x {\n        if @in[$x] ~~ Array {\n            loop (my $i=0; $i < @in[$x][0]; $i++) {\n                push @out, @in[$x][1];\n            };\n        }\n        else {\n            push @out, @in[$x];\n        }\n    }\n    return @out;\n}\n\nsay @l.perl;\nsay prob12(@l).perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 399,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 838,
              "line": 42,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P13 - Run-length encoding of a list (direct solution).\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P13-rhebus.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "uhP8tXj1i0b0QEV2vgD1x",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P13 - Run-length encoding of a list (direct solution).\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P13 - Run-length encoding of a list (direct solution).\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 83,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 83,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "o0QHch22PziAzGTBhUVhX"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Philip Potter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Philip Potter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 84,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 106,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 84,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 106,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "OvhBkTecnJAGBmCMIDaXB"
            },
            {
              "type": "blankline"
            },
            {
              "text": "We use gather as a loop modifier, to gather a list over all the loop\niterations\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "We use gather as a loop modifier, to gather a list over all the loop\niterations\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 107,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 187,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 188,
                      "line": 12,
                      "column": 1
                    },
                    "end": {
                      "offset": 209,
                      "line": 13,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 188,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 209,
                  "line": 13,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P13 (**) Run-length encoding of a list (direct solution).\n    Implement the so-called run-length encoding data compression method\n    directly. I.e. don't explicitly create the sublists containing the\n    duplicates, as in problem P09, but only count them. As in problem P11,\n    simplify the result list by replacing the singletons [1,X] by X.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P13 (**) Run-length encoding of a list (direct solution).\n       Implement the so-called run-length encoding data compression method\n       directly. I.e. don't explicitly create the sublists containing the\n       duplicates, as in problem P09, but only count them. As in problem P11,\n       simplify the result list by replacing the singletons [1,X] by X.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 210,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 570,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 571,
                      "line": 20,
                      "column": 1
                    },
                    "end": {
                      "offset": 586,
                      "line": 21,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 571,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 586,
                  "line": 21,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> encode_direct(<a a a a b c c a a d e e e e>).perl.say\n([4, \"a\"], \"b\", [2, \"c\"], [2, \"a\"], \"d\", [4, \"e\"])\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> encode_direct(<a a a a b c c a a d e e e e>).perl.say\n    ([4, \"a\"], \"b\", [2, \"c\"], [2, \"a\"], \"d\", [4, \"e\"])\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 587,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 702,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 712,
              "line": 26,
              "column": 1
            }
          },
          "id": "l6S4G69ea_HxoPh3KGVuL"
        },
        {
          "text": "\nsub runlength (@a) {\n    gather {\n        last if !@a.elems;\n\n        my $val = @a.shift;\n        my $num = 1;\n        while @a[0] ~~ $val { @a.shift; $num++; }\n        take $num == 1 ?? $val !! [$num,$val];\n    }\n}\n\nmy @l = <a a a a b c c a a d e e e e>;\n\nsay ~@l;\nrunlength(@l).list.perl.say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 712,
              "line": 26,
              "column": 1
            },
            "end": {
              "offset": 1048,
              "line": 44,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P13 - Direct run-length encoding.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P13-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "17xbuuzfMwyiJFFlhSRVE",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P13 - Direct run-length encoding.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P13 - Direct run-length encoding.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 62,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 62,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "6dY52bjyukPw7DioPTkMQ"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 63,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 63,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "FFX-ItfoRNj9Q9JMsXDlr"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 86,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 101,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 86,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 101,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say encode(<a a a a b c c a a d e e e e>.list).perl;\n([4, \"a\"], \"b\", [2, \"c\"], [2, \"a\"], \"d\", [4, \"e\"]).list\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say encode(<a a a a b c c a a d e e e e>.list).perl;\n    ([4, \"a\"], \"b\", [2, \"c\"], [2, \"a\"], \"d\", [4, \"e\"]).list\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 102,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 221,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 231,
              "line": 15,
              "column": 1
            }
          },
          "id": "673iGGGx3gXL6b2vFij0k"
        },
        {
          "text": "\n# I can't see the difference between this and P11.\n# Perhaps I'm being stupid.\n\nsub encode(@list)\n{\n    gather while @list.elems {\n        my $value = @list[0];\n        my $count = 0;\n\n        while @list.elems and @list[0] ~~ $value {\n            $count++;\n            shift @list\n        }\n\n        take $count == 1 ?? $value !! [$count, $value];\n    }\n}\n\nsay encode(<a a a a b c c a a d e e e e>.Array).list.perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 231,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 689,
              "line": 37,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P13 - Run-length encoding of a list (direct solution).\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P13-viklund.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "h28dVsS1ShuQ4zALc3U3r",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P13 - Run-length encoding of a list (direct solution).\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P13 - Run-length encoding of a list (direct solution).\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 83,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 83,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "2lBmR0zkdEtBh8FJDT6ks"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Johan Viklund\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Johan Viklund\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 84,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 106,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 84,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 106,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "ENyGFR8znMrTb8nQgv8y9"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 107,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 128,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 107,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 128,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P13 (**) Run-length encoding of a list (direct solution).\n    Implement the so-called run-length encoding data compression method\n    directly. I.e. don't explicitly create the sublists containing the\n    duplicates, as in problem P09, but only count them. As in problem P11,\n    simplify the result list by replacing the singletons [1,X] by X.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P13 (**) Run-length encoding of a list (direct solution).\n       Implement the so-called run-length encoding data compression method\n       directly. I.e. don't explicitly create the sublists containing the\n       duplicates, as in problem P09, but only count them. As in problem P11,\n       simplify the result list by replacing the singletons [1,X] by X.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 129,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 489,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 490,
                      "line": 17,
                      "column": 1
                    },
                    "end": {
                      "offset": 505,
                      "line": 18,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 490,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 505,
                  "line": 18,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> encode_direct(<a a a a b c c a a d e e e e>).perl.say\n([4, \"a\"], \"b\", [2, \"c\"], [2, \"a\"], \"d\", [4, \"e\"])\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> encode_direct(<a a a a b c c a a d e e e e>).perl.say\n    ([4, \"a\"], \"b\", [2, \"c\"], [2, \"a\"], \"d\", [4, \"e\"])\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 506,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 621,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 631,
              "line": 23,
              "column": 1
            }
          },
          "id": "_TxTjv2NZY9B4gq-uHizE"
        },
        {
          "text": "\nmulti infix:<compress> ( $a, $b ) { $a ~~ $b ?? [$[2, $a]] !! [ $[1, $a], $[1, $b] ] }\nmulti infix:<compress> ( @a, $b ) {\n    \n    if @a[*-1][1] ~~ $b {\n        @a[*-1][0]++;\n        return @a;\n    } else {\n        return [ |@a, [1, $b] ];\n    }\n}\n\nsay ([compress] <a a a a b c c a a d e e e e>).perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 631,
              "line": 23,
              "column": 1
            },
            "end": {
              "offset": 975,
              "line": 38,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P14 - Duplicate the elements of a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P14-scottp.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "3uF0qq8uUSRv3u9IrlqjH",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P14 - Duplicate the elements of a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P14 - Duplicate the elements of a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "DvgfYANHdzOlbwFslJYS0"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 69,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 91,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 69,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 91,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "43JBAQOusLjMJHCeSZPqX"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 92,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 113,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 92,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 113,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P14 (*) Duplicate the elements of a list.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P14 (*) Duplicate the elements of a list.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 114,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 159,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 160,
                      "line": 13,
                      "column": 1
                    },
                    "end": {
                      "offset": 175,
                      "line": 14,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 160,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 175,
                  "line": 14,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say ~dupli(<a b c c d>);\na a b b c c c c d d\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say ~dupli(<a b c c d>);\n    a a b b c c c c d d\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 176,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 231,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 241,
              "line": 19,
              "column": 1
            }
          },
          "id": "LHh6VDGGybJ-MRNZ4E9dG"
        },
        {
          "text": "\nsub dupli(@l) {\n    return @l.map({$_, $_});\n}\nsay ~dupli(<a b c c d>);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 241,
              "line": 19,
              "column": 1
            },
            "end": {
              "offset": 354,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P14 - Duplicate the elements in a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P14-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "o4vPCW0uDOhog9-JiUp2_",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P14 - Duplicate the elements in a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P14 - Duplicate the elements in a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "eDK52zUlfcioChqrRu9Gc"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 69,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 91,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 69,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 91,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "pxcljZZfhx7w2tdWqh05b"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 92,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 107,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 92,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 107,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say duplicate(<a b c c d e>.list);\na a b b c c c c d d e e\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say duplicate(<a b c c d e>.list);\n    a a b b c c c c d d e e\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 108,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 177,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 187,
              "line": 15,
              "column": 1
            }
          },
          "id": "iQYXn-XKctGZxX3KlOpds"
        },
        {
          "text": "\nsub duplicate(@list)\n{\n    @list.map({$_, $_}).flat;\n}\n\nsay \"{duplicate(<a b c c d e>.list)}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 187,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 323,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P14 - Duplicate the elements of a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P14-viklund.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "P5ymayU4I6k9BYYlHYgke",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P14 - Duplicate the elements of a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P14 - Duplicate the elements of a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "o2X3-bXB1RwG-xMDRtcTp"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Johan Viklund\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Johan Viklund\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 69,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 91,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 69,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 91,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "DT_1f6PBguQb9XetkuM6b"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 92,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 113,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 92,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 113,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P14 (*) Duplicate the elements of a list.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P14 (*) Duplicate the elements of a list.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 114,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 160,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 161,
                      "line": 13,
                      "column": 1
                    },
                    "end": {
                      "offset": 176,
                      "line": 14,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 161,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 176,
                  "line": 14,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say ~dupli(<a b c c d>);\na a b b c c c c d d\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say ~dupli(<a b c c d>);\n    a a b b c c c c d d\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 177,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 232,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 242,
              "line": 19,
              "column": 1
            }
          },
          "id": "bzYsbaLhJg-EMfaRVgLt3"
        },
        {
          "text": "\nsay <a b c c d>.map({ $_ xx 2 }).map({.list}).flat.list.perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 242,
              "line": 19,
              "column": 1
            },
            "end": {
              "offset": 345,
              "line": 23,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P15 - Replicate the elements of a list a given number of times.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P15-rhebus.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "kc65Ir6yA-5S7DLFaddzi",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P15 - Replicate the elements of a list a given number of times.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P15 - Replicate the elements of a list a given number of times.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 92,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 92,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "Rs3C8VqEBRGn7HiJoauji"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Philip Potter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Philip Potter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 93,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 115,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 93,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 115,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "_-0BMpxiVL9ObR0-5DxHr"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 116,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 137,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 116,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 137,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P15 (**) Replicate the elements of a list a given number of times.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P15 (**) Replicate the elements of a list a given number of times.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 138,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 209,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 210,
                      "line": 13,
                      "column": 1
                    },
                    "end": {
                      "offset": 225,
                      "line": 14,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 210,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 225,
                  "line": 14,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say ~repli <a b c>,3;\na a a b b b c c c\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say ~repli <a b c>,3;\n    a a a b b b c c c\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 226,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 276,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 286,
              "line": 19,
              "column": 1
            }
          },
          "id": "LYBFXqRbfbRXIvGZLjuYU"
        },
        {
          "text": "\nsub repli(@l,$n) {\n    return @l.map({$_ xx $n});\n}\n\nsay ~repli <a b c>,3;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 286,
              "line": 19,
              "column": 1
            },
            "end": {
              "offset": 402,
              "line": 27,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P15 - Replicate the elements of a list a given number of times.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P15-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "bqj3BNDEKegdyKcZL2flJ",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P15 - Replicate the elements of a list a given number of times.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P15 - Replicate the elements of a list a given number of times.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 92,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 92,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "UTO7tDPvTvOsxfdlEc7N4"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 93,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 115,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 93,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 115,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "musxQpwWF-atkWKsi6Kcf"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 116,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 131,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 116,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 131,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say replicate(<a b c c d e>.list, 3);\na a a b b b c c c c c c d d d e e e\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say replicate(<a b c c d e>.list, 3);\n    a a a b b b c c c c c c d d d e e e\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 132,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 216,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 226,
              "line": 15,
              "column": 1
            }
          },
          "id": "_G96D2HHCuoOIS1jKLQ-n"
        },
        {
          "text": "\nsub replicate(@list, $times)\n{\n    @list.map({$_ xx $times}).flat;\n}\n\nsay \"{replicate(<a b c c d e>.list, 3)}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 226,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 379,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P15 - Replicate the elements of a list a given number of times.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P15-unobe.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "jISzr9Asop2CT22dQ_F6p",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P15 - Replicate the elements of a list a given number of times.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P15 - Replicate the elements of a list a given number of times.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 92,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 92,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "77FHJ9WQueeyiirC4_H4w"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Romano\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Romano\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 93,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 114,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 93,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 114,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "vBR2XamzeF56b05YJS-tH"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 115,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 136,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 115,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 136,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P15 (**) Replicate the elements of a list a given number of times.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P15 (**) Replicate the elements of a list a given number of times.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 137,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 207,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 208,
                      "line": 13,
                      "column": 1
                    },
                    "end": {
                      "offset": 223,
                      "line": 14,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 208,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 223,
                  "line": 14,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say prob15(<a b c>, 3);\na a a b b b c c c\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say prob15(<a b c>, 3);\n    a a a b b b c c c\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 224,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 276,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 286,
              "line": 19,
              "column": 1
            }
          },
          "id": "IzV_3ssK0t2oOeTfgJ8cG"
        },
        {
          "text": "\nmy @l = <a b c>;\nsub prob15(@in, $n) {\n    gather { for 0 ... @in.end -> $i { for 1 ... $n { take @in[$i] } } }\n}\nsay @l.perl;\nsay prob15(@l, 3).list.perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 286,
              "line": 19,
              "column": 1
            },
            "end": {
              "offset": 483,
              "line": 28,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P16 (**) Drop every N'th element from a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P16-edpratomo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "qkXpmuu0Sz6I8JtU2YnqN",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P16 (**) Drop every N'th element from a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P16 (**) Drop every N'th element from a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 74,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 74,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "o525MMVYiuD8kxz4yBdww"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Edwin Pratomo\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Edwin Pratomo\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 75,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 97,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 75,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 97,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Ll6G6euwnWJ9PcY7j5Axk"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 98,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 119,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 98,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 119,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P16 (**) Drop every N'th element from a list.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P16 (**) Drop every N'th element from a list.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 120,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 170,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 171,
                      "line": 13,
                      "column": 1
                    },
                    "end": {
                      "offset": 186,
                      "line": 14,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 171,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 186,
                  "line": 14,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say ~drop(<a b c d e f g h i k>, 3);\na b d e g h k\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say ~drop(<a b c d e f g h i k>, 3);\n    a b d e g h k\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 187,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 248,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 258,
              "line": 19,
              "column": 1
            }
          },
          "id": "Re5tat4EI-cTX5ZOKbcvE"
        },
        {
          "text": "\nsub drop(@ary, $n) {\n  gather for 1 .. @ary.elems -> $i { take @ary[$i - 1] if $i % $n }\n}\n\ndrop(<A B C D E F G H I K>, 3).list.perl.say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 258,
              "line": 19,
              "column": 1
            },
            "end": {
              "offset": 437,
              "line": 27,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P16 - Drop every nth element from a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P16-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "YzMyrW5fCA8iM7dTmWYe8",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P16 - Drop every C<n>th element from a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P16 - Drop every "
                    },
                    {
                      "content": [
                        {
                          "type": "text",
                          "value": "n"
                        }
                      ],
                      "type": "fcode",
                      "name": "C"
                    },
                    {
                      "type": "text",
                      "value": "th element from a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 73,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 73,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "t06v2Qm4DLqHNW37LLcTw"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 74,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 96,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 74,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 96,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "xSD1MZ6L-VgbaWGS7Fcvn"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 97,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 112,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 97,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 112,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say drop-nth(<a b c d e f g h i j k l m n>.list, 3);\na b d e g h j k m n\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say drop-nth(<a b c d e f g h i j k l m n>.list, 3);\n    a b d e g h j k m n\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 113,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 196,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 206,
              "line": 15,
              "column": 1
            }
          },
          "id": "r_8ti3xvTo2mK02i007Mi"
        },
        {
          "text": "\nsub drop-nth(@list, $n)\n{\n    my $count = 1;\n\n    gather for @list -> $e\n    {\n        take $e if not $count++ %% $n;\n    }\n}\n\nsay \"{drop-nth(<a b c d e f g h i j k l m n>.list, 3)}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 206,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 431,
              "line": 29,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P17 - Split a list into two parts; the length of the first part is given.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P17-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "gMrOaP8fISkXPvOvZY4t2",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P17 - Split a list into two parts; the length of the first part is given.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P17 - Split a list into two parts; the length of the first part is given.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 102,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 102,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "gG0zF7quBH-UQfdHLVYy3"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 103,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 125,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 103,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 125,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "2MAPONTv-Vzj0lusmf4hi"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 126,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 141,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 126,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 141,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say split-list(('a' xx 10).list, 8).perl;\n([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\"]).list\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say split-list(('a' xx 10).list, 8).perl;\n    ([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\"]).list\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 142,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 254,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 264,
              "line": 15,
              "column": 1
            }
          },
          "id": "9KhbpEhFh_h17-BB2kCIE"
        },
        {
          "text": "\nsub split-list(@list, $length) {\n    my $i = 0;\n\n    gather while $i <= $length {\n        take [ gather while $i <= $length {\n            $i++ and take @list.shift;\n        } ];\n\n        take [ @list ];\n    }\n}\n\nsay split-list(['a' xx 20], 8).list.perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 264,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 559,
              "line": 31,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P17 - Split a list into two parts; the length of the first part is given.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P17-unobe.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "tvUBGlUigc15BBIX3K4AO",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P17 - Split a list into two parts; the length of the first part is given.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P17 - Split a list into two parts; the length of the first part is given.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 102,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 102,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "LHuwEBvxKdyYkmjnEKaB7"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Romano\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Romano\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 103,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 124,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 103,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 124,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "1YkhKVJrlku8I7rVmdB1T"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 125,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 146,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 125,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 146,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P17 (*) Split a list into two parts; the length of the first part is given.\n  Do not use any predefined predicates.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P17 (*) Split a list into two parts; the length of the first part is given.\n      Do not use any predefined predicates.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 147,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 271,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 272,
                      "line": 14,
                      "column": 1
                    },
                    "end": {
                      "offset": 287,
                      "line": 15,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 272,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 287,
                  "line": 15,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say bisect(<a b c d e f g h i k>, 3).perl\n([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"k\"])\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say bisect(<a b c d e f g h i k>, 3).perl\n    ([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"k\"])\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 288,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 395,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 405,
              "line": 20,
              "column": 1
            }
          },
          "id": "DJGnDXW2xkji0M1iCVeFy"
        },
        {
          "text": "\nmy @l = <a b c d e f g h i k>;\nsub prob17(@in, $n) {\n    if @in.end < $n { return @in }\n    else {\n        my $beg = [gather { for 0...$n-1 { take @in[$_] } }];\n        my $end = [gather { for $n...@in.end  { take @in[$_] } }];\n        return ($beg, $end);\n    }\n}\nsay @l.perl;\nsay prob17(@l, 3).perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 405,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 748,
              "line": 34,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P18 - Extract a slice from a list. Indices start at 1.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P18-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "3r5p9p-iGuxgu41KoS2a1",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P18 - Extract a slice from a list. Indices start at 1.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P18 - Extract a slice from a list. Indices start at 1.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 83,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 83,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "Lk1hzsgNKDBsG0JrRui8J"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 84,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 106,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 84,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 106,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "yuWPGemCKXhCYePcKAgmV"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 107,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 122,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 107,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 122,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say get-slice(<a b c d e>, 2, 4);\nb c d\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say get-slice(<a b c d e>, 2, 4);\n    b c d\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 123,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 173,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 183,
              "line": 15,
              "column": 1
            }
          },
          "id": "Isdu3e3mLMTeaudnFi8_4"
        },
        {
          "text": "\nsub get-slice(@list, $start, $end)\n{\n    @list[$start - 1 ... $end - 1];\n}\n\nsay \"{get-slice(<a b c d e>, 2, 4)}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 183,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 338,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P19 - Rotate a list n places to the left.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P19-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "fvpiJuPuriVxaoa7vRlb6",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P19 - Rotate a list C<n> places to the left.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P19 - Rotate a list "
                    },
                    {
                      "content": [
                        {
                          "type": "text",
                          "value": "n"
                        }
                      ],
                      "type": "fcode",
                      "name": "C"
                    },
                    {
                      "type": "text",
                      "value": " places to the left.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 73,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 73,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "DxYctT5OBYK7SH4et_rfW"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 74,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 96,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 74,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 96,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "e5Vf8-B10O_xqCKfmR-0L"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 97,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 112,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 97,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 112,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say rotate(<a b c d e f g>.list, 3).perl;\nArray.new(\"d\", \"e\", \"f\", \"g\", \"a\", \"b\", \"c\")\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say rotate(<a b c d e f g>.list, 3).perl;\n    Array.new(\"d\", \"e\", \"f\", \"g\", \"a\", \"b\", \"c\")\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 113,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 210,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 220,
              "line": 15,
              "column": 1
            }
          },
          "id": "jdFG5ankEkavDkFs8hYzV"
        },
        {
          "text": "\nsub rotate(@list is copy, $places is copy)\n{\n    $places = @list.elems + $places if $places < 0;\n\n    for ^$places {\n        @list.push: @list.shift;\n    }\n\n    @list\n}\n\nsay rotate(<a b c d e f g>.list, 3).perl;\nsay rotate(<a b c d e f g>.list, -3).perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 220,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 516,
              "line": 31,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P20 - Remove the K'th element from a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P20-rhebus.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "156jegSGYNasw5Q5qsRoh",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P20 - Remove the K'th element from a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P20 - Remove the K'th element from a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "FjHei4xkQcvFKSIB5F1N0"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Philip Potter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Philip Potter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 72,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 94,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 72,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 94,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "aWd-6ZF6oT7_EhANA0fxL"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 95,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 116,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 95,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 116,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P20 (*) Remove the K'th element from a list.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P20 (*) Remove the K'th element from a list.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 117,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 166,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "You may choose to mutate the array in-place or create a new sequence and\nreturn it.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "You may choose to mutate the array in-place or create a new sequence and\n    return it.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 167,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 259,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Examples\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Examples\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 260,
                      "line": 16,
                      "column": 1
                    },
                    "end": {
                      "offset": 276,
                      "line": 17,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 260,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 276,
                  "line": 17,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Examples"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Example 1 (mutating in-place):\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Example 1 (mutating in-place):\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 277,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 308,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "> my @l = <a b c d>;\n> remove-at(@l,2);\n> say ~@l;\na c d\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> my @l = <a b c d>;\n    > remove-at(@l,2);\n    > say ~@l;\n    a c d\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 309,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 382,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Example 2 (returning a copy):\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Example 2 (returning a copy):\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 383,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 413,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say ~remove-at-copy(<a b c d>, 2);\na c d\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say ~remove-at-copy(<a b c d>, 2);\n    a c d\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 414,
                  "line": 27,
                  "column": 1
                },
                "end": {
                  "offset": 465,
                  "line": 29,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 475,
              "line": 31,
              "column": 1
            }
          },
          "id": "7vg-ptw4OPpShHoivwrdG"
        },
        {
          "text": "\n# a. Simple version, in place\n#       @array  - your \"@array\" must always use \"@\" - even for a single element\n#       .splice - Your array is also an object, you can call the method .splice\n#               - offset - where to remove (starting 0)\n#               - length - how many to remove\n#               - What to add in its place (nothing in this case, see P21-scottp.pl\n#                                           for an example of adding)\nmy @array = <a b c d>;\n@array.splice(1, 1);\nsay ~@array;\n\n# b. Using a sub in-place\n#       @arr is declared with \"is rw\", so if you splice on the actual array, not a\n#       copy of it, you will mutate the caller's copy.\nsub remove-at (@arr, Int $pos) {\n    @arr.splice($pos - 1, 1);\n    return;\n}\n\nmy @array2 = <a b c d>;\n\nremove-at(@array2, 2);\nsay ~@array2;\n\n# Alternatively, call using pseudomethod syntax:\n\n@array2.&remove-at(2);\nsay ~@array2;\n\n# c. Using a sub, returning a copy\n#    This time we must copy the sequence and mutate that\n#     -- easy-peasy with the \"is copy\" declaration\nsub remove-at-copy(@list is copy, $pos) {\n    @list.splice($pos-1, 1);\n    return @list;\n}\n\nsay ~remove-at-copy(<a b c d>, 2);\n\n# and again pseudomethod syntax\nsay ~<a b c d>.&remove-at-copy(2);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 475,
              "line": 31,
              "column": 1
            },
            "end": {
              "offset": 1751,
              "line": 75,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P20 - Remove the kth element of a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P20-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "ZvNkKT1TfHHBgr-_DaxJP",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P20 - Remove the C<k>th element of a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P20 - Remove the "
                    },
                    {
                      "content": [
                        {
                          "type": "text",
                          "value": "k"
                        }
                      ],
                      "type": "fcode",
                      "name": "C"
                    },
                    {
                      "type": "text",
                      "value": "th element of a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "sgChIDJYaZ9UvM-vhjifC"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 72,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 94,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 72,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 94,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "UDR5kW1EHg9AUZKyayo5J"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 95,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 110,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 95,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 110,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say remove-at(<a b c d e>, 4);\na b c e\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say remove-at(<a b c d e>, 4);\n    a b c e\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 111,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 160,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 170,
              "line": 15,
              "column": 1
            }
          },
          "id": "oJhqC01ij6foJsAtIyz53"
        },
        {
          "text": "\nsub remove-at(@list is copy, $place)\n{\n    @list.splice($place - 1, 1);\n\n    @list\n}\n\nsay \"{remove-at(<a b c d e>, 4)}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 170,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 332,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P21 - Insert an element at a given position into an array.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P21-scottp.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "TQ5p1SQWC2QyfoNHHQT4N",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P21 - Insert an element at a given position into an array.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P21 - Insert an element at a given position into an array.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 87,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 87,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "AVlRjlpJMVhS6sHi19jRs"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 88,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 110,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 88,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 110,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "qk0iVVfCvVO95O0j44j7Q"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 111,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 132,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 111,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 132,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P21 (*) Insert an element at a given position into an array.\n        You may choose to mutate the array in-place or to create a new\n        sequence and return it.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P21 (*) Insert an element at a given position into an array.\n            You may choose to mutate the array in-place or to create a new\n            sequence and return it.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 133,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 309,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Examples\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Examples\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 310,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 326,
                      "line": 16,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 310,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 326,
                  "line": 16,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Examples"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Example 1 (mutating in-place);\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Example 1 (mutating in-place);\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 327,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 358,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "> my @l = <a b c d>\n> insert_at('alfa',@l,2);\n> say ~@l;\na alfa b c d\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> my @l = <a b c d>\n    > insert_at('alfa',@l,2);\n    > say ~@l;\n    a alfa b c d\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 359,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 445,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Example 2 (creating a copy):\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Example 2 (creating a copy):\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 446,
                  "line": 24,
                  "column": 1
                },
                "end": {
                  "offset": 475,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say ~insert_at_copy('alfa', <a b c d>, 2);\na alfa b c d\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say ~insert_at_copy('alfa', <a b c d>, 2);\n    a alfa b c d\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 476,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 542,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 552,
              "line": 30,
              "column": 1
            }
          },
          "id": "G-hVh2wMD4m2crfxN1E6u"
        },
        {
          "text": "\n# a. Simple version, in place\n#       @array  - your \"@array\" must always use \"@\" - even for a single element\n#       .splice - Your array is also an object, you can call the method .splice\n#               - offset - where to add (starting 0)\n#               - length - how many to replace (0 for insert)\n#               - What to add\nmy @array = <a b c d>;\n@array.splice(1, 0, 'alfa');\nsay ~@array;\n\n# b. Using a sub in-place\n#       $in, @arr, $pos - you can insert an array in the middle of your parameters\n#       The array is like a reference, so if you splice on the actual array, not a\n#       copy of it, you will mutate the caller's copy.\n#   However if you modify the argument, you must declare it with \"is rw\" or\n#   the compiler may complain at you.\nsub insert_at ($in, @arr, $pos) {\n    @arr.splice($pos - 1, 0, $in);\n    return;\n}\n\nmy @array2 = <a b c d>;\n\ninsert_at('alfa', @array2, 2);\nsay ~@array2;\n\n# c. Using a sub, returning a copy\n#    This time we must copy the sequence and mutate that\nsub insert_at_copy($in, @list is copy, $pos) {\n    @list.splice($pos-1, 0, $in);\n    return @list;\n}\n\nsay ~insert_at_copy('alfa', <a b c d>, 2);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 552,
              "line": 30,
              "column": 1
            },
            "end": {
              "offset": 1747,
              "line": 67,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P21 - Insert an element at a given position into a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P21-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "7eKxstBEgDW48r9BxyrK5",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P21 - Insert an element at a given position into a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P21 - Insert an element at a given position into a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "5aHE8eV5taRIPyIZS6cir"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 86,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 108,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 86,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 108,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "fU5fPCWWybH-xHkJx0Hv5"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 109,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 124,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 109,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 124,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say insert-at('alfa', <a b c d>, 2);\na alfa b c d\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say insert-at('alfa', <a b c d>, 2);\n    a alfa b c d\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 125,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 185,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 195,
              "line": 15,
              "column": 1
            }
          },
          "id": "BCa-b5jOOKzSbtYDO3fqf"
        },
        {
          "text": "\nsub insert-at($elem, @list is copy, $place)\n{\n    @list.splice($place - 1, 0, $elem);\n\n    @list\n}\n\nsay \"{insert-at('alfa', <a b c d>, 2)}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 195,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 377,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P22 - Create a list containing all integers within a given range.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P22-scottp.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "9DNelz8OFTv_b-VM2oVCD",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P22 - Create a list containing all integers within a given range.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P22 - Create a list containing all integers within a given range.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 94,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 94,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "LuCez27-bXMrPKFrGz0PT"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 95,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 117,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 95,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 117,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "1q-RkqJprGA-UQQxo2LPK"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 118,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 139,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 118,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 139,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P22 (*) Create a list containing all integers within a given range.\n        If first argument is smaller than second, produce a list in\n        decreasing order.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P22 (*) Create a list containing all integers within a given range.\n           If first argument is smaller than second, produce a list in\n           decreasing order.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 140,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 311,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Examples\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Examples\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 312,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 328,
                      "line": 16,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 312,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 328,
                  "line": 16,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Examples"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say ~range(4, 9);\n4 5 6 7 8 9\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say ~range(4, 9);\n    4 5 6 7 8 9\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 329,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 369,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 379,
              "line": 21,
              "column": 1
            }
          },
          "id": "5My17DNuAKTnaUgQctQUC"
        },
        {
          "text": "\n# a. Simple version - but only works in order\nsay ~list(4 .. 9);\n\n# b. Try reverse\n#       Simple check on arguments\n#       Then just reverse the forward version of the list\nsub range($a, $b) {\n    if ($a > $b) {\n        return list($b .. $a).reverse;\n    }\n    return list($a .. $b);\n}\nsay ~range(4, 9);\nsay ~range(7, 2);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 379,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 744,
              "line": 38,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P22 - Create a list containing all integers within a given range.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P22-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "FH2ke_ukaW2KDA8hVJXH-",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P22 - Create a list containing all integers within a given range.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P22 - Create a list containing all integers within a given range.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 94,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 94,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "G_UBZq4aezWCh0UCOKTpu"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 95,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 117,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 95,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 117,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "uj1vkdC_dve8Zl8bsNyXJ"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 118,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 133,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 118,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 133,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say range(5, 12)\n5 6 7 8 9 10 11 12\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say range(5, 12)\n    5 6 7 8 9 10 11 12\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 134,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 180,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 191,
              "line": 16,
              "column": 1
            }
          },
          "id": "dHrqQv4udPc1u0cMbDESa"
        },
        {
          "text": "\nsub range($lower, $upper)\n{\n    ($lower ... $upper).list;\n}\n\nsay range(5, 20).perl;\nsay range(20, 5).perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 191,
              "line": 16,
              "column": 1
            },
            "end": {
              "offset": 339,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P23 - Extract a given number of randomly selected elements from a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P23-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "IZo579PxfpULz-WztAl-H",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P23 - Extract a given number of randomly selected elements from a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P23 - Extract a given number of randomly selected elements from a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 100,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 100,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "KGBtglsxr-XluIsjUgAsw"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 101,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 123,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 101,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 123,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "ttMK1Kc8sUL7otskKnp6c"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 124,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 139,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 124,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 139,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say get-rand-elems(<a b c d e>, 3);\nc b a\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say get-rand-elems(<a b c d e>, 3);\n    c b a\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 140,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 192,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 202,
              "line": 15,
              "column": 1
            }
          },
          "id": "8ztNKqvNyg62RSEUUmaUs"
        },
        {
          "text": "\nsub get-rand-elems(@list, $amount) {\n    @list.pick($amount);\n}\n\nsay \"{get-rand-elems(<a b c d e>, 3)}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 202,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 348,
              "line": 23,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P24 - Draw N different random numbers from the set 1..M.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P24-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "pictuy9qTF8zMgV5DBtde",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P24 - Draw C<N> different random numbers from the set C<1..M>.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P24 - Draw "
                    },
                    {
                      "content": [
                        {
                          "type": "text",
                          "value": "N"
                        }
                      ],
                      "type": "fcode",
                      "name": "C"
                    },
                    {
                      "type": "text",
                      "value": " different random numbers from the set "
                    },
                    {
                      "content": [
                        {
                          "type": "text",
                          "value": "1..M"
                        }
                      ],
                      "type": "fcode",
                      "name": "C"
                    },
                    {
                      "type": "text",
                      "value": ".\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 91,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 91,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "bMxygU7PD4e4hYaPljWcE"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 92,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 114,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 92,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 114,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "6EtEY2kBV8gCkRqFDhAty"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 115,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 130,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 115,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 130,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say lotto-select(6, 49);\n37 8 32 15 21 46\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say lotto-select(6, 49);\n    37 8 32 15 21 46\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 131,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 183,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 193,
              "line": 15,
              "column": 1
            }
          },
          "id": "zpREYAz0kAXPArnmQWnVb"
        },
        {
          "text": "\nsub lotto-select($n, $m)\n{\n    gather for ^$n\n    {\n        take (1 ... $m).pick(1).first;\n    }\n}\n\nsay \"{lotto-select(6, 49)}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 193,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 363,
              "line": 27,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P25 - Generate a random permutation of the elements of a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P25-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "ogJ2aKvaxMkDVn5LCag_B",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P25 - Generate a random permutation of the elements of a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P25 - Generate a random permutation of the elements of a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 91,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 91,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "z-I7xx6MUqUyaXwL6TC8k"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 92,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 114,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 92,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 114,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "9BZk8otJER0vpPmjqPH4g"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 115,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 130,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 115,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 130,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say permute(<a b c d e>);\na e d c b\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say permute(<a b c d e>);\n    a e d c b\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 131,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 177,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 187,
              "line": 15,
              "column": 1
            }
          },
          "id": "Muv7xGQdqsETfFdj1pjPf"
        },
        {
          "text": "\nsub permute(@list)\n{\n    @list.pick(*);\n}\n\nsay permute(<a b c d e>);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 187,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 297,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P26 - Generate the combinations of k distinct objects chosen from the n elements of a list.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P26-topo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "kfIeSN4OWdwMuv0cGDZpk",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P26 - Generate the combinations of C<k> distinct objects chosen from the C<n> elements of a list.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P26 - Generate the combinations of "
                    },
                    {
                      "content": [
                        {
                          "type": "text",
                          "value": "k"
                        }
                      ],
                      "type": "fcode",
                      "name": "C"
                    },
                    {
                      "type": "text",
                      "value": " distinct objects chosen from the "
                    },
                    {
                      "content": [
                        {
                          "type": "text",
                          "value": "n"
                        }
                      ],
                      "type": "fcode",
                      "name": "C"
                    },
                    {
                      "type": "text",
                      "value": " elements of a list.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 126,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 126,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "MjyvuoLGV3jvFfHkXsJcC"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ryan Connelly\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ryan Connelly\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 127,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 149,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 127,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 149,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "z5cwbw9RHBLeETYOxrrqu"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 150,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 165,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 150,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 165,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say c(2, <a b c d e>);\n((a b) (a c) (a d) (a e) (b c) (b d) (b e) (c d) (c e) (d e))\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say c(2, <a b c d e>);\n    ((a b) (a c) (a d) (a e) (b c) (b d) (b e) (c d) (c e) (d e))\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 166,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 261,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 271,
              "line": 15,
              "column": 1
            }
          },
          "id": "tn9cplxDsc1SUHkjxL7gF"
        },
        {
          "text": "\nmulti sub c(0,      @xs)          { return ((),) }\nmulti sub c(Int $n, [])           { return ()    }\nmulti sub c(Int $n, [ $x, *@xs ]) {\n    |map({($x, |@$_)}, c($n - 1, @xs)), |c($n, @xs);\n}\n\nmy @combos = c(3, <a b c d e f g h i j k l>);\nsay @combos.elems;\nsay @combos[200..*];\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 271,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 592,
              "line": 27,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P31 - Determine whether a given integer number is prime.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P31-rhebus.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Mjl0j8E4AGHC4sARqBj7f",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P31 - Determine whether a given integer number is prime.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P31 - Determine whether a given integer number is prime.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "AiBv5c9mrXwyKdXurjKbF"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Philip Potter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Philip Potter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 86,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 108,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 86,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 108,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "zDNqhl1nuzweJZQtKeSjc"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 109,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 130,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 109,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 130,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P31 (**) Determine whether a given integer number is prime.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P31 (**) Determine whether a given integer number is prime.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 131,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 195,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 196,
                      "line": 13,
                      "column": 1
                    },
                    "end": {
                      "offset": 211,
                      "line": 14,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 196,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 211,
                  "line": 14,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say is_prime 7\n1\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say is_prime 7\n    1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 212,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 239,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 249,
              "line": 19,
              "column": 1
            }
          },
          "id": "oxSGbZ-MkKQG92ZOJII6m"
        },
        {
          "text": "\nsub is_prime (Int $n) {\n    for 2..sqrt $n -> $k {\n        return Bool::False if $n %% $k;\n    }\n    return Bool::True;\n}\n\nsay \"Is $_ prime? \", is_prime($_) ?? 'yes' !! 'no'\n    for (|(2 .. 10), 49,137,219,1723);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 249,
              "line": 19,
              "column": 1
            },
            "end": {
              "offset": 503,
              "line": 31,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P32 - Determine the greatest common divisor of two positive integer\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P32-rhebus.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "2qPqmdJ_vYPwadwOh2om2",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P32 - Determine the greatest common divisor of two positive integer\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P32 - Determine the greatest common divisor of two positive integer\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 96,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 96,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "4NQOhSWkh_qRhooNn4eyl"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Philip Potter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Philip Potter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 97,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 119,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 97,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 119,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "7uH07GhwBZZu44PloyvhR"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 120,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 141,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 120,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 141,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P32 (**) Determine the greatest common divisor of two positive integer\n    numbers.  Use Euclid's algorithm.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P32 (**) Determine the greatest common divisor of two positive integer\n       numbers.  Use Euclid's algorithm.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 142,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 257,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 258,
                      "line": 14,
                      "column": 1
                    },
                    "end": {
                      "offset": 273,
                      "line": 15,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 258,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 273,
                  "line": 15,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say gcd(36,63);\n9\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say gcd(36,63);\n    9\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 274,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 302,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 312,
              "line": 20,
              "column": 1
            }
          },
          "id": "GPnFfrQpl2Kc-5DkF-M3d"
        },
        {
          "text": "\n# Example 1: iterative\n#   we specify type constraints on our input parameters\nsub gcdi (Int $a is copy, Int $b is copy) {\n    while $a % $b {\n        ($a,$b) = ($b, $a % $b);\n    }\n    return $b;\n}\n\ngcdi(36,63).say;\n\n# Example 2: recursive\n#   This can take advantage of a tail-call optimization, if the compiler\n#   supports it\n#   $a %% $b is true iff $b divides $a evenly. It is equivalent to:\n#   !($a % $b)\nsub gcdr (Int $a, Int $b) {\n    return $b if $a %% $b;\n    return gcdr($b, $a % $b);\n}\n\ngcdr(36,63).say;\ngcdr(63,36).say;\n\n# Example 3: series operator\n#   The series operator generates series lazily. It takes some start terms, a\n#   generation rule, and possibly a limit, and produces a series.\n#   To create the Fibonacci series, we write:\n#       (1, 1, *+* ... *)\n#   The generation rule is to sum the previous two terms: *+*.\n#   A limit of * continues the series forever.\n#\n#   We exploit this to generate the series of intermediate values in Euclid's\n#   algorithm: each step in the series is the mod of the last two terms. When\n#   we reach 0, the term before that was the gcd.\nsub gcds (Int $a, Int $b) {\n    return ($a, $b, *%* ... 0)[*-2];\n}\n\ngcds(8,12).say;\ngcds(36,63).say;\ngcds(63,36).say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 312,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 1570,
              "line": 65,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P33 - Determine whether two positive integer numbers are coprime.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P33-rhebus.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Zv7yHkihtDUV74vMWOFZP",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P33 - Determine whether two positive integer numbers are coprime.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P33 - Determine whether two positive integer numbers are coprime.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 94,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 94,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "RdYLmD3DoYur-Zboqwrtp"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Philip Potter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Philip Potter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 95,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 117,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 95,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 117,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "z3C9dWVXFM9N6VMg5un1e"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 118,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 139,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 118,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 139,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P33 (*) Determine whether two positive integer numbers are coprime.\n  Two numbers are coprime if their greatest common divisor equals 1.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P33 (*) Determine whether two positive integer numbers are coprime.\n      Two numbers are coprime if their greatest common divisor equals 1.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 140,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 285,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 286,
                      "line": 14,
                      "column": 1
                    },
                    "end": {
                      "offset": 301,
                      "line": 15,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 286,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 301,
                  "line": 15,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say coprime(35,64)\n1\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say coprime(35,64)\n    1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 302,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 333,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 343,
              "line": 20,
              "column": 1
            }
          },
          "id": "wLOVR3TSFvZ2ZrErC61SR"
        },
        {
          "text": "\n# This is from P32-rhebus.pl\nsub gcds (Int $a, Int $b) {\n    return ($a, $b, *%* ... 0)[*-2];\n}\n\nsub coprime (Int $a, Int $b) { gcds($a,$b) == 1 }\n\nsay coprime(35,64);\n\n# Another option is to make coprime an operator:\n# (theoretically 'our' is unnecessary but rakudo needs it\nour sub infix:<coprime> (Int $a, Int $b) { gcds($a,$b) == 1 }\n\n# All adjacent fibonacci pairs are coprime.\n# We can test a number of fibonacci pairs at once\n# with the hyper operator »coprime«\n\nmy @fib = (1,2,3,5,8,13,21,34,55);\nsay $_ for @fib[0..^+@fib-1] »coprime« @fib[1..^+@fib];\n\n# And here's another famous series:\nmy @pow = (1,2,4,{$_*2} ... 4096);\nsay $_ for @pow[0..^+@pow-1] »coprime« @pow[1..^+@pow];\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 343,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 1073,
              "line": 46,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P34 - Calculate Euler's totient function phi(m).\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P34-rhebus.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "DJ2HMBOfh3WwlZCNa9taf",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P34 - Calculate Euler's totient function phi(m).\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P34 - Calculate Euler's totient function phi(m).\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 77,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 77,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "IuSVvwjbMCcgNLgI6xnK0"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Philip Potter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Philip Potter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 78,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 100,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 78,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 100,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "p4KZBaNK6WkTxY4NIqana"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find out what the value of phi(m) is if m is a prime number. Euler's totient\nfunction plays an important role in one of the most widely used public key\ncryptography methods (RSA). In this exercise you should use the most\nprimitive method to calculate this function (there are smarter ways that we\nshall discuss later).\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find out what the value of phi(m) is if m is a prime number. Euler's totient\nfunction plays an important role in one of the most widely used public key\ncryptography methods (RSA). In this exercise you should use the most\nprimitive method to calculate this function (there are smarter ways that we\nshall discuss later).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 101,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 420,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 421,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 442,
                      "line": 16,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 421,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 442,
                  "line": 16,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P34 (**) Calculate Euler's totient function phi(m).\n      Euler's so-called totient function phi(m) is defined as the number of\n      positive integers r (1 <= r < m) that are coprime to m.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P34 (**) Calculate Euler's totient function phi(m).\n          Euler's so-called totient function phi(m) is defined as the number of\n          positive integers r (1 <= r < m) that are coprime to m.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 443,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 645,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 646,
                      "line": 21,
                      "column": 1
                    },
                    "end": {
                      "offset": 661,
                      "line": 22,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 646,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 661,
                  "line": 22,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "# m = 10: r = 1,3,7,9; thus phi(m) = 4. Note the special case: phi(1) = 1.\n> say totient_phi 10\n4\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# m = 10: r = 1,3,7,9; thus phi(m) = 4. Note the special case: phi(1) = 1.\n    > say totient_phi 10\n    4\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 662,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 772,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 782,
              "line": 28,
              "column": 1
            }
          },
          "id": "MHdmUfbGno4IJa6CJaiv7"
        },
        {
          "text": "\n# from P32-rhebus.pl\nsub gcds (Int $a, Int $b) {\n    return ($a, $b, *%* ... 0)[*-2];\n}\n\n# from P33-rhebus.pl\nour sub infix:<coprime> (Int $a, Int $b) { (gcds($a,$b) == 1).Numeric }\n\n\n# Example 1: iteration\nmulti totient_phi_i (1      --> Int) { 1 }\nmulti totient_phi_i (Int $n --> Int) {\n    my $total = 0;\n    for 1..^$n -> $k { $total++ if $n coprime $k }\n    return $total;\n}\n\nsay \"phi($_): \", totient_phi_i $_ for (1..20);\n\n# Example 2: «coprime« hyper operator\nmulti totient_phi (1      --> Int) { 1 }\nmulti totient_phi (Int $n --> Int) {\n    return 1 if $n ~~ 1;\n    return [+] ($n «coprime« list(1..^$n));\n}\n\nsay \"phi($_): \",totient_phi $_ for (1..20);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 782,
              "line": 28,
              "column": 1
            },
            "end": {
              "offset": 1484,
              "line": 58,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P35 - Determine the prime factors of a given positive integer.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P35-rhebus.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "wTvGphTKfcJKzU8_RSnfX",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P35 - Determine the prime factors of a given positive integer.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P35 - Determine the prime factors of a given positive integer.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 91,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 91,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "yBHp7hBUOPp--5KQZr-yN"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Philip Potter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Philip Potter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 92,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 114,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 92,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 114,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "hfI-fLBdthIpPc0Jl0bS9"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 115,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 136,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 115,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 136,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P35 (**) Determine the prime factors of a given positive integer.\n  Construct a flat list containing the prime factors in ascending order.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P35 (**) Determine the prime factors of a given positive integer.\n      Construct a flat list containing the prime factors in ascending order.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 137,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 284,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 285,
                      "line": 14,
                      "column": 1
                    },
                    "end": {
                      "offset": 300,
                      "line": 15,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 285,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 300,
                  "line": 15,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say ~prime_factors 315\n3 3 5 7\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say ~prime_factors 315\n    3 3 5 7\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 301,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 342,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 352,
              "line": 20,
              "column": 1
            }
          },
          "id": "7FbriiKih3aWm9ZRd3WRO"
        },
        {
          "text": "\nsub prime_factors (Int $n) {\n    my $residue = $n;\n    my @values = (2,3,*+2 ... * > $n);\n    gather for @values -> $k {\n        while $residue %% $k {\n            # try 'take 0+$k' to work around a known rakudo issue (2010-09-05)\n            take $k;\n            $residue /= $k;\n        }\n        last if $residue == 1;\n        # This if block is an optimisation which reduces number of iterations\n        # for numbers with large prime factors (such as large primes)\n        # It can be removed without affecting correctness.\n        if $k > sqrt $residue {\n            take $residue;\n            last;\n        }\n    }\n}\n\nsay ~prime_factors($_) for 2..20;\nsay ~prime_factors(315);\nsay ~prime_factors(1723);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 352,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 1102,
              "line": 46,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P36 - Determine the prime factors of a given positive integer (2).\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P36-ovid.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "nRPwb5R2Vg4SdRb8uwcsJ",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P36 - Determine the prime factors of a given positive integer (2).\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P36 - Determine the prime factors of a given positive integer (2).\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 95,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 95,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "uAtSAFvS6u0fRK3b1oj1H"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Curtis Poe\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Curtis Poe\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 96,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 115,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 96,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 115,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "fpbfYTjv7BjaowazQLHOQ"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Hint: The problem is similar to problem P13.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Hint: The problem is similar to problem P13.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 116,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 161,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "This was originally a blog post:\nL<http://blogs.perl.org/users/ovid/2010/08/prime-factors-in-perl-6.html>.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "This was originally a blog post:\n"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://blogs.perl.org/users/ovid/2010/08/prime-factors-in-perl-6.html"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": ".\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 162,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 269,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 270,
                      "line": 14,
                      "column": 1
                    },
                    "end": {
                      "offset": 291,
                      "line": 15,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 270,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 291,
                  "line": 15,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P36 (**) Determine the prime factors of a given positive integer (2).\n    Construct a list containing the prime factors and their multiplicity.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P36 (**) Determine the prime factors of a given positive integer (2).\n       Construct a list containing the prime factors and their multiplicity.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 292,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 442,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 443,
                      "line": 19,
                      "column": 1
                    },
                    "end": {
                      "offset": 458,
                      "line": 20,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 443,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 458,
                  "line": 20,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> prime_factors_mult(315).perl.say\n(3 => 2, 5 => 1, 7 => 1)\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> prime_factors_mult(315).perl.say\n    (3 => 2, 5 => 1, 7 => 1)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 459,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 527,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 537,
              "line": 25,
              "column": 1
            }
          },
          "id": "y5HCLWlC2yrskX2PGDlMi"
        },
        {
          "text": "\nconstant PRIMES = grep { .is-prime }, 2 .. *;\n\nsub prime-factors(Int $number-to-factor where * > 1 --> Hash) {\n    return { $number-to-factor => 1 } if $number-to-factor.is-prime;\n\n    my %factors;\n    my $number = $number-to-factor;\n    for PRIMES.cache -> $prime {\n        last if $prime ** 2 > $number;\n        while $number %% $prime {\n            %factors{$prime}++;\n            $number div= $prime;\n        }\n    }\n    %factors{$number}++ if $number != 1;  # we have a prime left over\n    return %factors;\n}\n\nfor 2, 17, 53, 90, 94, 200, 289, 62710561 -> $number {\n    say \"Prime factors of $number are: {prime-factors($number).perl}\";\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 537,
              "line": 25,
              "column": 1
            },
            "end": {
              "offset": 1221,
              "line": 49,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P36 - Determine the prime factors of a given positive integer (2).\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P36-rhebus.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "TvIpCoMJk5qADU-yoOyFg",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P36 - Determine the prime factors of a given positive integer (2).\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P36 - Determine the prime factors of a given positive integer (2).\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 95,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 95,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "kswr0wtkAz-nE2EJiYWP5"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Philip Potter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Philip Potter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 96,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 118,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 96,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 118,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "2TvMN3rndeo5nRR99u7xa"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Hint: The problem is similar to problem P13.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Hint: The problem is similar to problem P13.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 119,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 164,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 165,
                      "line": 11,
                      "column": 1
                    },
                    "end": {
                      "offset": 186,
                      "line": 12,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 165,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 186,
                  "line": 12,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P36 (**) Determine the prime factors of a given positive integer (2).\n    Construct a list containing the prime factors and their multiplicity.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P36 (**) Determine the prime factors of a given positive integer (2).\n        Construct a list containing the prime factors and their multiplicity.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 187,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 339,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 340,
                      "line": 16,
                      "column": 1
                    },
                    "end": {
                      "offset": 355,
                      "line": 17,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 340,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 355,
                  "line": 17,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> prime_factors_mult(315).perl.say\n(3 => 2, 5 => 1, 7 => 1)\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> prime_factors_mult(315).perl.say\n    (3 => 2, 5 => 1, 7 => 1)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 356,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 424,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 434,
              "line": 22,
              "column": 1
            }
          },
          "id": "s4AW9j6_eMutJnM4LshrN"
        },
        {
          "text": "\nsub prime_factors_mult (Int $n) {\n    my $residue = $n;\n    my @values = (2,3,*+2 ... * > $n);\n    gather for @values -> $k {\n        my $mult=0;\n        while $residue %% $k {\n            $mult++;\n            $residue div= $k;\n        }\n        take $k => $mult if $mult;\n        last if $residue == 1;\n        # This if block is an optimisation which reduces number of iterations\n        # for numbers with large prime factors (such as large primes)\n        # It can be removed without affecting correctness.\n        if $k > sqrt $residue {\n            take $residue => 1;\n            last;\n        }\n    }\n}\n\nsay prime_factors_mult($_).list.perl for 1..20;\nprime_factors_mult(315).list.perl.say;\nprime_factors_mult(1723).list.perl.say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 434,
              "line": 22,
              "column": 1
            },
            "end": {
              "offset": 1214,
              "line": 49,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P37 - Calculate Euler's totient function phi(m) (improved).\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P37-rhebus.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "_1p3LU6WQy_UFhWaIz1t3",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P37 - Calculate Euler's totient function phi(m) (improved).\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P37 - Calculate Euler's totient function phi(m) (improved).\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 88,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 88,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "CHKyI6UWiNBVwT_epOC4a"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Philip Potter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Philip Potter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 89,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 111,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 89,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 111,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "eDu0Avpj2h8OUU_4x3CvM"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 112,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 133,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 112,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 133,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P37 (**) Calculate Euler's totient function phi(m) (improved).\n    See problem P34 for the definition of Euler's totient function. If the\n    list of the prime factors of a number m is known in the form of\n    problem P36 then the function phi(m) can be efficiently calculated as\n    follows: Let ((p1 m1) (p2 m2) (p3 m3) ...) be the list of prime\n    factors (and their multiplicities) of a given number m. Then phi(m)\n    can be calculated with the following formula:\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P37 (**) Calculate Euler's totient function phi(m) (improved).\n       See problem P34 for the definition of Euler's totient function. If the\n       list of the prime factors of a number m is known in the form of\n       problem P36 then the function phi(m) can be efficiently calculated as\n       follows: Let ((p1 m1) (p2 m2) (p3 m3) ...) be the list of prime\n       factors (and their multiplicities) of a given number m. Then phi(m)\n       can be calculated with the following formula:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 134,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 625,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "phi(m) = (p1-1) * p1 ** (m1-1) * (p2-1) * p2 ** (m2-1)\n       * (p3-1) * p3 ** (m3-1) * ...\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "phi(m) = (p1-1) * p1 ** (m1-1) * (p2-1) * p2 ** (m2-1)\n          * (p3-1) * p3 ** (m3-1) * ...\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 626,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 724,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 725,
                      "line": 22,
                      "column": 1
                    },
                    "end": {
                      "offset": 740,
                      "line": 23,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 725,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 740,
                  "line": 23,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say \"phi2(315): \", totient(315);\nphi2(315): 144\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say \"phi2(315): \", totient(315);\n    phi2(315): 144\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 741,
                  "line": 24,
                  "column": 1
                },
                "end": {
                  "offset": 799,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 809,
              "line": 28,
              "column": 1
            }
          },
          "id": "XP_sYRD6ocUKC7Z7Mb-a1"
        },
        {
          "text": "\n# Straight from P36-rhebus.pl\nsub prime_factors_mult (Int $n) {\n    my $residue = $n;\n    my @values = (2,3,*+2 ... * > $n);\n    gather for @values -> $k {\n        my $mult=0;\n        while $residue %% $k {\n            $mult++;\n            $residue div= $k;\n        }\n        take $k => $mult if $mult;\n        last if $residue == 1;\n        if $k > sqrt $residue {\n            take $residue => 1;\n            last;\n        }\n    }\n}\n\n# 1. One-liner version\nsay \"phi($_): \", [*] prime_factors_mult($_).map({ (.key-1) * .key ** (.value-1) })\n    for 1..20;\n\nsay [*] prime_factors_mult(315).map: { (.key-1) * .key ** (.value-1) };\n\n# 2. sub version\n# note that when prime_factors_mult returns an empty list, [*] returns the\n# multiplicative identity 1. This means we don't need to special-case\n# totient(1) like in P34-rhebus.pl\nsub totient (Int $n) {\n    my @factors = prime_factors_mult($n);\n    return [*] @factors.map: {\n        (.key-1) * .key ** (.value-1)\n    }\n}\n\n# This hangs too! \\o/\n# say \"phi2($_): \",  totient($_) for 1..20;\nsay \"phi2(315): \", totient(315);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 809,
              "line": 28,
              "column": 1
            },
            "end": {
              "offset": 1919,
              "line": 70,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P39 - A list of prime numbers.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P39-rhebus.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "bh3ovR2hNGGovLUnFJpzc",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P39 - A list of prime numbers.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P39 - A list of prime numbers.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 59,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 59,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "DccpEOShifiNeBbsE56QY"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Curtis \"Ovid\" Poe\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Curtis \"Ovid\" Poe\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 60,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 86,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 60,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 86,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "nArGFcLTdtPFfHZ4RAJDC"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 87,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 108,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 87,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 108,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P39 (*) A list of prime numbers.\n  Given a range of integers by its lower and upper limit, construct a list\n  of all prime numbers in that range.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P39 (*) A list of prime numbers.\n      Given a range of integers by its lower and upper limit, construct a list\n      of all prime numbers in that range.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 109,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 267,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 268,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 283,
                      "line": 16,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 268,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 283,
                  "line": 16,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say ~ grep { .is-prime }, 10..19;\n11 13 17 19\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say ~ grep { .is-prime }, 10..19;\n    11 13 17 19\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 284,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 340,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 350,
              "line": 21,
              "column": 1
            }
          },
          "id": "4Gbn_NdjnShYoTJQ-9mVW"
        },
        {
          "text": "\n# we can call it with a range, as in the specification...\nsay ~ grep { .is-prime }, 10..20;\n\n# or we can pass a list...\nsay ~ grep { .is-prime }, 3,5,17,257,65537;\n# or another range\nsay ~ grep { .is-prime }, 1..100;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 350,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 608,
              "line": 31,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P40 - Goldbach's conjecture.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P40-rhebus.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "5u2ICJBeFWyQkRk_SjMKh",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P40 - Goldbach's conjecture.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P40 - Goldbach's conjecture.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 57,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 57,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "fQuEkkJGwrzmXDk9GjHZ1"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Philip Potter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Philip Potter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 58,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 80,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 58,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 80,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "5gwlgJdrkyt4dVpDoS_VX"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 81,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 102,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 81,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 102,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P40 (**) Goldbach's conjecture.\n    Goldbach's conjecture says that every positive even number greater\n    than 2 is the sum of two prime numbers. Example: 28 = 5 + 23. It is\n    one of the most famous facts in number theory that has not been proved\n    to be correct in the general case. It has been numerically confirmed\n    up to very large numbers (much larger than we can go with our Prolog\n    system). Write a predicate to find the two prime numbers that sum up\n    to a given even integer.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P40 (**) Goldbach's conjecture.\n       Goldbach's conjecture says that every positive even number greater\n       than 2 is the sum of two prime numbers. Example: 28 = 5 + 23. It is\n       one of the most famous facts in number theory that has not been proved\n       to be correct in the general case. It has been numerically confirmed\n       up to very large numbers (much larger than we can go with our Prolog\n       system). Write a predicate to find the two prime numbers that sum up\n       to a given even integer.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 103,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 625,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 626,
                      "line": 20,
                      "column": 1
                    },
                    "end": {
                      "offset": 641,
                      "line": 21,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 626,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 641,
                  "line": 21,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> say ~goldbach 28\n5 23\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> say ~goldbach 28\n    5 23\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 642,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 674,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 684,
              "line": 26,
              "column": 1
            }
          },
          "id": "Wdvt3IaMXv-Zrga7oedS2"
        },
        {
          "text": "\nsubset Even of Int where * %% 2;\n\nsub goldbach (Even $n where * > 2 ) {\n    for 2..$n/2 -> $k {\n        if $k.is-prime && ($n-$k).is-prime {\n            return ($k, $n-$k);\n        }\n    }\n    return; # fail\n}\n\nsay ~ goldbach $_ for 28, 36, 52, 110, 62710560;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 684,
              "line": 26,
              "column": 1
            },
            "end": {
              "offset": 985,
              "line": 41,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P41 - A list of Goldbach compositions.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P41-rhebus.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "SDi0fNyCdpldGTAZIYyKV",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P41 - A list of Goldbach compositions.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P41 - A list of Goldbach compositions.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 67,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 67,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "IJwBckSnefPnoqie23C3f"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Philip Potter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Philip Potter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 68,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 90,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 68,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 90,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "lBjEAFcgYEvTQHZPFa25G"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 91,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 112,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 91,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 112,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P41 (**) A list of Goldbach compositions.\n  Given a range of integers by its lower and upper limit, print a list of\n   all even numbers and their Goldbach composition.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P41 (**) A list of Goldbach compositions.\n      Given a range of integers by its lower and upper limit, print a list of\n       all even numbers and their Goldbach composition.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 113,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 293,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Examples\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Examples\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 294,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 310,
                      "line": 16,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 294,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 310,
                  "line": 16,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Examples"
            },
            {
              "type": "blankline"
            },
            {
              "text": "> goldbach-list 9,20\n10 = 3 + 7\n12 = 5 + 7\n14 = 3 + 11\n16 = 3 + 13\n18 = 5 + 13\n20 = 3 + 17\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> goldbach-list 9,20\n    10 = 3 + 7\n    12 = 5 + 7\n    14 = 3 + 11\n    16 = 3 + 13\n    18 = 5 + 13\n    20 = 3 + 17\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 311,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 430,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "In most cases, if an even number is written as the sum of two prime numbers,\none of them is very small. Very rarely, the primes are both bigger than say\n50. Try to find out how many such cases there are in the range 2..3000.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In most cases, if an even number is written as the sum of two prime numbers,\none of them is very small. Very rarely, the primes are both bigger than say\n50. Try to find out how many such cases there are in the range 2..3000.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 431,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 656,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Example (for a print limit of 50):\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Example (for a print limit of 50):\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 657,
                  "line": 29,
                  "column": 1
                },
                "end": {
                  "offset": 692,
                  "line": 30,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "> goldbach-list 1,2000,50\n992 = 73 + 919\n1382 = 61 + 1321\n1856 = 67 + 1789\n1928 = 61 + 1867\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "> goldbach-list 1,2000,50\n    992 = 73 + 919\n    1382 = 61 + 1321\n    1856 = 67 + 1789\n    1928 = 61 + 1867\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 693,
                  "line": 31,
                  "column": 1
                },
                "end": {
                  "offset": 805,
                  "line": 36,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 815,
              "line": 38,
              "column": 1
            }
          },
          "id": "hrafyTZZtxOdQWf6Vf8To"
        },
        {
          "text": "\n# From P31-rhebus.pl again\nsub is_prime (Int $n) {\n    for 2..sqrt $n -> $k {\n        return Bool::False if $n %% $k;\n    }\n    return Bool::True;\n}\n\n# require even arguments\nsub goldbach (Int $n where {$^a > 2 && $^a %% 2}) {\n    for 2..$n/2 -> $k {\n        if is_prime($k) && is_prime($n-$k) {\n            return ($k, $n-$k);\n        }\n    }\n    # actually, it's more likely a logic error than a refutation :)\n    die \"Goldbach's conjecture is false! $n cannot be separated into two primes!\"\n}\n\n# Here we demonstrate an optional parameter with a default value\nsub goldbach-list (Int $low, Int $high, Int $limit = 1) {\n    for $low .. $high -> $n {\n        next if $n % 2; # skip invalid goldbach numbers\n        next if $n == 2;\n        my @pair = goldbach($n);\n        say \"$n = \", @pair.join(' + ') if @pair[0] > $limit;\n    }\n}\n\ngoldbach-list 9,20;\ngoldbach-list 2,1000,10;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 815,
              "line": 38,
              "column": 1
            },
            "end": {
              "offset": 1735,
              "line": 72,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "P91 - Knight's tour.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/99-problems/P91-edpratomo.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "DXOpnTZWXhoFiKUodZZWA",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "P91 - Knight's tour.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "P91 - Knight's tour.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "sbXWt3aZ243R5NWtqaTPN"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Edwin Pratomo\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Edwin Pratomo\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 72,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 72,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "ZPFdfgzRyTmg4p6_z6QIe"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specification\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specification\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 73,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 94,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 73,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 94,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Specification"
            },
            {
              "type": "blankline"
            },
            {
              "text": "P91 (**) Knight's tour\n    Another famous problem is this one: How can a knight jump on an NxN\n    chessboard in such a way that it visits every square exactly once?\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "P91 (**) Knight's tour\n       Another famous problem is this one: How can a knight jump on an NxN\n       chessboard in such a way that it visits every square exactly once?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 95,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 270,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Hints: Represent the squares by pairs of their coordinates of the form\nX/Y, where both X and Y are integers between 1 and N. (Note that '/'\nis just a convenient functor, not division!) Define the relation\njump(N,X/Y,U/V) to express the fact that a knight can jump from X/Y to\nU/V on a NxN chessboard. And finally, represent the solution of our\nproblem as a list of N*N knight positions (the knight's tour).\n",
              "margin": "       ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Hints: Represent the squares by pairs of their coordinates of the form\n       X/Y, where both X and Y are integers between 1 and N. (Note that '/'\n       is just a convenient functor, not division!) Define the relation\n       jump(N,X/Y,U/V) to express the fact that a knight can jump from X/Y to\n       U/V on a NxN chessboard. And finally, represent the solution of our\n       problem as a list of N*N knight positions (the knight's tour).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 271,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 720,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 730,
              "line": 23,
              "column": 1
            }
          },
          "id": "AerG_1Wdg7Nk059efF9lq"
        },
        {
          "text": "\nmy $n = 5;\nmy $size = $n * $n;\n\nmy @track;\nmy @directions = flat ((1, -1 X 2, -2), (2, -2 X 1, -1));\n\nsub valid_moves($curr, @temp_track=@track) {\n    my @valid_squares = @directions.map(->$a,$b { ($curr.key + $a) => ($curr.value + $b) }).grep({0 <= all(.key, .value) < $n});\n    # exclude occupied squares. !eqv doesn't work yet.\n    @valid_squares.grep({ not $_ eqv any(|@temp_track, $curr) });\n}\n\nsub knight($square) {\n    @track.push($square);\n    return 1 if @track.elems == $size;\n\n    # simple heuristic, for move ordering\n    my @possible_moves = valid_moves($square).sort: ->$a,$b {\n        valid_moves($a, [|@track,$a]).elems <=> valid_moves($b, [|@track, $b]).elems\n            or $a.key <=> $b.key\n            or $a.value <=> $b.value;\n    };\n\n    return unless @possible_moves.elems;\n\n    for @possible_moves -> $try {\n        my $result = knight($try);\n        if $result {\n            return 1;\n        }\n        else {\n            @track.pop;\n        }\n    }\n}\n\nif knight(0 => 0) {\n    say \"FOUND: \" ~ @track.perl;\n}\nelse {\n    say \"NOT FOUND\";\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 730,
              "line": 23,
              "column": 1
            },
            "end": {
              "offset": 1834,
              "line": 68,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "file": "work_examples/categories/99-problems/README.md",
    "sources": [],
    "node": {
      "type": "block",
      "id": "vduZ2erz2IjK7J7Wd8ewT",
      "margin": "",
      "name": "root",
      "content": [
        {
          "type": "block",
          "id": "_Sx8-d4vcqca-JDjlZ0fM",
          "margin": "",
          "level": 1,
          "name": "head",
          "location": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 23,
              "offset": 22
            }
          },
          "content": [
            "99  Problems In Perl"
          ]
        },
        {
          "type": "para",
          "id": "gOxZlt-k7NNt8R3lBHoAL",
          "margin": "",
          "location": {
            "start": {
              "line": 3,
              "column": 1,
              "offset": 24
            },
            "end": {
              "line": 5,
              "column": 39,
              "offset": 191
            }
          },
          "text": "text",
          "content": [
            "Based on the problems from\n",
            {
              "meta": "http://www.ic.unicamp.br/~meidanis/courses/mc336/2006s2/funcional/L-99_Ninety-Nine_Lisp_Problems.html",
              "type": "fcode",
              "name": "L",
              "content": [
                "http://www.ic.unicamp.br/~meidanis/courses/mc336/2006s2/funcional/L-99_Ninety-Nine_Lisp_Problems.html"
              ]
            },
            "\n(which is stored here for future use)."
          ]
        },
        {
          "type": "para",
          "id": "ZBMiyzQPplTvXWYpCDRjZ",
          "margin": "",
          "location": {
            "start": {
              "line": 7,
              "column": 1,
              "offset": 193
            },
            "end": {
              "line": 8,
              "column": 36,
              "offset": 310
            }
          },
          "text": "text",
          "content": [
            "Save solutions as ",
            {
              "type": "fcode",
              "name": "C",
              "content": [
                "PXX-author.pl"
              ]
            },
            " as in other directories where XX is the problem\nnumber and author is the....author!"
          ]
        },
        {
          "type": "para",
          "id": "adCLvH9RbN5ndCdZoyA3Y",
          "margin": "",
          "location": {
            "start": {
              "line": 10,
              "column": 1,
              "offset": 312
            },
            "end": {
              "line": 11,
              "column": 66,
              "offset": 447
            }
          },
          "text": "text",
          "content": [
            "Please include a specification describing the problem and, ideally, a\ndescription of your solution and the perl6 features that it uses."
          ]
        },
        {
          "type": "para",
          "id": "dDh5q2zOJKxrhdbPdpyET",
          "margin": "",
          "location": {
            "start": {
              "line": 13,
              "column": 1,
              "offset": 449
            },
            "end": {
              "line": 13,
              "column": 43,
              "offset": 491
            }
          },
          "text": "text",
          "content": [
            "Use this as a template for your solutions:"
          ]
        },
        {
          "type": "block",
          "id": "Kre3THYITHy-U0M5OptuJ",
          "margin": "",
          "name": "code",
          "config": [],
          "location": {
            "start": {
              "line": 15,
              "column": 1,
              "offset": 493
            },
            "end": {
              "line": 37,
              "column": 33,
              "offset": 1282
            }
          },
          "content": [
            {
              "type": "verbatim",
              "value": "use v6;\n\n# Specification:\n#   PXX (*) Problem copied from L-99_Ninety-Nine_Lisp_Problems.html\n#       You are encouraged to modify the specification to fit perl6 thinking.\n#       For example, P21 originally implied returning a copy of the list,\n#       since LISP does not have mutable lists; you may change the wording to\n#       reflect this, or change the spec to allow modification in-place.\n#\n# Example: (preferably in the form of a REPL session)\n# > say 'Hello, world!'\n# Hello, world!\n\n\n# Explanation of your answer, discussion of perl6 features used\n# We create a function which returns its argument to needlessly complicate a\n# hello, world program\n\nsub my_func ($x) {\nreturn $x\n}\n\nsay my_func('Hello, world!')"
            }
          ]
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "100 Doors\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/best-of-rosettacode/100-doors.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "VsHhokY5CWJxmmsmMzfNt",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "100 Doors\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "100 Doors\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 38,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 38,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "QaiLhbCldpSYDMOcKp3Wr"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "TimToady\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "TimToady\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 39,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 56,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 39,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 56,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "1hOYJutnVTkQqP9ZE9qw7"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You have 100 doors in a row that are all initially closed. You make 100 passes\nby the doors. The first time through, you visit every door and toggle the door\n(if the door is closed, you open it; if it is open, you close it). The second\ntime you only visit every 2nd door (door #2, #4, #6, ...).  The third time,\nevery 3rd door (door #3, #6, #9, ...), etc, until you only visit the 100th\ndoor.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You have 100 doors in a row that are all initially closed. You make 100 passes\nby the doors. The first time through, you visit every door and toggle the door\n(if the door is closed, you open it; if it is open, you close it). The second\ntime you only visit every 2nd door (door #2, #4, #6, ...).  The third time,\nevery 3rd door (door #3, #6, #9, ...), etc, until you only visit the 100th\ndoor.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 57,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 450,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Task\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Task\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 451,
                      "line": 16,
                      "column": 1
                    },
                    "end": {
                      "offset": 463,
                      "line": 17,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 451,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 463,
                  "line": 17,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Task"
            },
            {
              "type": "blankline"
            },
            {
              "text": "What state are the doors in after the last pass? Which are open,\nwhich are closed?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What state are the doors in after the last pass? Which are open,\nwhich are closed?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 464,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 547,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "More\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "More\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 548,
                      "line": 21,
                      "column": 1
                    },
                    "end": {
                      "offset": 560,
                      "line": 22,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 548,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 560,
                  "line": 22,
                  "column": 1
                }
              },
              "level": "1",
              "id": "More"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosettacode.org/wiki/100_doors#Raku>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosettacode.org/wiki/100_doors#Raku"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 561,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 607,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Features used\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Features used\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 608,
                      "line": 25,
                      "column": 1
                    },
                    "end": {
                      "offset": 629,
                      "line": 26,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 608,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 629,
                  "line": 26,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Features-used"
            },
            {
              "type": "blankline"
            },
            {
              "text": "C<X**> - L<http://doc.perl6.org/language/operators#Cross_Operators>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "X**"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " - "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://doc.perl6.org/language/operators#Cross_Operators"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 630,
                  "line": 27,
                  "column": 1
                },
                "end": {
                  "offset": 698,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 708,
              "line": 30,
              "column": 1
            }
          },
          "id": "S5AB9rY-FdHC4Ih_4PRqh"
        },
        {
          "text": "\nsay \"Door $_ is open\" for 1..10 X** 2;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 708,
              "line": 30,
              "column": 1
            },
            "end": {
              "offset": 788,
              "line": 34,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "24 game\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/best-of-rosettacode/24-game.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "WS01k_RTbJBp3i81E6vZF",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "24 game\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "24 game\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 36,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 36,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "fJH11Sj151oyjdN48c3qo"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Filip Sergot\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Filip Sergot\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 37,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 58,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 37,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 58,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "R-0Ff0aE5nyUhR5rmnMTl"
            },
            {
              "type": "blankline"
            },
            {
              "text": "The 24 Game tests one's mental arithmetic.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The 24 Game tests one's mental arithmetic.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 59,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 102,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Write a program that randomly chooses and displays four digits, each from\none to nine, with repetitions allowed. The program should prompt for the\nplayer to enter an equation using just those, and all of those four digits.\nThe program should check then evaluate the expression. The goal is for the\nplayer to enter an expression that evaluates to 24.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Write a program that randomly chooses and displays four digits, each from\none to nine, with repetitions allowed. The program should prompt for the\nplayer to enter an equation using just those, and all of those four digits.\nThe program should check then evaluate the expression. The goal is for the\nplayer to enter an expression that evaluates to 24.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 103,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 453,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Only multiplication, division, addition, and subtraction operators/functions\nare allowed.  Division should use floating point or rational arithmetic,\netc, to preserve remainders.  Brackets are allowed, if using an infix\nexpression evaluator.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Only multiplication, division, addition, and subtraction operators/functions\nare allowed.  Division should use floating point or rational arithmetic,\netc, to preserve remainders.  Brackets are allowed, if using an infix\nexpression evaluator.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 454,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 696,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Forming multiple digit numbers from the supplied digits is disallowed. (So\nan answer of 12+12 when given 1, 2, 2, and 1 is wrong).\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Forming multiple digit numbers from the supplied digits is disallowed. (So\nan answer of 12+12 when given 1, 2, 2, and 1 is wrong).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 697,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 828,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The order of the digits when given does not have to be preserved.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The order of the digits when given does not have to be preserved.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 829,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 895,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Note:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Note:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 896,
                  "line": 27,
                  "column": 1
                },
                "end": {
                  "offset": 902,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The type of expression evaluator used is not mandated. An RPN evaluator is\nequally acceptable for example.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The type of expression evaluator used is not mandated. An RPN evaluator is\nequally acceptable for example.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 903,
                  "line": 29,
                  "column": 1
                },
                "end": {
                  "offset": 1010,
                  "line": 31,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The task is not for the program to generate the expression, or test whether\nan expression is even possible.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The task is not for the program to generate the expression, or test whether\nan expression is even possible.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1011,
                  "line": 32,
                  "column": 1
                },
                "end": {
                  "offset": 1119,
                  "line": 34,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "More\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "More\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 1120,
                      "line": 35,
                      "column": 1
                    },
                    "end": {
                      "offset": 1132,
                      "line": 36,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 1120,
                  "line": 35,
                  "column": 1
                },
                "end": {
                  "offset": 1132,
                  "line": 36,
                  "column": 1
                }
              },
              "level": "1",
              "id": "More"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosettacode.org/wiki/24_game#Raku>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosettacode.org/wiki/24_game#Raku"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1133,
                  "line": 37,
                  "column": 1
                },
                "end": {
                  "offset": 1177,
                  "line": 38,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "What's interesting here?\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "What's interesting here?\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 1178,
                      "line": 39,
                      "column": 1
                    },
                    "end": {
                      "offset": 1210,
                      "line": 40,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 1178,
                  "line": 39,
                  "column": 1
                },
                "end": {
                  "offset": 1210,
                  "line": 40,
                  "column": 1
                }
              },
              "level": "1",
              "id": "What's-interesting-here"
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "grammar\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "grammar\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1211,
                          "line": 41,
                          "column": 1
                        },
                        "end": {
                          "offset": 1225,
                          "line": 42,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1211,
                      "line": 41,
                      "column": 1
                    },
                    "end": {
                      "offset": 1225,
                      "line": 42,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "lOhAhKBXtjVJyaE7hjbWP"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "eval\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "eval\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1225,
                          "line": 42,
                          "column": 1
                        },
                        "end": {
                          "offset": 1236,
                          "line": 43,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1225,
                      "line": 42,
                      "column": 1
                    },
                    "end": {
                      "offset": 1236,
                      "line": 43,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "w4fhzUW_Zafg-9riZPZKS"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "prompt\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "prompt\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1236,
                          "line": 43,
                          "column": 1
                        },
                        "end": {
                          "offset": 1249,
                          "line": 44,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1236,
                      "line": 43,
                      "column": 1
                    },
                    "end": {
                      "offset": 1249,
                      "line": 44,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "3UTCFKSnBiZiKBwoZLc4X"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "roll\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "roll\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1249,
                          "line": 44,
                          "column": 1
                        },
                        "end": {
                          "offset": 1260,
                          "line": 45,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1249,
                      "line": 44,
                      "column": 1
                    },
                    "end": {
                      "offset": 1260,
                      "line": 45,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "ZVPsdtyC9RAbPsfzks55h"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "coercion\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "coercion\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1260,
                          "line": 45,
                          "column": 1
                        },
                        "end": {
                          "offset": 1275,
                          "line": 46,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1260,
                      "line": 45,
                      "column": 1
                    },
                    "end": {
                      "offset": 1275,
                      "line": 46,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "hO2xZyBNsWpVF0e0x6is-"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1285,
              "line": 48,
              "column": 1
            }
          },
          "id": "3pavk3OBMBkgruGfMuj6Y"
        },
        {
          "text": "\nuse MONKEY-SEE-NO-EVAL;  # we use EVAL to process user input\n\ngrammar Exp24 {\n    token TOP { ^ <exp> $ }\n    token exp { <term> [ <op> <term> ]* }\n    token term { '(' <exp> ')' | \\d }\n    token op { '+' | '-' | '*' | '/' }\n}\n\nmy @default-digits = roll 4, 1..9;  # to a gamer, that's a \"4d9\" roll\n\nsub MAIN ($digits = Nil){\n    my @digits = $digits.split(/\\s+/);\n    @digits = @digits.elems == 4 ?? @digits !! @default-digits;\n    say \"Here are your digits: {@digits}\";\n\n    while my $exp = prompt \"\\n24-Exp? \" {\n        unless is-valid($exp, @digits) {\n            say \"Sorry, your expression is not valid!\";\n            next;\n        }\n\n        my $value = EVAL $exp;\n        say \"$exp = $value\";\n        if $value == 24 {\n            say \"You win!\";\n            last;\n        }\n        say \"Sorry, your expression doesn't evaluate to 24!\";\n    }\n}\n\nsub is-valid($exp, @digits) {\n    unless ?Exp24.parse($exp) {\n        say \"Expression doesn't match rules!\";\n        return False;\n    }\n\n    unless $exp.comb(/\\d/).sort.join == @digits.sort.join {\n        say \"Expression must contain digits {@digits} only!\";\n        return False;\n    }\n\n    return True;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1285,
              "line": 48,
              "column": 1
            },
            "end": {
              "offset": 2487,
              "line": 96,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Accumulator factory\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/best-of-rosettacode/accumulator-factory.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "cKzeVyU3LIMz9WPNYHgk7",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Accumulator factory\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Accumulator factory\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 48,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 48,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "Jui-xgRnV_ldOSIQG4OcU"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Kodi Arfer\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Kodi Arfer\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 49,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 49,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "vM8M-NrGc6g_YmyGMtrkY"
            },
            {
              "type": "blankline"
            },
            {
              "text": "A problem posed by Paul Graham is that of creating a function that takes a\nsingle (numeric) argument and which returns another function that is an\naccumulator. The returned accumulator function in turn also takes a single\nnumeric argument, and returns the sum of all the numeric values passed in so\nfar to that accumulator (including the initial value passed when the\naccumulator was created).\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A problem posed by Paul Graham is that of creating a function that takes a\nsingle (numeric) argument and which returns another function that is an\naccumulator. The returned accumulator function in turn also takes a single\nnumeric argument, and returns the sum of all the numeric values passed in so\nfar to that accumulator (including the initial value passed when the\naccumulator was created).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 69,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 463,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The detailed rules are at L<http://paulgraham.com/accgensub.html> and are\nreproduced here for simplicity (with additions).\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The detailed rules are at "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://paulgraham.com/accgensub.html"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": " and are\nreproduced here for simplicity (with additions).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 464,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 587,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Task\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Task\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 588,
                      "line": 19,
                      "column": 1
                    },
                    "end": {
                      "offset": 600,
                      "line": 20,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 588,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 600,
                  "line": 20,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Task"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Make sure the function\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Make sure the function\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 601,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 624,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Takes a number n and returns a function (lets call it g), that takes a\n      number i, and returns n incremented by the accumulation of i from every call\n      of function g(i). (Although these exact function and parameter names need\n      not be used).\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Takes a number n and returns a function (lets call it g), that takes a\n      number i, and returns n incremented by the accumulation of i from every call\n      of function g(i). (Although these exact function and parameter names need\n      not be used).\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 625,
                          "line": 23,
                          "column": 1
                        },
                        "end": {
                          "offset": 885,
                          "line": 27,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 625,
                      "line": 23,
                      "column": 1
                    },
                    "end": {
                      "offset": 885,
                      "line": 27,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "HjpBaCAEuulVF-6A3Jswr"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Works for any numeric type-- i.e. can take both ints and floats and\n      returns functions that can take both ints and floats. (It is not enough\n      simply to convert all input to floats. An accumulator that has only seen\n      integers must return integers.) (i.e., if the language doesn't allow for\n      numeric polymorphism, you have to use overloading or something like that)\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Works for any numeric type-- i.e. can take both ints and floats and\n      returns functions that can take both ints and floats. (It is not enough\n      simply to convert all input to floats. An accumulator that has only seen\n      integers must return integers.) (i.e., if the language doesn't allow for\n      numeric polymorphism, you have to use overloading or something like that)\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 886,
                          "line": 28,
                          "column": 1
                        },
                        "end": {
                          "offset": 1276,
                          "line": 33,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 886,
                      "line": 28,
                      "column": 1
                    },
                    "end": {
                      "offset": 1276,
                      "line": 33,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "rRQZV07dZlgc3pZV4VI4x"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Generates functions that return the sum of every number ever passed to\n      them, not just the most recent. (This requires a piece of state to hold the\n      accumulated value, which in turn means that pure functional languages can't\n      be used for this task.)\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Generates functions that return the sum of every number ever passed to\n      them, not just the most recent. (This requires a piece of state to hold the\n      accumulated value, which in turn means that pure functional languages can't\n      be used for this task.)\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1277,
                          "line": 34,
                          "column": 1
                        },
                        "end": {
                          "offset": 1548,
                          "line": 38,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1277,
                      "line": 34,
                      "column": 1
                    },
                    "end": {
                      "offset": 1548,
                      "line": 38,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "Ts3rRpOhqUlTOCj9H2ASy"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Returns a real function, meaning something that you can use wherever\n      you could use a function you had defined in the ordinary way in the text of\n      your program. (Follow your language's conventions here.)\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Returns a real function, meaning something that you can use wherever\n      you could use a function you had defined in the ordinary way in the text of\n      your program. (Follow your language's conventions here.)\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1549,
                          "line": 39,
                          "column": 1
                        },
                        "end": {
                          "offset": 1769,
                          "line": 42,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1549,
                      "line": 39,
                      "column": 1
                    },
                    "end": {
                      "offset": 1769,
                      "line": 42,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "YlwGcbGXRH2lZQ5meuW4g"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Doesn't store the accumulated value or the returned functions in a way\n      that could cause them to be inadvertently modified by other code. (No global\n      variables or other such things.)\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Doesn't store the accumulated value or the returned functions in a way\n      that could cause them to be inadvertently modified by other code. (No global\n      variables or other such things.)\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1770,
                          "line": 43,
                          "column": 1
                        },
                        "end": {
                          "offset": 1969,
                          "line": 46,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1770,
                      "line": 43,
                      "column": 1
                    },
                    "end": {
                      "offset": 1969,
                      "line": 46,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "NkYu2txX4IrjqJcVepk-W"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Example\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Example\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 1970,
                      "line": 47,
                      "column": 1
                    },
                    "end": {
                      "offset": 1985,
                      "line": 48,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 1970,
                  "line": 47,
                  "column": 1
                },
                "end": {
                  "offset": 1985,
                  "line": 48,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Example"
            },
            {
              "type": "blankline"
            },
            {
              "text": "If after the example, you added the following code (in a made-up language)\nwhere the factory function is called foo:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If after the example, you added the following code (in a made-up language)\nwhere the factory function is called foo:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1986,
                  "line": 49,
                  "column": 1
                },
                "end": {
                  "offset": 2103,
                  "line": 51,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "x = foo(1);\nx(5);\nfoo(3);\nprint x(2.3);\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "x = foo(1);\n    x(5);\n    foo(3);\n    print x(2.3);\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2104,
                  "line": 52,
                  "column": 1
                },
                "end": {
                  "offset": 2160,
                  "line": 56,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "It should print 8.3. (There is no need to print the form of the accumulator\nfunction returned by foo(3); it's not part of the task at all.)\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It should print 8.3. (There is no need to print the form of the accumulator\nfunction returned by foo(3); it's not part of the task at all.)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2161,
                  "line": 57,
                  "column": 1
                },
                "end": {
                  "offset": 2301,
                  "line": 59,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Purpose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Purpose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 2302,
                      "line": 60,
                      "column": 1
                    },
                    "end": {
                      "offset": 2317,
                      "line": 61,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 2302,
                  "line": 60,
                  "column": 1
                },
                "end": {
                  "offset": 2317,
                  "line": 61,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Purpose"
            },
            {
              "type": "blankline"
            },
            {
              "text": "The purpose of this task is to create a function that implements the\ndescribed rules. It need not handle any special error cases not described\nabove. The simplest way to implement the task as described is typically to\nuse a closure, providing the language supports them.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The purpose of this task is to create a function that implements the\ndescribed rules. It need not handle any special error cases not described\nabove. The simplest way to implement the task as described is typically to\nuse a closure, providing the language supports them.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2318,
                  "line": 62,
                  "column": 1
                },
                "end": {
                  "offset": 2589,
                  "line": 66,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "More\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "More\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 2590,
                      "line": 67,
                      "column": 1
                    },
                    "end": {
                      "offset": 2602,
                      "line": 68,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 2590,
                  "line": 67,
                  "column": 1
                },
                "end": {
                  "offset": 2602,
                  "line": 68,
                  "column": 1
                }
              },
              "level": "1",
              "id": "More"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosettacode.org/wiki/Accumulator_factory#Raku>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosettacode.org/wiki/Accumulator_factory#Raku"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2603,
                  "line": 69,
                  "column": 1
                },
                "end": {
                  "offset": 2659,
                  "line": 70,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "What's interesting here?\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "What's interesting here?\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 2661,
                      "line": 72,
                      "column": 1
                    },
                    "end": {
                      "offset": 2693,
                      "line": 73,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 2661,
                  "line": 72,
                  "column": 1
                },
                "end": {
                  "offset": 2693,
                  "line": 73,
                  "column": 1
                }
              },
              "level": "1",
              "id": "What's-interesting-here"
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "returning a sub\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "returning a sub\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 2694,
                          "line": 74,
                          "column": 1
                        },
                        "end": {
                          "offset": 2716,
                          "line": 75,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 2694,
                      "line": 74,
                      "column": 1
                    },
                    "end": {
                      "offset": 2716,
                      "line": 75,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "qd8MVcp7BA1Vj7JduBlSr"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "is copy\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "is copy\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 2716,
                          "line": 75,
                          "column": 1
                        },
                        "end": {
                          "offset": 2730,
                          "line": 76,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 2716,
                      "line": 75,
                      "column": 1
                    },
                    "end": {
                      "offset": 2730,
                      "line": 76,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "6ZmMnsmNgKyCikiIA8rAp"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "$^var\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "$^var\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 2730,
                          "line": 76,
                          "column": 1
                        },
                        "end": {
                          "offset": 2742,
                          "line": 77,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 2730,
                      "line": 76,
                      "column": 1
                    },
                    "end": {
                      "offset": 2742,
                      "line": 77,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "Yd-FyaQRzm-b4AMnJAGK_"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "static vars in subs\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "static vars in subs\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 2742,
                          "line": 77,
                          "column": 1
                        },
                        "end": {
                          "offset": 2768,
                          "line": 78,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 2742,
                      "line": 77,
                      "column": 1
                    },
                    "end": {
                      "offset": 2768,
                      "line": 78,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "A4vpXBPX_Nw3zxu-H4t9p"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 2778,
              "line": 80,
              "column": 1
            }
          },
          "id": "Zxd9kkKohfIlAKPuZie6R"
        },
        {
          "text": "\n\nsub accum ($n is copy) { sub { $n += $^x } }\n\nmy $a = accum 5;\n$a(4.5);\nsay $a(.5);   # Prints \"10\".\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 2778,
              "line": 80,
              "column": 1
            },
            "end": {
              "offset": 2921,
              "line": 89,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Ackermann function\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/best-of-rosettacode/ackermann-function.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "u1aiKik6oBFrEQ80ZgkJP",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Ackermann function\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Ackermann function\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 47,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 47,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "v5Haj3gYT-ATi9HoGYGJf"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Filip Sergot\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Filip Sergot\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 48,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 69,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 48,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 69,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "OVBKoxoOl62enUaneBLrv"
            },
            {
              "type": "blankline"
            },
            {
              "text": "The Ackermann function is a classic recursive example in computer science.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The Ackermann function is a classic recursive example in computer science.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 70,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 145,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "More\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "More\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 146,
                      "line": 11,
                      "column": 1
                    },
                    "end": {
                      "offset": 158,
                      "line": 12,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 146,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 158,
                  "line": 12,
                  "column": 1
                }
              },
              "level": "1",
              "id": "More"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosettacode.org/wiki/Ackermann_function#Raku>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosettacode.org/wiki/Ackermann_function#Raku"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 159,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 214,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "What's interesting here?\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "What's interesting here?\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 215,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 247,
                      "line": 16,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 215,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 247,
                  "line": 16,
                  "column": 1
                }
              },
              "level": "1",
              "id": "What's-interesting-here"
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "ternary chaining\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "ternary chaining\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 248,
                          "line": 17,
                          "column": 1
                        },
                        "end": {
                          "offset": 271,
                          "line": 18,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 248,
                      "line": 17,
                      "column": 1
                    },
                    "end": {
                      "offset": 271,
                      "line": 18,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "MiVLBrwX8j_v8DLmpbjeg"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "recursive functions\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "recursive functions\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 271,
                          "line": 18,
                          "column": 1
                        },
                        "end": {
                          "offset": 297,
                          "line": 19,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 271,
                      "line": 18,
                      "column": 1
                    },
                    "end": {
                      "offset": 297,
                      "line": 19,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "PnxAJZNV663ix51_ImOfq"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Features used\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Features used\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 298,
                      "line": 20,
                      "column": 1
                    },
                    "end": {
                      "offset": 319,
                      "line": 21,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 298,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 319,
                  "line": 21,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Features-used"
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "C<ternary operator> - L<http://doc.perl6.org/language/operators#infix_%3F%3F_%21%21>\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "ternary operator"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " - "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "http://doc.perl6.org/language/operators#infix_%3F%3F_%21%21"
                            }
                          ],
                          "type": "fcode",
                          "name": "L",
                          "meta": null
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 320,
                          "line": 22,
                          "column": 1
                        },
                        "end": {
                          "offset": 411,
                          "line": 23,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 320,
                      "line": 22,
                      "column": 1
                    },
                    "end": {
                      "offset": 411,
                      "line": 23,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "yeos6qgigDUyUI0kyka5O"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "C<multi subs> - L<http://doc.perl6.org/syntax/multi>\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "multi subs"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " - "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "http://doc.perl6.org/syntax/multi"
                            }
                          ],
                          "type": "fcode",
                          "name": "L",
                          "meta": null
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 411,
                          "line": 23,
                          "column": 1
                        },
                        "end": {
                          "offset": 470,
                          "line": 24,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 411,
                      "line": 23,
                      "column": 1
                    },
                    "end": {
                      "offset": 470,
                      "line": 24,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "UaDC60dovhLbRF-gJnuvu"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 480,
              "line": 26,
              "column": 1
            }
          },
          "id": "v2ldSeRcvQ5cU7gX24Ba5"
        },
        {
          "text": "\nsub A(Int $m, Int $n) {\n\n    $m == 0  ??    $n + 1                   !!\n    $n == 0  ??  A($m - 1, 1            )   !!\n                 A($m - 1, A($m, $n - 1));\n\n}\nA(1, 2).say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 480,
              "line": 26,
              "column": 1
            },
            "end": {
              "offset": 699,
              "line": 37,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Arbitrary-precision integers (included)\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/best-of-rosettacode/arbitrary-precision-integers.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Nxhk0rgVjXtmflI8wlZG5",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Arbitrary-precision integers (included)\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Arbitrary-precision integers (included)\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "PrQexnoElvtszvMebK_5K"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "TimToady\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "TimToady\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 69,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 86,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 69,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 86,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "1lWrbIZTszD3RU8Ig3UnN"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Using the in-built capabilities of your language, calculate the integer\nvalue of:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Using the in-built capabilities of your language, calculate the integer\nvalue of:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 87,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 169,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "5^{4^{3^2}}\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "5^{4^{3^2}}\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 170,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 186,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Confirm that the first and last twenty digits of the answer are:\n62060698786608744707...92256259918212890625\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Confirm that the first and last twenty digits of the answer are:\n62060698786608744707...92256259918212890625\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 187,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 296,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find and show the number of decimal digits in the answer.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find and show the number of decimal digits in the answer.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 297,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 355,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "More\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "More\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 356,
                      "line": 19,
                      "column": 1
                    },
                    "end": {
                      "offset": 368,
                      "line": 20,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 356,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 368,
                  "line": 20,
                  "column": 1
                }
              },
              "level": "1",
              "id": "More"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosettacode.org/wiki/Arbitrary-precision_integers_(included)#Raku>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosettacode.org/wiki/Arbitrary-precision_integers_(included)#Raku"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 369,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 445,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "What's interesting here?\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "What's interesting here?\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 446,
                      "line": 23,
                      "column": 1
                    },
                    "end": {
                      "offset": 478,
                      "line": 24,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 446,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 478,
                  "line": 24,
                  "column": 1
                }
              },
              "level": "1",
              "id": "What's-interesting-here"
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "metaoperator\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "metaoperator\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 479,
                          "line": 25,
                          "column": 1
                        },
                        "end": {
                          "offset": 498,
                          "line": 26,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 479,
                      "line": 25,
                      "column": 1
                    },
                    "end": {
                      "offset": 498,
                      "line": 26,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "wzCc-yFwYkl9whFIZThgs"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "casting\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "casting\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 498,
                          "line": 26,
                          "column": 1
                        },
                        "end": {
                          "offset": 512,
                          "line": 27,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 498,
                      "line": 26,
                      "column": 1
                    },
                    "end": {
                      "offset": 512,
                      "line": 27,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "-CBZGOZeou326Qv_vy5we"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "{} in string\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "{} in string\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 512,
                          "line": 27,
                          "column": 1
                        },
                        "end": {
                          "offset": 531,
                          "line": 28,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 512,
                      "line": 27,
                      "column": 1
                    },
                    "end": {
                      "offset": 531,
                      "line": 28,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "Hqh85f9ouGTMRe-uhaiGB"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 541,
              "line": 30,
              "column": 1
            }
          },
          "id": "q5tV93Fm--99wFGoRyGVY"
        },
        {
          "text": "\nmy $x = ~[**] 5, 4, 3, 2;\nsay \"5**4**3**2 = {substr($x,0,20)}...{substr($x,$x.chars-20)} and has {$x.chars} digits\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 541,
              "line": 30,
              "column": 1
            },
            "end": {
              "offset": 699,
              "line": 35,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Balanced brackets\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/best-of-rosettacode/balanced-brackets.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "nrRR3mH8wLHBtYFPk0gR3",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Balanced brackets\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Balanced brackets\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 46,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 46,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "CnPVJ6qozysbmfbSOYK1n"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Filip Sergot\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Filip Sergot\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 47,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 47,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "oCwbWTN0zSD4G5-Zt__LG"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Generate a string with N opening brackets (“[”) and N closing brackets\n(“]”), in some arbitrary order.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Generate a string with N opening brackets (“[”) and N closing brackets\n(“]”), in some arbitrary order.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 69,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 172,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Determine whether the generated string is balanced; that is, whether it\nconsists entirely of pairs of opening/closing brackets (in that order), none\nof which mis-nest.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Determine whether the generated string is balanced; that is, whether it\nconsists entirely of pairs of opening/closing brackets (in that order), none\nof which mis-nest.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 173,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 341,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "More\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "More\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 342,
                      "line": 16,
                      "column": 1
                    },
                    "end": {
                      "offset": 354,
                      "line": 17,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 342,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 354,
                  "line": 17,
                  "column": 1
                }
              },
              "level": "1",
              "id": "More"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosettacode.org/wiki/Balanced_brackets#Raku>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosettacode.org/wiki/Balanced_brackets#Raku"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 355,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 409,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "What's interesting here?\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "What's interesting here?\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 410,
                      "line": 20,
                      "column": 1
                    },
                    "end": {
                      "offset": 442,
                      "line": 21,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 410,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 442,
                  "line": 21,
                  "column": 1
                }
              },
              "level": "1",
              "id": "What's-interesting-here"
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "idiomatic solutions\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "idiomatic solutions\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 443,
                          "line": 22,
                          "column": 1
                        },
                        "end": {
                          "offset": 469,
                          "line": 23,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 443,
                      "line": 22,
                      "column": 1
                    },
                    "end": {
                      "offset": 469,
                      "line": 23,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "oeJeE6EZApI9OCIvEATE-"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "hyper operators\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "hyper operators\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 469,
                          "line": 23,
                          "column": 1
                        },
                        "end": {
                          "offset": 491,
                          "line": 24,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 469,
                      "line": 23,
                      "column": 1
                    },
                    "end": {
                      "offset": 491,
                      "line": 24,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "Xk1G2aZVUvVGYjKDxNLTd"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "switch statement\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "switch statement\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 491,
                          "line": 24,
                          "column": 1
                        },
                        "end": {
                          "offset": 514,
                          "line": 25,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 491,
                      "line": 24,
                      "column": 1
                    },
                    "end": {
                      "offset": 514,
                      "line": 25,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "QqRHqxLxIyrBIpF2FY4rG"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "roll\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "roll\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 514,
                          "line": 25,
                          "column": 1
                        },
                        "end": {
                          "offset": 525,
                          "line": 26,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 514,
                      "line": 25,
                      "column": 1
                    },
                    "end": {
                      "offset": 525,
                      "line": 26,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "Cs57txBHiZU3S4mXqZ3Ll"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "grammar\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "grammar\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 525,
                          "line": 26,
                          "column": 1
                        },
                        "end": {
                          "offset": 539,
                          "line": 27,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 525,
                      "line": 26,
                      "column": 1
                    },
                    "end": {
                      "offset": 539,
                      "line": 27,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "eA72Nq-5usRQSoQDf39Zp"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Features used\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Features used\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 540,
                      "line": 28,
                      "column": 1
                    },
                    "end": {
                      "offset": 561,
                      "line": 29,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 540,
                  "line": 28,
                  "column": 1
                },
                "end": {
                  "offset": 561,
                  "line": 29,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Features-used"
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "C<roll> - L<https://doc.perl6.org/routine/roll#class_List>\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "roll"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " - "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "https://doc.perl6.org/routine/roll#class_List"
                            }
                          ],
                          "type": "fcode",
                          "name": "L",
                          "meta": null
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 562,
                          "line": 30,
                          "column": 1
                        },
                        "end": {
                          "offset": 627,
                          "line": 31,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 562,
                      "line": 30,
                      "column": 1
                    },
                    "end": {
                      "offset": 627,
                      "line": 31,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "NR1SADQqk4QbP5YbJkgs-"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "C<given> - L<https://doc.perl6.org/syntax/given#language_documentation_Control_Flow>\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "given"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " - "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "https://doc.perl6.org/syntax/given#language_documentation_Control_Flow"
                            }
                          ],
                          "type": "fcode",
                          "name": "L",
                          "meta": null
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 627,
                          "line": 31,
                          "column": 1
                        },
                        "end": {
                          "offset": 718,
                          "line": 32,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 627,
                      "line": 31,
                      "column": 1
                    },
                    "end": {
                      "offset": 718,
                      "line": 32,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "YdJLdpD8o_CJfd-eDo8a5"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "C<prompt> - L<https://doc.perl6.org/routine/prompt>\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "prompt"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " - "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "https://doc.perl6.org/routine/prompt"
                            }
                          ],
                          "type": "fcode",
                          "name": "L",
                          "meta": null
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 718,
                          "line": 32,
                          "column": 1
                        },
                        "end": {
                          "offset": 776,
                          "line": 33,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 718,
                      "line": 32,
                      "column": 1
                    },
                    "end": {
                      "offset": 776,
                      "line": 33,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "6sU5xhjraLZ9O7If5a6Kr"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "C<grammar> - L<https://doc.perl6.org/language/grammars>\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "grammar"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " - "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "https://doc.perl6.org/language/grammars"
                            }
                          ],
                          "type": "fcode",
                          "name": "L",
                          "meta": null
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 776,
                          "line": 33,
                          "column": 1
                        },
                        "end": {
                          "offset": 838,
                          "line": 34,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 776,
                      "line": 33,
                      "column": 1
                    },
                    "end": {
                      "offset": 838,
                      "line": 34,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "G6azDEp9Mvx8pZsLBPw1l"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Depth counter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Depth counter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 839,
                      "line": 35,
                      "column": 1
                    },
                    "end": {
                      "offset": 860,
                      "line": 36,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 839,
                  "line": 35,
                  "column": 1
                },
                "end": {
                  "offset": 860,
                  "line": 36,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Depth-counter"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 870,
              "line": 38,
              "column": 1
            }
          },
          "id": "rJChCqsBtB-X3qPGZkrPf"
        },
        {
          "text": "\nmy $n = prompt \"Number of bracket pairs: \";\n\n{\n    sub balanced($s) {\n        my $l = 0;\n        for $s.comb {\n            when \"]\" {\n                --$l;\n                return False if $l < 0;\n            }\n            when \"[\" {\n                ++$l;\n            }\n        }\n        return $l == 0;\n    }\n\n    my $s = (<[ ]> xx $n).pick(*).join;\n    say \"Using depth counter method\";\n    say \"$s {balanced($s) ?? \"is\" !! \"is not\"} well-balanced\";\n}\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 870,
              "line": 38,
              "column": 1
            },
            "end": {
              "offset": 1325,
              "line": 61,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "FP oriented\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "FP oriented\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 1337,
                      "line": 63,
                      "column": 1
                    },
                    "end": {
                      "offset": 1356,
                      "line": 64,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 1337,
                  "line": 63,
                  "column": 1
                },
                "end": {
                  "offset": 1356,
                  "line": 64,
                  "column": 1
                }
              },
              "level": "2",
              "id": "FP-oriented"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 1325,
              "line": 61,
              "column": 1
            },
            "end": {
              "offset": 1366,
              "line": 66,
              "column": 1
            }
          },
          "id": "HBJfJSGmWwcajn-lNg6LL"
        },
        {
          "text": "\n{\n    sub balanced($s) {\n        .none < 0 and .[*-1] == 0\n            given ([\\+] '\\\\' «leg« $s.comb).cache;\n    }\n\n    my $s = <[ ]>.roll($n*2).join;\n    say \"Using an FP oriented method\";\n    say \"$s { balanced($s) ?? \"is\" !! \"is not\" } well-balanced\";\n}\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1366,
              "line": 66,
              "column": 1
            },
            "end": {
              "offset": 1626,
              "line": 78,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "String munging\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "String munging\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 1638,
                      "line": 80,
                      "column": 1
                    },
                    "end": {
                      "offset": 1660,
                      "line": 81,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 1638,
                  "line": 80,
                  "column": 1
                },
                "end": {
                  "offset": 1660,
                  "line": 81,
                  "column": 1
                }
              },
              "level": "2",
              "id": "String-munging"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 1626,
              "line": 78,
              "column": 1
            },
            "end": {
              "offset": 1670,
              "line": 83,
              "column": 1
            }
          },
          "id": "NklRysCSLvnoM48vMvcCa"
        },
        {
          "text": "\n{\n    sub balanced($_ is copy) {\n        s:g/'[]'// while m/'[]'/;\n        $_ eq '';\n    }\n\n    my $s = <[ ]>.roll($n*2).join;\n    say \"Using a string munging method\";\n    say \"$s is\", ' not' xx not balanced($s), \" well-balanced\";\n}\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1670,
              "line": 83,
              "column": 1
            },
            "end": {
              "offset": 1905,
              "line": 95,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Parsing with a grammar\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Parsing with a grammar\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 1917,
                      "line": 97,
                      "column": 1
                    },
                    "end": {
                      "offset": 1947,
                      "line": 98,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 1917,
                  "line": 97,
                  "column": 1
                },
                "end": {
                  "offset": 1947,
                  "line": 98,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Parsing-with-a-grammar"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 1905,
              "line": 95,
              "column": 1
            },
            "end": {
              "offset": 1957,
              "line": 100,
              "column": 1
            }
          },
          "id": "R4ds069NSjCeCbP-J2M_W"
        },
        {
          "text": "\n{\n\n    grammar BalBrack {\n        token TOP { ^ <balanced>* $ };\n        token balanced { '[]' | '[' ~ ']' <balanced> }\n    }\n\n    my $s = <[ ]>.roll($n*2).join;\n    say \"Parsing brackets with a grammer\";\n    say \"$s { BalBrack.parse($s) ?? \"is\" !! \"is not\" } well-balanced\";\n\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1957,
              "line": 100,
              "column": 1
            },
            "end": {
              "offset": 2277,
              "line": 115,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Binomial Coefficient\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/best-of-rosettacode/binomial-coefficient.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "RezKucP8Ak0-oVyp2a4Kk",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Binomial Coefficient\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Binomial Coefficient\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "DKJ7bG9jTTOxZXKwRma5D"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 69,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 69,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "XBhqeocdhBdkcIwWluaIp"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Number of ways to choose P objects among N.  It's also the coefficient of the\nmonome of degree P in the expansion of (1 + X)^N, thus the name.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Number of ways to choose P objects among N.  It's also the coefficient of the\nmonome of degree P in the expansion of (1 + X)^N, thus the name.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 70,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 213,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "blankline"
            },
            {
              "text": "N       (N-P+1)*(N-P+2)*...*N\n(   ) = ∑ -------------------\nP         1*2*...*P\n",
              "margin": "     ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "N       (N-P+1)*(N-P+2)*...*N\n   (   ) = ∑ -------------------\n     P         1*2*...*P\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 215,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 308,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "More\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "More\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 310,
                      "line": 18,
                      "column": 1
                    },
                    "end": {
                      "offset": 322,
                      "line": 19,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 310,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 322,
                  "line": 19,
                  "column": 1
                }
              },
              "level": "1",
              "id": "More"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosettacode.org/wiki/Evaluate_binomial_coefficients#Raku>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosettacode.org/wiki/Evaluate_binomial_coefficients#Raku"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 323,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 390,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Notable features used\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Notable features used\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 391,
                      "line": 22,
                      "column": 1
                    },
                    "end": {
                      "offset": 420,
                      "line": 23,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 391,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 420,
                  "line": 23,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Notable-features-used"
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "infix sub definition\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "infix sub definition\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 421,
                          "line": 24,
                          "column": 1
                        },
                        "end": {
                          "offset": 448,
                          "line": 25,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 421,
                      "line": 24,
                      "column": 1
                    },
                    "end": {
                      "offset": 448,
                      "line": 25,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "oeoSNdjxaj15n7qIWVSYQ"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "reduction meta-operator\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "reduction meta-operator\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 448,
                          "line": 25,
                          "column": 1
                        },
                        "end": {
                          "offset": 478,
                          "line": 26,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 448,
                      "line": 25,
                      "column": 1
                    },
                    "end": {
                      "offset": 478,
                      "line": 26,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "iUSh-46KRkB17NlfqRZ7i"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "self-declared parameters\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "self-declared parameters\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 478,
                          "line": 26,
                          "column": 1
                        },
                        "end": {
                          "offset": 509,
                          "line": 27,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 478,
                      "line": 26,
                      "column": 1
                    },
                    "end": {
                      "offset": 509,
                      "line": 27,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "J-lbdKTgTFWQDvFb6y6JO"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "sequence operator to get a decreasing order\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "sequence operator to get a decreasing order\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 509,
                          "line": 27,
                          "column": 1
                        },
                        "end": {
                          "offset": 559,
                          "line": 28,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 509,
                      "line": 27,
                      "column": 1
                    },
                    "end": {
                      "offset": 559,
                      "line": 28,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "grEIIOHYkW78TgmFSG_7h"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Zip metaoperator with list of different sizes\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Zip metaoperator with list of different sizes\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 559,
                          "line": 28,
                          "column": 1
                        },
                        "end": {
                          "offset": 611,
                          "line": 29,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 559,
                      "line": 28,
                      "column": 1
                    },
                    "end": {
                      "offset": 611,
                      "line": 29,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "U0ZnsZ-M4R7MMFko6-5-z"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "use of rational numbers as a default\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "use of rational numbers as a default\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 611,
                          "line": 29,
                          "column": 1
                        },
                        "end": {
                          "offset": 654,
                          "line": 30,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 611,
                      "line": 29,
                      "column": 1
                    },
                    "end": {
                      "offset": 654,
                      "line": 30,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "S02ysB67bxI0DiI56Fvmf"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 664,
              "line": 32,
              "column": 1
            }
          },
          "id": "kwEWnttvbD-xqECmw_beI"
        },
        {
          "text": "\nsub infix:<choose> { [*] ($^n ... 0) Z/ 1 .. $^p }\n\nsay 5 choose 3;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 664,
              "line": 32,
              "column": 1
            },
            "end": {
              "offset": 773,
              "line": 38,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Copy a string\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/best-of-rosettacode/copy-a-string.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "SHBGMQ1WLiPeeySvsmiCm",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Copy a string\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Copy a string\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 42,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 42,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "t43rzs5Xdk1KDroAtDeN0"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Stephen \"thundergnat\" Schulze\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Stephen \"thundergnat\" Schulze\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 43,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 81,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 43,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 81,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "-oKe52lFczHm-nQD0JxDq"
            },
            {
              "type": "blankline"
            },
            {
              "text": "This task is about copying a string. Where it is relevant, distinguish\nbetween copying the contents of a string versus making an additional\nreference to an existing string.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "This task is about copying a string. Where it is relevant, distinguish\nbetween copying the contents of a string versus making an additional\nreference to an existing string.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 82,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 255,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "More\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "More\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 256,
                      "line": 13,
                      "column": 1
                    },
                    "end": {
                      "offset": 268,
                      "line": 14,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 256,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 268,
                  "line": 14,
                  "column": 1
                }
              },
              "level": "2",
              "id": "More"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosettacode.org/wiki/Copy_a_string#Raku>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosettacode.org/wiki/Copy_a_string#Raku"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 269,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 319,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 329,
              "line": 18,
              "column": 1
            }
          },
          "id": "8kCp2P9Z9fOPWfCoKVXQB"
        },
        {
          "text": "\n# There is no special handling needed to copy a string.\n{\n    my $original = 'Hello.';\n    my $copy = $original;\n    say $copy;            # prints \"Hello.\"\n    $copy = 'Goodbye.';\n    say $copy;            # prints \"Goodbye.\"\n    say $original;        # prints \"Hello.\"\n}\n\n# You can also bind a new variable to an existing one so that each refers\n# to, and can modify the same string.\n{\n    my $original = 'Hello.';\n    my $bound := $original;\n    say $bound;           # prints \"Hello.\"\n    $bound = 'Goodbye.';\n    say $bound;           # prints \"Goodbye.\"\n    say $original;        # prints \"Goodbye.\"\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 329,
              "line": 18,
              "column": 1
            },
            "end": {
              "offset": 978,
              "line": 41,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Create a two-dimensional array at runtime\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/best-of-rosettacode/create-a-two-dimensional-array-at-runtime.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "SYd6t8STlfveP0aXWsdiM",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Create a two-dimensional array at runtime\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Create a two-dimensional array at runtime\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 70,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 70,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "DaiRhZxZ3rEOlCQHtv62o"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "TimToady\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "TimToady\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 71,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 88,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 71,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 88,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "wIDF99fGlKwtE8jqwjAhH"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Get two integers from the user, then create a two-dimensional array where the\ntwo dimensions have the sizes given by those numbers, and which can be accessed\nin the most natural way possible. Write some element of that array, and then\noutput that element. Finally destroy the array if not done by the language\nitself.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Get two integers from the user, then create a two-dimensional array where the\ntwo dimensions have the sizes given by those numbers, and which can be accessed\nin the most natural way possible. Write some element of that array, and then\noutput that element. Finally destroy the array if not done by the language\nitself.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 89,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 407,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "More\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "More\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 408,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 420,
                      "line": 16,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 408,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 420,
                  "line": 16,
                  "column": 1
                }
              },
              "level": "1",
              "id": "More"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosettacode.org/wiki/Create_a_two-dimensional_array_at_runtime#Raku>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosettacode.org/wiki/Create_a_two-dimensional_array_at_runtime#Raku"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 421,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 499,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 509,
              "line": 20,
              "column": 1
            }
          },
          "id": "uApN3wIcfAR7RxnGVvj9N"
        },
        {
          "text": "\n\nmy ($major, $minor) = prompt(\"Dimensions? \").comb(/\\d+/);\ndie \"Please enter two dimensions\" unless $major && $minor;\n\nmy @array := [ for ^$major { [ for ^$minor { '@' } ] } ];\n\n@array[ (^$major).pick  ][ (^$minor).pick ] = ' ';\n\n.Str.say for @array;\n\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 509,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 802,
              "line": 33,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Hailstone sequence\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/best-of-rosettacode/hailstone-sequence.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "0D46yFLNlQMdRfXiqD81I",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Hailstone sequence\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Hailstone sequence\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 47,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 47,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "k8BdZu9DEt0QQWRL0uZI3"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "TimToady\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "TimToady\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 48,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 65,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 48,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 65,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "r5Nchy2QIHy3iJyphqqNR"
            },
            {
              "type": "blankline"
            },
            {
              "text": "The Hailstone sequence of numbers can be generated from a starting positive\ninteger, n by:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The Hailstone sequence of numbers can be generated from a starting positive\ninteger, n by:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 66,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 157,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "* If n is 1 then the sequence ends.\n* If n is even then the next n of the sequence = n/2\n* If n is odd then the next n of the sequence = (3 * n) + 1\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "* If n is 1 then the sequence ends.\n* If n is even then the next n of the sequence = n/2\n* If n is odd then the next n of the sequence = (3 * n) + 1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 158,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 307,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The (unproven), Collatz conjecture is that the hailstone sequence for any\nstarting number always terminates.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The (unproven), Collatz conjecture is that the hailstone sequence for any\nstarting number always terminates.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 308,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 417,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Task\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Task\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 418,
                      "line": 19,
                      "column": 1
                    },
                    "end": {
                      "offset": 430,
                      "line": 20,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 418,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 430,
                  "line": 20,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Task"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Create a routine to generate the hailstone sequence for a number.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Create a routine to generate the hailstone sequence for a number.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 431,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 497,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Use the routine to show that the hailstone sequence for the number 27 has 112\nelements starting with 27, 82, 41, 124 and ending with 8, 4, 2, 1\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Use the routine to show that the hailstone sequence for the number 27 has 112\nelements starting with 27, 82, 41, 124 and ending with 8, 4, 2, 1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 498,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 642,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Show the number less than 100,000 which has the longest hailstone sequence\ntogether with that sequence's length.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Show the number less than 100,000 which has the longest hailstone sequence\ntogether with that sequence's length.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 643,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 756,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "(But don't show the actual sequence)!\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "(But don't show the actual sequence)!\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 757,
                  "line": 29,
                  "column": 1
                },
                "end": {
                  "offset": 795,
                  "line": 30,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "More\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "More\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 796,
                      "line": 31,
                      "column": 1
                    },
                    "end": {
                      "offset": 808,
                      "line": 32,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 796,
                  "line": 31,
                  "column": 1
                },
                "end": {
                  "offset": 808,
                  "line": 32,
                  "column": 1
                }
              },
              "level": "1",
              "id": "More"
            },
            {
              "type": "blankline"
            },
            {
              "text": "U<http://rosettacode.org/wiki/Hailstone_sequence#Raku>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosettacode.org/wiki/Hailstone_sequence#Raku"
                    }
                  ],
                  "type": "fcode",
                  "name": "U"
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 809,
                  "line": 33,
                  "column": 1
                },
                "end": {
                  "offset": 864,
                  "line": 34,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 875,
              "line": 37,
              "column": 1
            }
          },
          "id": "JYYGUW4gyOCSAeBmZxbYQ"
        },
        {
          "text": "\nsub hailstone($n) { $n, { $_ %% 2 ?? $_ div 2 !! $_ * 3 + 1 } ... 1 }\n\nmy @h = hailstone(27);\nsay \"Length of hailstone(27) = {+@h}\";\nsay ~@h;\n\nmy $m max= +hailstone($_) => $_ for 1..99_999;\nsay \"Max length $m.key() was found for hailstone($m.value()) for numbers < 100_000\";\n\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 875,
              "line": 37,
              "column": 1
            },
            "end": {
              "offset": 1192,
              "line": 49,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Last fridays of the year\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/best-of-rosettacode/last-fridays-of-year.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "pgiENm6Q_pwJ8lLbfcOe7",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Last fridays of the year\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Last fridays of the year\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 53,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 53,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "8HzXNN2obfJYYHaTUgAgS"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "TimToady\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "TimToady\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 54,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 54,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "MhYDieWV4SPCGSF_Dr017"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Write a program or a script that returns the last Fridays of each month\nof a given year. The year may be given through any simple input method\nin your language (command line, std in, etc.).\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Write a program or a script that returns the last Fridays of each month\nof a given year. The year may be given through any simple input method\nin your language (command line, std in, etc.).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 72,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 262,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "More\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "More\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 263,
                      "line": 13,
                      "column": 1
                    },
                    "end": {
                      "offset": 275,
                      "line": 14,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 263,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 275,
                  "line": 14,
                  "column": 1
                }
              },
              "level": "1",
              "id": "More"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosettacode.org/wiki/Last_Fridays#Raku>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosettacode.org/wiki/Last_Fridays#Raku"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 276,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 325,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Features used\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Features used\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 326,
                      "line": 17,
                      "column": 1
                    },
                    "end": {
                      "offset": 347,
                      "line": 18,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 326,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 347,
                  "line": 18,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Features-used"
            },
            {
              "type": "blankline"
            },
            {
              "text": "The MAIN sub - L<https://doc.perl6.org/language/functions#sub_MAIN>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The MAIN sub - "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://doc.perl6.org/language/functions#sub_MAIN"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 348,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 416,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Date objects - L<https://doc.perl6.org/type/Date>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Date objects - "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://doc.perl6.org/type/Date"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 417,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 467,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 477,
              "line": 24,
              "column": 1
            }
          },
          "id": "YyOziSPLPOwfgyXubrfwZ"
        },
        {
          "text": "\nsub MAIN (Int $year = Date.today.year) {\n    my @fri;\n    for Date.new(\"$year-01-01\") .. Date.new(\"$year-12-31\") {\n        @fri[.month] = .Str if .day-of-week == 5;\n    }\n    .say for @fri[1..12];\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 477,
              "line": 24,
              "column": 1
            },
            "end": {
              "offset": 717,
              "line": 34,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Prime decomposition\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/best-of-rosettacode/prime-decomposition.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "wMzw5YgAOFW3X8wvjBpVa",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Prime decomposition\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Prime decomposition\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 48,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 48,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "DnAQY5i_yqeGMR06DyIoe"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "TimToady\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "TimToady\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 49,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 66,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 49,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 66,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "4rVTKagr-ennDEMxXq1rq"
            },
            {
              "type": "blankline"
            },
            {
              "text": "The prime decomposition of a number is defined as a list of prime numbers\nwhich when all multiplied together, are equal to that number.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The prime decomposition of a number is defined as a list of prime numbers\nwhich when all multiplied together, are equal to that number.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 67,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 203,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Example: 12 = 2 × 2 × 3, so its prime decomposition is {2, 2, 3}\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Example: 12 = 2 × 2 × 3, so its prime decomposition is {2, 2, 3}\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 204,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 269,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Task\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Task\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 270,
                      "line": 14,
                      "column": 1
                    },
                    "end": {
                      "offset": 282,
                      "line": 15,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 270,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 282,
                  "line": 15,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Task"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Write a function which returns an array or collection which contains the\nprime decomposition of a given number, n, greater than 1. If your language\ndoes not have an isPrime-like function available, you may assume that you\nhave a function which determines whether a number is prime (note its name\nbefore your code).\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Write a function which returns an array or collection which contains the\nprime decomposition of a given number, n, greater than 1. If your language\ndoes not have an isPrime-like function available, you may assume that you\nhave a function which determines whether a number is prime (note its name\nbefore your code).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 283,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 598,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "More\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "More\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 599,
                      "line": 22,
                      "column": 1
                    },
                    "end": {
                      "offset": 611,
                      "line": 23,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 599,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 611,
                  "line": 23,
                  "column": 1
                }
              },
              "level": "1",
              "id": "More"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosettacode.org/wiki/Prime_decomposition#Raku>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosettacode.org/wiki/Prime_decomposition#Raku"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 612,
                  "line": 24,
                  "column": 1
                },
                "end": {
                  "offset": 668,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 678,
              "line": 27,
              "column": 1
            }
          },
          "id": "Yz2AqAE4b20Tbbn2tDJLd"
        },
        {
          "text": "\nmy @primes = 2, 3, 5, -> $n is copy {\n    repeat { $n += 2 } until $n %% none @primes ... { $_ * $_ >= $n }\n    $n;\n} ... *;\n\nsub factors(Int $remainder is copy) {\n    return 1 if $remainder <= 1;\n    gather for @primes -> $factor {\n        if $factor * $factor > $remainder {\n            take $remainder if $remainder > 1;\n            last;\n        }\n\n        # How many times can we divide by this prime?\n        while $remainder %% $factor {\n            take $factor;\n            last if ($remainder div= $factor) === 1;\n        }\n    }\n}\n\nsay \"{factors 536870911}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 678,
              "line": 27,
              "column": 1
            },
            "end": {
              "offset": 1289,
              "line": 52,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "file": "work_examples/categories/best-of-rosettacode/README.md",
    "sources": [],
    "node": {
      "type": "block",
      "id": "MFWlBjEPy7FktYgQW_bRf",
      "margin": "",
      "name": "root",
      "content": [
        {
          "type": "block",
          "id": "So0hW7yE_b2LoX8l8hdRP",
          "margin": "",
          "level": 1,
          "name": "head",
          "location": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          },
          "content": [
            "Rosetta code"
          ]
        },
        {
          "type": "para",
          "id": "EBFPjhCVPu8tYqFci9EpW",
          "margin": "",
          "location": {
            "start": {
              "line": 3,
              "column": 1,
              "offset": 16
            },
            "end": {
              "line": 3,
              "column": 23,
              "offset": 38
            }
          },
          "text": "text",
          "content": [
            {
              "meta": "http://rosettacode.org",
              "type": "fcode",
              "name": "L",
              "content": [
                "http://rosettacode.org"
              ]
            }
          ]
        },
        {
          "type": "para",
          "id": "0UItRaenRXFwzQDG0BT51",
          "margin": "",
          "location": {
            "start": {
              "line": 5,
              "column": 1,
              "offset": 40
            },
            "end": {
              "line": 8,
              "column": 16,
              "offset": 289
            }
          },
          "text": "text",
          "content": [
            "This directory contains some good examples taken from rosettacode.org. We make\nan effort to pick examples that cover some useful or novel aspect of the Perl\n6 language and share some pointers about where to get more information about\nthese features."
          ]
        },
        {
          "type": "para",
          "id": "IXSAyzv_E7WMHDnmnau-a",
          "margin": "",
          "location": {
            "start": {
              "line": 10,
              "column": 1,
              "offset": 291
            },
            "end": {
              "line": 10,
              "column": 75,
              "offset": 365
            }
          },
          "text": "text",
          "content": [
            "If you find an instructive example on rosettacode.org, then share it here!"
          ]
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Perl 6 Cookbook: Introduction to Strings\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/01strings/01-00introduction.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "gjcAyBX3z4tYFemd1i93y",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Perl 6 Cookbook: Introduction to Strings\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Perl 6 Cookbook: Introduction to Strings\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 90,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 90,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "7GuXj3_eqfljMPP2mJCHd"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 91,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 113,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 91,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 113,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "v2DaWUqy1W0z2dBeR3GEk"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Definition\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Definition\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 114,
                      "line": 11,
                      "column": 1
                    },
                    "end": {
                      "offset": 132,
                      "line": 12,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 114,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 132,
                  "line": 12,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Definition"
            },
            {
              "type": "blankline"
            },
            {
              "text": "In Perl 6, a string is a sequence of zero or more characters and other\nsimple objects, forming a single unit of data of the type Str. A string\nis data usually in its reportable or printable form. You can write a\nPerl string using single-quotes '', double-quotes \"\", and various quote-like\noperators. You can create and manipulate strings programmatically, in\nmany ways. In fact, this is what Perl does best.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In Perl 6, a string is a sequence of zero or more characters and other\nsimple objects, forming a single unit of data of the type Str. A string\nis data usually in its reportable or printable form. You can write a\nPerl string using single-quotes '', double-quotes \"\", and various quote-like\noperators. You can create and manipulate strings programmatically, in\nmany ways. In fact, this is what Perl does best.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 133,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 541,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Description\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Description\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 543,
                      "line": 21,
                      "column": 1
                    },
                    "end": {
                      "offset": 562,
                      "line": 22,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 543,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 562,
                  "line": 22,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Description"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Perl 6 interprets strings depending on context.  A string may consist\nof zero or more characters, including letters, spaces, numbers, and\nother characters.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Perl 6 interprets strings depending on context.  A string may consist\nof zero or more characters, including letters, spaces, numbers, and\nother characters.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 563,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 719,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Declaring and assigning Strings\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Declaring and assigning Strings\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 720,
                      "line": 27,
                      "column": 1
                    },
                    "end": {
                      "offset": 759,
                      "line": 28,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 720,
                  "line": 27,
                  "column": 1
                },
                "end": {
                  "offset": 759,
                  "line": 28,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Declaring-and-assigning-Strings"
            },
            {
              "type": "blankline"
            },
            {
              "text": "A string can be created explicitly, by declaring a variable using the\nStr keyword, and assigning a string value to it.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A string can be created explicitly, by declaring a variable using the\nStr keyword, and assigning a string value to it.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 760,
                  "line": 29,
                  "column": 1
                },
                "end": {
                  "offset": 879,
                  "line": 31,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "my Str $string = 'This Str is holding a String';\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "my Str $string = 'This Str is holding a String';\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 880,
                  "line": 32,
                  "column": 1
                },
                "end": {
                  "offset": 933,
                  "line": 33,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Or a string can be declared implicitly by assigning a string value to\na variable, in this case a scalar.  It automatically becomes a string\nvariable.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Or a string can be declared implicitly by assigning a string value to\na variable, in this case a scalar.  It automatically becomes a string\nvariable.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 934,
                  "line": 34,
                  "column": 1
                },
                "end": {
                  "offset": 1084,
                  "line": 37,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "my $scalar = 'Party time';\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "my $scalar = 'Party time';\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1085,
                  "line": 38,
                  "column": 1
                },
                "end": {
                  "offset": 1116,
                  "line": 39,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 1126,
              "line": 41,
              "column": 1
            }
          },
          "id": "9BBbVzi0Al24Mvru4tArk"
        },
        {
          "text": "\nmy Str $string = 'This Str is holding a String';\nmy $scalar = 'Party time'; # Also a string\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1126,
              "line": 41,
              "column": 1
            },
            "end": {
              "offset": 1220,
              "line": 45,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Displaying Strings\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Displaying Strings\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 1232,
                      "line": 47,
                      "column": 1
                    },
                    "end": {
                      "offset": 1258,
                      "line": 48,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 1232,
                  "line": 47,
                  "column": 1
                },
                "end": {
                  "offset": 1258,
                  "line": 48,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Displaying-Strings"
            },
            {
              "type": "blankline"
            },
            {
              "text": "We display strings using print or say:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "We display strings using print or say:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1259,
                  "line": 49,
                  "column": 1
                },
                "end": {
                  "offset": 1298,
                  "line": 50,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "print \"\"        ; # output is an empty string\nprint \"Hello\\n\" ; # output is Hello followed by a new line\nsay   \"Hello\"   ; # same\nsay   'Hello'   ; # same\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "print \"\"        ; # output is an empty string\n    print \"Hello\\n\" ; # output is Hello followed by a new line\n    say   \"Hello\"   ; # same\n    say   'Hello'   ; # same\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1299,
                  "line": 51,
                  "column": 1
                },
                "end": {
                  "offset": 1470,
                  "line": 55,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 1220,
              "line": 45,
              "column": 1
            },
            "end": {
              "offset": 1480,
              "line": 57,
              "column": 1
            }
          },
          "id": "i2ftbgWLu9EJC44zPdAxM"
        },
        {
          "text": "\nprint \"\"        ; # output is an empty string\nprint \"Hello\\n\" ; # output string is Hello followed by a new line\nsay   \"Hello\"   ; # same\nsay   'Hello'   ; # same\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1480,
              "line": 57,
              "column": 1
            },
            "end": {
              "offset": 1644,
              "line": 63,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "text": "Both print and say also accept a list of things to display, and will\nattempt to join all the things into a string:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Both print and say also accept a list of things to display, and will\nattempt to join all the things into a string:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1656,
                  "line": 65,
                  "column": 1
                },
                "end": {
                  "offset": 1771,
                  "line": 67,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "say \"Hello\", \" World\", \"!\"; # Hello World!\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "say \"Hello\", \" World\", \"!\"; # Hello World!\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1772,
                  "line": 68,
                  "column": 1
                },
                "end": {
                  "offset": 1819,
                  "line": 69,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 1644,
              "line": 63,
              "column": 1
            },
            "end": {
              "offset": 1829,
              "line": 71,
              "column": 1
            }
          },
          "id": "I7mP1Q1xpVuUrx0cNKLAz"
        },
        {
          "text": "\nsay \"Hello\", \" World\", \"!\"; # Hello World!\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1829,
              "line": 71,
              "column": 1
            },
            "end": {
              "offset": 1874,
              "line": 74,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "text": "Strings can be appended to one another, using the concatenation\noperator, ~\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Strings can be appended to one another, using the concatenation\noperator, ~\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1886,
                  "line": 76,
                  "column": 1
                },
                "end": {
                  "offset": 1962,
                  "line": 78,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Beware when using print and say; concatenation is slower than joining.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Beware when using print and say; concatenation is slower than joining.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1963,
                  "line": 79,
                  "column": 1
                },
                "end": {
                  "offset": 2034,
                  "line": 80,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Here, three strings are concatenated into a single string.  Output is\nHello World! followed by a newline.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Here, three strings are concatenated into a single string.  Output is\nHello World! followed by a newline.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2035,
                  "line": 81,
                  "column": 1
                },
                "end": {
                  "offset": 2141,
                  "line": 83,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "my Str $str;\n$str = \"Hello\" ~ \" World\" ~ \"!\";\nsay $str; # Hello World!\n$str.say; # As above\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "my Str $str;\n    $str = \"Hello\" ~ \" World\" ~ \"!\";\n    say $str; # Hello World!\n    $str.say; # As above\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2142,
                  "line": 84,
                  "column": 1
                },
                "end": {
                  "offset": 2250,
                  "line": 88,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 1874,
              "line": 74,
              "column": 1
            },
            "end": {
              "offset": 2260,
              "line": 90,
              "column": 1
            }
          },
          "id": "SjqvBQHzGPdIOxrnSoMzR"
        },
        {
          "text": "\n{\n  my Str $string;\n  $string = \"Hello\" ~ \" World\" ~ \"!\";\n  say $string; # Hello World!\n  $string.say; # As above\n}\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 2260,
              "line": 90,
              "column": 1
            },
            "end": {
              "offset": 2378,
              "line": 98,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Introspection\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Introspection\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 2390,
                      "line": 100,
                      "column": 1
                    },
                    "end": {
                      "offset": 2411,
                      "line": 101,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 2390,
                  "line": 100,
                  "column": 1
                },
                "end": {
                  "offset": 2411,
                  "line": 101,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Introspection"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Perl 6 has extensive support for introspection, that is, to see the\ninternals of types and objects during runtime.  It is therefore\npossible to find out if a variable is a string and act upon that\ninformation.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Perl 6 has extensive support for introspection, that is, to see the\ninternals of types and objects during runtime.  It is therefore\npossible to find out if a variable is a string and act upon that\ninformation.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2412,
                  "line": 102,
                  "column": 1
                },
                "end": {
                  "offset": 2622,
                  "line": 106,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "We know we get a String when we declare something explicitly as Str:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "We know we get a String when we declare something explicitly as Str:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2623,
                  "line": 107,
                  "column": 1
                },
                "end": {
                  "offset": 2692,
                  "line": 108,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "my Str $string = 'This is $string: a scalar holding a String';\nsay $string;\nsay '$string is ', $string.^name;                 # Str\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "my Str $string = 'This is $string: a scalar holding a String';\n    say $string;\n    say '$string is ', $string.^name;                 # Str\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2693,
                  "line": 109,
                  "column": 1
                },
                "end": {
                  "offset": 2837,
                  "line": 112,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "We can also easily show that a general variable containing a String,\nis in fact just that:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "We can also easily show that a general variable containing a String,\nis in fact just that:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2838,
                  "line": 113,
                  "column": 1
                },
                "end": {
                  "offset": 2929,
                  "line": 115,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "my $scalar = 'This is $scalar holding a String';\nsay $scalar;\nsay '$scalar is ', $scalar.^name;                 # Str\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "my $scalar = 'This is $scalar holding a String';\n    say $scalar;\n    say '$scalar is ', $scalar.^name;                 # Str\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2930,
                  "line": 116,
                  "column": 1
                },
                "end": {
                  "offset": 3060,
                  "line": 119,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 2378,
              "line": 98,
              "column": 1
            },
            "end": {
              "offset": 3070,
              "line": 121,
              "column": 1
            }
          },
          "id": "RwkU0Ya9umIwp_915sa9i"
        },
        {
          "text": "\n{\n  my Str $string = 'This is $string: a scalar holding a String';\n  say $string;\n  say '$string is ', $string.^name;                 # Str\n\n  my $scalar = 'This is $scalar holding a String';\n  say $scalar;\n  say '$scalar is ', $scalar.^name;                 # Str\n}\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 3070,
              "line": 121,
              "column": 1
            },
            "end": {
              "offset": 3339,
              "line": 132,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Numbers as strings\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Numbers as strings\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 3351,
                      "line": 134,
                      "column": 1
                    },
                    "end": {
                      "offset": 3377,
                      "line": 135,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 3351,
                  "line": 134,
                  "column": 1
                },
                "end": {
                  "offset": 3377,
                  "line": 135,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Numbers-as-strings"
            },
            {
              "type": "blankline"
            },
            {
              "text": "A number may be interpreted as a string, depending on the context:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A number may be interpreted as a string, depending on the context:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 3378,
                  "line": 136,
                  "column": 1
                },
                "end": {
                  "offset": 3445,
                  "line": 137,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "say 1; # 1 is interpreted as a number\nsay 2, \" is a number interpreted as a string\"; # 2 is a number interpreted as a string.\nsay 1+2*3, \" is a number interpreted as a string\"; # 7 is a number interpreted as a string.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "say 1; # 1 is interpreted as a number\n    say 2, \" is a number interpreted as a string\"; # 2 is a number interpreted as a string.\n    say 1+2*3, \" is a number interpreted as a string\"; # 7 is a number interpreted as a string.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 3446,
                  "line": 138,
                  "column": 1
                },
                "end": {
                  "offset": 3676,
                  "line": 141,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Note that Perl 6 ensures that the arithmetic expression before the\nfirst comma is evaluated even without enclosing parentheses, and that\nit is only afterwards that it is interpreted as a string.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Note that Perl 6 ensures that the arithmetic expression before the\nfirst comma is evaluated even without enclosing parentheses, and that\nit is only afterwards that it is interpreted as a string.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 3677,
                  "line": 142,
                  "column": 1
                },
                "end": {
                  "offset": 3872,
                  "line": 145,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 3339,
              "line": 132,
              "column": 1
            },
            "end": {
              "offset": 3882,
              "line": 147,
              "column": 1
            }
          },
          "id": "bKjF3iKWMwnTXa74bv_4x"
        },
        {
          "text": "\nsay 1; # 1 is a number\nsay 2, \" is a number interpreted as a string\"; # 2 is a number interpreted as a string.\nsay 1+2*3, \" is a number interpreted as a string\"; # 7 is a number interpreted as a string.\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 3882,
              "line": 147,
              "column": 1
            },
            "end": {
              "offset": 4087,
              "line": 152,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Strings as numbers\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Strings as numbers\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 4099,
                      "line": 154,
                      "column": 1
                    },
                    "end": {
                      "offset": 4125,
                      "line": 155,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 4099,
                  "line": 154,
                  "column": 1
                },
                "end": {
                  "offset": 4125,
                  "line": 155,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Strings-as-numbers"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Conversely, sometimes a string might be interpreted as a number:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Conversely, sometimes a string might be interpreted as a number:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 4126,
                  "line": 156,
                  "column": 1
                },
                "end": {
                  "offset": 4191,
                  "line": 157,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "print  +\"\"     ; # a num-ified empty string evaluates as 0\nprint  \"1\" + 1 ; # 2\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "print  +\"\"     ; # a num-ified empty string evaluates as 0\n    print  \"1\" + 1 ; # 2\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 4192,
                  "line": 158,
                  "column": 1
                },
                "end": {
                  "offset": 4280,
                  "line": 160,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The string, \"1\" is treated as a number in this context, added to the\nnumber 1 by the + operator, which returns the number, 2, as a\nstring for output.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The string, \"1\" is treated as a number in this context, added to the\nnumber 1 by the + operator, which returns the number, 2, as a\nstring for output.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 4281,
                  "line": 161,
                  "column": 1
                },
                "end": {
                  "offset": 4431,
                  "line": 164,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 4087,
              "line": 152,
              "column": 1
            },
            "end": {
              "offset": 4441,
              "line": 166,
              "column": 1
            }
          },
          "id": "1NpQ1otThSHKImT-LMklu"
        },
        {
          "text": "\nsay   +\"\"     ; # a num-ified empty string evaluates as 0\nsay  \"1\" + 1  ; # 2\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 4441,
              "line": 166,
              "column": 1
            },
            "end": {
              "offset": 4521,
              "line": 170,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "text": "Context sensitivity is the essence of Perl.  Keeping this in mind, what\nwould you expect to be the output string, for the following?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Context sensitivity is the essence of Perl.  Keeping this in mind, what\nwould you expect to be the output string, for the following?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 4533,
                  "line": 172,
                  "column": 1
                },
                "end": {
                  "offset": 4666,
                  "line": 174,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "my $string = \"1\" ~ \"1\" + 10; # 12, 21, or even... \"111\"?\nsay $string;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "my $string = \"1\" ~ \"1\" + 10; # 12, 21, or even... \"111\"?\n    say $string;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 4667,
                  "line": 175,
                  "column": 1
                },
                "end": {
                  "offset": 4745,
                  "line": 177,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "But, \"1+1\", surrounded by quotation marks, either '' or \"\", stringifies\nthe expression, so that it is evaluated as a string.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "But, \"1+1\", surrounded by quotation marks, either '' or \"\", stringifies\nthe expression, so that it is evaluated as a string.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 4746,
                  "line": 178,
                  "column": 1
                },
                "end": {
                  "offset": 4871,
                  "line": 180,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "say \"1 + 1\"; # literally: 1 + 1\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "say \"1 + 1\"; # literally: 1 + 1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 4872,
                  "line": 181,
                  "column": 1
                },
                "end": {
                  "offset": 4908,
                  "line": 182,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "To force the interpretation of a string for any programmatic\nvalue it might contain, use the built-in EVAL() call:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "To force the interpretation of a string for any programmatic\nvalue it might contain, use the built-in EVAL() call:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 4909,
                  "line": 183,
                  "column": 1
                },
                "end": {
                  "offset": 5024,
                  "line": 185,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "say EVAL \"1 + 1\";    # 2\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "say EVAL \"1 + 1\";    # 2\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 5025,
                  "line": 186,
                  "column": 1
                },
                "end": {
                  "offset": 5054,
                  "line": 187,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "On the command-line, you may pass a string to the perl 6 interpretor,\nto have it evaluated as a program expression, by using the -e switch:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "On the command-line, you may pass a string to the perl 6 interpretor,\nto have it evaluated as a program expression, by using the -e switch:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 5055,
                  "line": 188,
                  "column": 1
                },
                "end": {
                  "offset": 5195,
                  "line": 190,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "./perl6 -e \"say 1+1\"; # 2\n./perl6 -e 'say \"1+1\"'; # 1+1\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "./perl6 -e \"say 1+1\"; # 2\n    ./perl6 -e 'say \"1+1\"'; # 1+1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 5196,
                  "line": 191,
                  "column": 1
                },
                "end": {
                  "offset": 5260,
                  "line": 193,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 4521,
              "line": 170,
              "column": 1
            },
            "end": {
              "offset": 5270,
              "line": 195,
              "column": 1
            }
          },
          "id": "PksdVeJKQEyXEaG4-ojZ8"
        },
        {
          "text": "\n{\n  my $string = \"1\" ~ \"1\" + 10; # 12, 21, or even... \"111\"?\n  say $string;\n  say \"1 + 1\"; # literally: 1 + 1\n  say EVAL \"1 + 1\";    # 2\n}\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 5270,
              "line": 195,
              "column": 1
            },
            "end": {
              "offset": 5411,
              "line": 203,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "text": "Assignments of non-strings set the variable to the appropriate type:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Assignments of non-strings set the variable to the appropriate type:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 5423,
                  "line": 205,
                  "column": 1
                },
                "end": {
                  "offset": 5492,
                  "line": 206,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "my $scalar = 1234;\nsay $scalar; # 1234\nsay '$scalar is ', $scalar.^name   # $scalar is Int\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "my $scalar = 1234;\n    say $scalar; # 1234\n    say '$scalar is ', $scalar.^name   # $scalar is Int\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 5493,
                  "line": 207,
                  "column": 1
                },
                "end": {
                  "offset": 5596,
                  "line": 210,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "An object can be stringified, by using the ~ operator immediately\nprior to the variable's sigil\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "An object can be stringified, by using the ~ operator immediately\nprior to the variable's sigil\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 5597,
                  "line": 211,
                  "column": 1
                },
                "end": {
                  "offset": 5693,
                  "line": 213,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "say '~$scalar is ', (~$scalar).^name; # ~$scalar is Str\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "say '~$scalar is ', (~$scalar).^name; # ~$scalar is Str\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 5694,
                  "line": 214,
                  "column": 1
                },
                "end": {
                  "offset": 5754,
                  "line": 215,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 5411,
              "line": 203,
              "column": 1
            },
            "end": {
              "offset": 5764,
              "line": 217,
              "column": 1
            }
          },
          "id": "0j8Ay_kpBFFFKkjUW7Wvk"
        },
        {
          "text": "\n$scalar = 1234;\nsay $scalar; # 1234\nsay '$scalar is ', $scalar.^name;\nsay '~$scalar is ', (~$scalar).^name;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 5764,
              "line": 217,
              "column": 1
            },
            "end": {
              "offset": 5874,
              "line": 223,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Quotes, Interpolation and Quote-like operators\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Quotes, Interpolation and Quote-like operators\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 5886,
                      "line": 225,
                      "column": 1
                    },
                    "end": {
                      "offset": 5940,
                      "line": 226,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 5886,
                  "line": 225,
                  "column": 1
                },
                "end": {
                  "offset": 5940,
                  "line": 226,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Quotes-Interpolation-and-Quote-like-operators"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Single-quoted Strings\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Single-quoted Strings\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 5941,
                      "line": 227,
                      "column": 1
                    },
                    "end": {
                      "offset": 5970,
                      "line": 228,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 5941,
                  "line": 227,
                  "column": 1
                },
                "end": {
                  "offset": 5970,
                  "line": 228,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Single-quoted-Strings"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Strings that are written with single quotes are almost\nverbatim.  However, backslashes are an escape character.\nThis is so that you can write literal single-quotes\nwithin a single-quoted string, and also be able to write\na backslash at the end of a single-quote-enclosed string:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Strings that are written with single quotes are almost\nverbatim.  However, backslashes are an escape character.\nThis is so that you can write literal single-quotes\nwithin a single-quoted string, and also be able to write\na backslash at the end of a single-quote-enclosed string:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 5971,
                  "line": 229,
                  "column": 1
                },
                "end": {
                  "offset": 6250,
                  "line": 234,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "say 'n\\'     ; # Error: perl sees no closing '\nsay '\\\\'     ; # \\\nsay 'n\\''    ; # n'\nsay 'n\\n'    ; # n\\n\nsay 'n\\\\n'   ; # n\\n\nsay 'n\\\\\\n'  ; # n\\\\n better spelled as:\nsay 'n\\\\\\\\n' ; # n\\\\n\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "say 'n\\'     ; # Error: perl sees no closing '\n    say '\\\\'     ; # \\\n    say 'n\\''    ; # n'\n    say 'n\\n'    ; # n\\n\n    say 'n\\\\n'   ; # n\\n\n    say 'n\\\\\\n'  ; # n\\\\n better spelled as:\n    say 'n\\\\\\\\n' ; # n\\\\n\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 6251,
                  "line": 235,
                  "column": 1
                },
                "end": {
                  "offset": 6470,
                  "line": 242,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "blankline"
            },
            {
              "text": "A few other backslashy escapes work in single quotes too\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A few other backslashy escapes work in single quotes too\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 6472,
                  "line": 244,
                  "column": 1
                },
                "end": {
                  "offset": 6529,
                  "line": 245,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Double-quoted Strings\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Double-quoted Strings\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 6530,
                      "line": 246,
                      "column": 1
                    },
                    "end": {
                      "offset": 6559,
                      "line": 247,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 6530,
                  "line": 246,
                  "column": 1
                },
                "end": {
                  "offset": 6559,
                  "line": 247,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Double-quoted-Strings"
            },
            {
              "type": "blankline"
            },
            {
              "text": "If you want to interpolate variables and other special characters\nwithin a literal string, use double quotes around the value:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If you want to interpolate variables and other special characters\nwithin a literal string, use double quotes around the value:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 6560,
                  "line": 248,
                  "column": 1
                },
                "end": {
                  "offset": 6687,
                  "line": 250,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "my $var1 = 'dog' ;\nsay \"The quick brown fox jumps over the lazy $var1\";\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "my $var1 = 'dog' ;\n    say \"The quick brown fox jumps over the lazy $var1\";\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 6688,
                  "line": 251,
                  "column": 1
                },
                "end": {
                  "offset": 6768,
                  "line": 253,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Interpolation\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Interpolation\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 6770,
                      "line": 255,
                      "column": 1
                    },
                    "end": {
                      "offset": 6791,
                      "line": 256,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 6770,
                  "line": 255,
                  "column": 1
                },
                "end": {
                  "offset": 6791,
                  "line": 256,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Interpolation"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Double-quoted strings interpolate the elements of an array or\na hash, closures, functions, backslashed control characters, and\nother good stuff.  Single-quoted strings do not.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Double-quoted strings interpolate the elements of an array or\na hash, closures, functions, backslashed control characters, and\nother good stuff.  Single-quoted strings do not.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 6792,
                  "line": 257,
                  "column": 1
                },
                "end": {
                  "offset": 6968,
                  "line": 260,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# literal whitespace\nmy $squot = '    The quick brown fox jumps over the lazy dog.\n\tdog.';\nmy $dquot = \"    The quick brown fox jumps over the lazy\n\tdog.\";\nsay $squot;\nsay $dquot;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# literal whitespace\n    my $squot = '    The quick brown fox jumps over the lazy dog.\n    \tdog.';\n    my $dquot = \"    The quick brown fox jumps over the lazy\n    \tdog.\";\n    say $squot;\n    say $dquot;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 6969,
                  "line": 261,
                  "column": 1
                },
                "end": {
                  "offset": 7177,
                  "line": 268,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# Double-quotes interpolate special backslash values,\n# but single-quotes do not\nsay 'The quick brown fox\\n\\tjumps over the lazy dog\\n';\nsay \"The quick brown fox\\n\\tjumps over the lazy dog\\n\";\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# Double-quotes interpolate special backslash values,\n    # but single-quotes do not\n    say 'The quick brown fox\\n\\tjumps over the lazy dog\\n';\n    say \"The quick brown fox\\n\\tjumps over the lazy dog\\n\";\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 7178,
                  "line": 269,
                  "column": 1
                },
                "end": {
                  "offset": 7387,
                  "line": 273,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# interpolate array elements:\nmy @animal = (\"fox\", \"dog\");\nsay 'The quick brown @animal[0] jumps over the lazy @animal[1]';\nsay \"The quick brown @animal[0] jumps over the lazy @animal[1]\";\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# interpolate array elements:\n    my @animal = (\"fox\", \"dog\");\n    say 'The quick brown @animal[0] jumps over the lazy @animal[1]';\n    say \"The quick brown @animal[0] jumps over the lazy @animal[1]\";\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 7388,
                  "line": 274,
                  "column": 1
                },
                "end": {
                  "offset": 7593,
                  "line": 278,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# interpolate hash elements:\nmy %animal = (quick => 'fox', lazy => 'dog');\nsay 'The quick brown %animal{\\'quick\\'} jumps over the lazy %animal{\\'lazy\\'}.';\nsay \"The quick brown %animal{'quick'} jumps over the lazy %animal{'lazy'}.\";\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# interpolate hash elements:\n    my %animal = (quick => 'fox', lazy => 'dog');\n    say 'The quick brown %animal{\\'quick\\'} jumps over the lazy %animal{\\'lazy\\'}.';\n    say \"The quick brown %animal{'quick'} jumps over the lazy %animal{'lazy'}.\";\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 7594,
                  "line": 279,
                  "column": 1
                },
                "end": {
                  "offset": 7843,
                  "line": 283,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# interpolate methods, closures, and functions:\nsay '@animal.elems() {@animal.elems} &elems(@animal)';\nsay \"@animal.elems() {@animal.elems} &elems(@animal)\";\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# interpolate methods, closures, and functions:\n    say '@animal.elems() {@animal.elems} &elems(@animal)';\n    say \"@animal.elems() {@animal.elems} &elems(@animal)\";\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 7844,
                  "line": 284,
                  "column": 1
                },
                "end": {
                  "offset": 8014,
                  "line": 287,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 5874,
              "line": 223,
              "column": 1
            },
            "end": {
              "offset": 8024,
              "line": 289,
              "column": 1
            }
          },
          "id": "E9bV7IkJHZPxm6R4vhmef"
        },
        {
          "text": "\n# literal whitespace\nmy $squot = '    The quick brown fox jumps over the lazy dog.\n\tdog.';\nmy $dquot = \"    The quick brown fox jumps over the lazy\n\tdog.\";\nsay $squot;\nsay $dquot;\n\n# Double-quotes interpolate special backslash values,\n# but single-quotes do not\nsay 'The quick brown fox\\n\\tjumps over the lazy dog\\n';\nsay \"The quick brown fox\\n\\tjumps over the lazy dog\\n\";\n\n# Variables\nmy $var1 = 'dog' ;\nsay 'The quick brown fox jumps over the lazy $var1';\nsay \"The quick brown fox jumps over the lazy $var1\";\n\n# interpolate array elements:\nmy @animal = (\"fox\", \"dog\");\nsay 'The quick brown @animal[0] jumps over the lazy @animal[1]';\nsay \"The quick brown @animal[0] jumps over the lazy @animal[1]\";\n\n# interpolate hash elements:\nmy %animal = (quick => 'fox', lazy => 'dog');\nsay 'The quick brown %animal{\\'quick\\'} jumps over the lazy %animal{\\'lazy\\'}.';\nsay \"The quick brown %animal{'quick'} jumps over the lazy %animal{'lazy'}.\";\n\n# interpolate methods, closures, and functions:\nsay '@animal.elems() {@animal.elems} &elems(@animal)';\nsay \"@animal.elems() {@animal.elems} &elems(@animal)\";\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 8024,
              "line": 289,
              "column": 1
            },
            "end": {
              "offset": 9121,
              "line": 322,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Perl's Quote-like Operators\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Perl's Quote-like Operators\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 9133,
                      "line": 324,
                      "column": 1
                    },
                    "end": {
                      "offset": 9168,
                      "line": 325,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 9133,
                  "line": 324,
                  "column": 1
                },
                "end": {
                  "offset": 9168,
                  "line": 325,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Perl's-Quote-like-Operators"
            },
            {
              "type": "blankline"
            },
            {
              "text": "It's often useful to use something other than single or double quotes\nwhen declaring strings. To do so use the q// and qq// quote operators,\nwhich provide advanced interpolation control:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It's often useful to use something other than single or double quotes\nwhen declaring strings. To do so use the q// and qq// quote operators,\nwhich provide advanced interpolation control:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 9169,
                  "line": 326,
                  "column": 1
                },
                "end": {
                  "offset": 9356,
                  "line": 329,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# Single quoted strings\nsay 'I have to escape my \\'single quotes\\' in this string';\nsay q/This string allows 'single quotes' seamlessly/;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# Single quoted strings\n    say 'I have to escape my \\'single quotes\\' in this string';\n    say q/This string allows 'single quotes' seamlessly/;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 9357,
                  "line": 330,
                  "column": 1
                },
                "end": {
                  "offset": 9507,
                  "line": 333,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# Double quoted strings\nsay \"I have to escape my \\\"double quotes\\\" in this string\";\nsay qq/This string allows \"double quotes\" seamlessly/;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# Double quoted strings\n    say \"I have to escape my \\\"double quotes\\\" in this string\";\n    say qq/This string allows \"double quotes\" seamlessly/;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 9508,
                  "line": 334,
                  "column": 1
                },
                "end": {
                  "offset": 9659,
                  "line": 337,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The slashes in q// and qq// can be replaced with most of the\ndelimiters that worked in Perl 5. All of Unicode above Latin-1 is reserved\nfor user-defined quotes.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The slashes in q// and qq// can be replaced with most of the\ndelimiters that worked in Perl 5. All of Unicode above Latin-1 is reserved\nfor user-defined quotes.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 9660,
                  "line": 338,
                  "column": 1
                },
                "end": {
                  "offset": 9821,
                  "line": 341,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# Single quoted strings\nsay q'Many delimiters are available for quoting';\nsay q\"Many delimiters are available for quoting\";\nsay q`Many delimiters are available for quoting`;\nsay q[Many delimiters are available for quoting];\nsay q<Many delimiters are available for quoting>;\nsay q{Many delimiters are available for quoting};\nsay q?Many delimiters are available for quoting?;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# Single quoted strings\n    say q'Many delimiters are available for quoting';\n    say q\"Many delimiters are available for quoting\";\n    say q`Many delimiters are available for quoting`;\n    say q[Many delimiters are available for quoting];\n    say q<Many delimiters are available for quoting>;\n    say q{Many delimiters are available for quoting};\n    say q?Many delimiters are available for quoting?;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 9822,
                  "line": 342,
                  "column": 1
                },
                "end": {
                  "offset": 10228,
                  "line": 350,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# But not the colon B<:>\nq:illegal_perl6:; #legal perl 5\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# But not the colon B<:>\n    q:illegal_perl6:; #legal perl 5\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 10229,
                  "line": 351,
                  "column": 1
                },
                "end": {
                  "offset": 10294,
                  "line": 353,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# Also a space is needed below, because q() is a function call\nsay q (Many delimiters are available for quoting);\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# Also a space is needed below, because q() is a function call\n    say q (Many delimiters are available for quoting);\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 10295,
                  "line": 354,
                  "column": 1
                },
                "end": {
                  "offset": 10417,
                  "line": 356,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Advanced Interpolation Control\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Advanced Interpolation Control\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 10418,
                      "line": 357,
                      "column": 1
                    },
                    "end": {
                      "offset": 10456,
                      "line": 358,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 10418,
                  "line": 357,
                  "column": 1
                },
                "end": {
                  "offset": 10456,
                  "line": 358,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Advanced-Interpolation-Control"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Perl 6 allows very fine control over string quoting using the q//\nquote operator with specialized adverbs. For instance, q:s// signifies\nthat we only want scalars interpolated. These adverbs can also be\nexpressed in a short form, for instance q:s// can be expressed as\nqs//.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Perl 6 allows very fine control over string quoting using the q//\nquote operator with specialized adverbs. For instance, q:s// signifies\nthat we only want scalars interpolated. These adverbs can also be\nexpressed in a short form, for instance q:s// can be expressed as\nqs//.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 10457,
                  "line": 359,
                  "column": 1
                },
                "end": {
                  "offset": 10732,
                  "line": 364,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": ":s          :scalar         Interpolate $ vars\n:a          :array          Interpolate @ vars\n:h          :hash           Interpolate % vars\n:f          :function       Interpolate & calls\n:c          :closure        Interpolate {...} expressions\n:b          :backslash      Interpolate \\n, \\t, etc. (implies :m)\n:w          :words          Split result on words (no quote protection)\n:ww         :quotewords     Split result on words (with quote protection)\n:x          :exec           Execute as command and return results\n:t          :to             Interpret result as heredoc terminator\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": ":s          :scalar         Interpolate $ vars\n    :a          :array          Interpolate @ vars\n    :h          :hash           Interpolate % vars\n    :f          :function       Interpolate & calls\n    :c          :closure        Interpolate {...} expressions\n    :b          :backslash      Interpolate \\n, \\t, etc. (implies :m)\n    :w          :words          Split result on words (no quote protection)\n    :ww         :quotewords     Split result on words (with quote protection)\n    :x          :exec           Execute as command and return results\n    :t          :to             Interpret result as heredoc terminator\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 10733,
                  "line": 365,
                  "column": 1
                },
                "end": {
                  "offset": 11365,
                  "line": 375,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# Raw quoting: no escaping at all (unless otherwise adverbed)\nsay Q/(no interpolation) even backslash has no special meaning: \\\\ \\/;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# Raw quoting: no escaping at all (unless otherwise adverbed)\n    say Q/(no interpolation) even backslash has no special meaning: \\\\ \\/;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 11366,
                  "line": 376,
                  "column": 1
                },
                "end": {
                  "offset": 11507,
                  "line": 378,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# Single quoting:\nsay 'Lots of options for single quotes';\nsay q/Lots of options for single quotes/;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# Single quoting:\n    say 'Lots of options for single quotes';\n    say q/Lots of options for single quotes/;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 11508,
                  "line": 379,
                  "column": 1
                },
                "end": {
                  "offset": 11621,
                  "line": 382,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# Double quoting: interpolates scalars, arrays, hashes, functions,\n# closures, and backslash codes\nsay \"Plenty of ways to double quote too\";\nsay qq/Plenty of ways to double quote too/;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# Double quoting: interpolates scalars, arrays, hashes, functions,\n    # closures, and backslash codes\n    say \"Plenty of ways to double quote too\";\n    say qq/Plenty of ways to double quote too/;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 11622,
                  "line": 383,
                  "column": 1
                },
                "end": {
                  "offset": 11823,
                  "line": 387,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# Interpolate scalars only:\nsay q:s/The quick brown $var1 jumps over the lazy dog/;\nsay qs/The quick brown $var1 jumps over the lazy dog/;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# Interpolate scalars only:\n    say q:s/The quick brown $var1 jumps over the lazy dog/;\n    say qs/The quick brown $var1 jumps over the lazy dog/;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 11824,
                  "line": 388,
                  "column": 1
                },
                "end": {
                  "offset": 11975,
                  "line": 391,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# Interpolate @ vars only:\nsay q:a/The quick brown @animal[0] jumps over the lazy @animal[1]/;\nsay qa/The quick brown @animal[0] jumps over the lazy @animal[1]/;\nsay qa/We have @animal.elems() elements in @animal[]/;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# Interpolate @ vars only:\n    say q:a/The quick brown @animal[0] jumps over the lazy @animal[1]/;\n    say qa/The quick brown @animal[0] jumps over the lazy @animal[1]/;\n    say qa/We have @animal.elems() elements in @animal[]/;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 11976,
                  "line": 392,
                  "column": 1
                },
                "end": {
                  "offset": 12209,
                  "line": 396,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# interpolate % vars only:\nsay q:h/The quick brown %animal{'quick'} jumps over the.../;\nsay qh/The quick brown %animal{'quick'} jumps over the.../;\nsay qh/We have %animal.elems() key in %animal{}/;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# interpolate % vars only:\n    say q:h/The quick brown %animal{'quick'} jumps over the.../;\n    say qh/The quick brown %animal{'quick'} jumps over the.../;\n    say qh/We have %animal.elems() key in %animal{}/;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 12210,
                  "line": 397,
                  "column": 1
                },
                "end": {
                  "offset": 12424,
                  "line": 401,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# interpolate functions only: both & and () are required\nsub get_animal ($tag) { return %animal{$tag}; }\nsay q:f/The quick brown &get_animal('quick') jumps.../;\nsay qf/The quick brown &get_animal('quick') jumps.../;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# interpolate functions only: both & and () are required\n    sub get_animal ($tag) { return %animal{$tag}; }\n    say q:f/The quick brown &get_animal('quick') jumps.../;\n    say qf/The quick brown &get_animal('quick') jumps.../;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 12425,
                  "line": 402,
                  "column": 1
                },
                "end": {
                  "offset": 12657,
                  "line": 406,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# interpolate closures only:\nsay q:c/The quick brown { 'fox'; } jumps.../;\nsay qc/The quick brown { 'fox'; } jumps.../;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# interpolate closures only:\n    say q:c/The quick brown { 'fox'; } jumps.../;\n    say qc/The quick brown { 'fox'; } jumps.../;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 12658,
                  "line": 407,
                  "column": 1
                },
                "end": {
                  "offset": 12790,
                  "line": 410,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# interpolate backslash codes only:\nsay q:b/The quick brown fox\\n\\tJumps over the lazy dog/;\nsay qb/The quick brown fox\\n\\tJumps over the lazy dog/;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# interpolate backslash codes only:\n    say q:b/The quick brown fox\\n\\tJumps over the lazy dog/;\n    say qb/The quick brown fox\\n\\tJumps over the lazy dog/;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 12791,
                  "line": 411,
                  "column": 1
                },
                "end": {
                  "offset": 12952,
                  "line": 414,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Adverbs can be strung together to make a specialized quoting\nenvironment for your string.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Adverbs can be strung together to make a specialized quoting\nenvironment for your string.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 12953,
                  "line": 415,
                  "column": 1
                },
                "end": {
                  "offset": 13043,
                  "line": 417,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# interpolate only scalars and array variables:\nsay q:s:a/The quick brown $fox jumps over the lazy @animal[1]/;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# interpolate only scalars and array variables:\n    say q:s:a/The quick brown $fox jumps over the lazy @animal[1]/;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 13044,
                  "line": 418,
                  "column": 1
                },
                "end": {
                  "offset": 13164,
                  "line": 420,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Special adverbs and synonyms\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Special adverbs and synonyms\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 13165,
                      "line": 421,
                      "column": 1
                    },
                    "end": {
                      "offset": 13201,
                      "line": 422,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 13165,
                  "line": 421,
                  "column": 1
                },
                "end": {
                  "offset": 13201,
                  "line": 422,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Special-adverbs-and-synonyms"
            },
            {
              "type": "blankline"
            },
            {
              "text": "=over 4\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "=over 4\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 13202,
                  "line": 423,
                  "column": 1
                },
                "end": {
                  "offset": 13210,
                  "line": 424,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": ":w Split on words\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": ":w Split on words\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 13211,
                          "line": 425,
                          "column": 1
                        },
                        "end": {
                          "offset": 13235,
                          "line": 426,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 13211,
                      "line": 425,
                      "column": 1
                    },
                    "end": {
                      "offset": 13235,
                      "line": 426,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "J6caP0nX7z5jaPK0eKQJr"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "my ($fox,$dog)     = q:w/brown lazy/;\nmy @array          = qw/fox dog/;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "my ($fox,$dog)     = q:w/brown lazy/;\n    my @array          = qw/fox dog/;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 13236,
                  "line": 427,
                  "column": 1
                },
                "end": {
                  "offset": 13316,
                  "line": 429,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The <> synonym for q:w has many uses\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The <"
                },
                {
                  "type": "text",
                  "value": ">"
                },
                {
                  "type": "text",
                  "value": " synonym for q:w has many uses\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 13317,
                  "line": 430,
                  "column": 1
                },
                "end": {
                  "offset": 13354,
                  "line": 431,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "@animals           = <fox dog monkey>;\nsay @animals[0]    ; # fox\n%animal            = <brown fox lazy dog>;\nsay %animal<lazy>  ; # dog\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "@animals           = <fox dog monkey>;\n    say @animals[0]    ; # fox\n    %animal            = <brown fox lazy dog>;\n    say %animal<lazy>  ; # dog\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 13355,
                  "line": 432,
                  "column": 1
                },
                "end": {
                  "offset": 13507,
                  "line": 436,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": ":ww Split on Quoted Words\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": ":ww Split on Quoted Words\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 13508,
                          "line": 437,
                          "column": 1
                        },
                        "end": {
                          "offset": 13540,
                          "line": 438,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 13508,
                      "line": 437,
                      "column": 1
                    },
                    "end": {
                      "offset": 13540,
                      "line": 438,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "qUDix1ZiJ8mOhTm3muCbX"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "@animals           = q:ww<\"brown fox\" \"lazy dog\">;\n# Quoted words and variable interpolation\n@animals           = qq:ww/\"brown $fox\" \"lazy %animal{'lazy'}\"/;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "@animals           = q:ww<\"brown fox\" \"lazy dog\">;\n    # Quoted words and variable interpolation\n    @animals           = qq:ww/\"brown $fox\" \"lazy %animal{'lazy'}\"/;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 13541,
                  "line": 439,
                  "column": 1
                },
                "end": {
                  "offset": 13711,
                  "line": 442,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The «» synonym for qq:ww has many uses, also spelled <<>>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The «"
                },
                {
                  "type": "text",
                  "value": "»"
                },
                {
                  "type": "text",
                  "value": " synonym for qq:ww has many uses, also spelled <<>"
                },
                {
                  "type": "text",
                  "value": ">"
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 13712,
                  "line": 443,
                  "column": 1
                },
                "end": {
                  "offset": 13770,
                  "line": 444,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "($fox,$dog)          = «brown lazy»;\n($fox,$dog)          = <<brown lazy>>; # same\n%animal              = « $fox fox lazy \"lazy dog\" »;\nsay %animal« $dog »  ; # lazy dog\nsay %animal<<$dog>>    ; # lazy dog\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "($fox,$dog)          = «brown lazy»;\n    ($fox,$dog)          = <<brown lazy>>; # same\n    %animal              = « $fox fox lazy \"lazy dog\" »;\n    say %animal« $dog »  ; # lazy dog\n    say %animal<<$dog>>    ; # lazy dog\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 13771,
                  "line": 445,
                  "column": 1
                },
                "end": {
                  "offset": 13997,
                  "line": 450,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": ":x Execute\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": ":x Execute\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 13998,
                          "line": 451,
                          "column": 1
                        },
                        "end": {
                          "offset": 14015,
                          "line": 452,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 13998,
                      "line": 451,
                      "column": 1
                    },
                    "end": {
                      "offset": 14015,
                      "line": 452,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "mlWC2OzQOI0a11X8RFnX4"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "TODO\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "TODO\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 14016,
                  "line": 453,
                  "column": 1
                },
                "end": {
                  "offset": 14021,
                  "line": 454,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "=back\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "=back\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 14022,
                  "line": 455,
                  "column": 1
                },
                "end": {
                  "offset": 14028,
                  "line": 456,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": ":t Defining Multiline Strings (Here Documents)\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": ":t Defining Multiline Strings (Here Documents)\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 14029,
                          "line": 457,
                          "column": 1
                        },
                        "end": {
                          "offset": 14082,
                          "line": 458,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 14029,
                      "line": 457,
                      "column": 1
                    },
                    "end": {
                      "offset": 14082,
                      "line": 458,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "SkMbV38I7JeUVRI9uacac"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "Multiline strings (here documents) can be defined using the q// and qq//\noperators with the :to adverb added.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Multiline strings (here documents) can be defined using the q// and qq//\noperators with the :to adverb added.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 14083,
                  "line": 459,
                  "column": 1
                },
                "end": {
                  "offset": 14193,
                  "line": 461,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# A double quoted multiline string:\nmy $a = qq:to/EOF/;\n    This is a multiline here document terminated by EOF on a\n    line by itself with any amount of whitespace before or\n    after the termination string. Leading whitespace equivalent\n    to the indentation of the delimiter will be removed from\n    all preceding lines.\n    EOF\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# A double quoted multiline string:\n    my $a = qq:to/EOF/;\n        This is a multiline here document terminated by EOF on a\n        line by itself with any amount of whitespace before or\n        after the termination string. Leading whitespace equivalent\n        to the indentation of the delimiter will be removed from\n        all preceding lines.\n        EOF\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 14194,
                  "line": 462,
                  "column": 1
                },
                "end": {
                  "offset": 14560,
                  "line": 470,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "When defined in this way the whitespace at the start of each line will\nbe removed up to the same amount of indentation used by the closing\ndelimiter, a tab character being equal to 8 normal spaces.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "When defined in this way the whitespace at the start of each line will\nbe removed up to the same amount of indentation used by the closing\ndelimiter, a tab character being equal to 8 normal spaces.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 14561,
                  "line": 471,
                  "column": 1
                },
                "end": {
                  "offset": 14759,
                  "line": 474,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A here document can be as exacting with adverbs as any other quoted\nstring. For instance you can specify that you only want scalars\ninterpolated by adding the :s adverb.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A here document can be as exacting with adverbs as any other quoted\nstring. For instance you can specify that you only want scalars\ninterpolated by adding the :s adverb.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 14760,
                  "line": 475,
                  "column": 1
                },
                "end": {
                  "offset": 14930,
                  "line": 478,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "# This multiline string will only interpolate scalars\nmy $multiline = q:s:to/EOF/;\n    This $scalar will be interpolated, but this @array won't be.\n    EOF\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "# This multiline string will only interpolate scalars\n    my $multiline = q:s:to/EOF/;\n        This $scalar will be interpolated, but this @array won't be.\n        EOF\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 14931,
                  "line": 479,
                  "column": 1
                },
                "end": {
                  "offset": 15103,
                  "line": 483,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "These adverbs apply to the body of the heredoc, not to the terminator,\nbecause the terminator has to be known at compile time. This means\nthat q:s:to/EO$thing/ doesn't do what you mean.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "These adverbs apply to the body of the heredoc, not to the terminator,\nbecause the terminator has to be known at compile time. This means\nthat q:s:to/EO$thing/ doesn't do what you mean.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 15104,
                  "line": 484,
                  "column": 1
                },
                "end": {
                  "offset": 15290,
                  "line": 487,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9121,
              "line": 322,
              "column": 1
            },
            "end": {
              "offset": 15300,
              "line": 489,
              "column": 1
            }
          },
          "id": "g3BmQ-iC48s9NwCqC8X0J"
        },
        {
          "text": "\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 15300,
              "line": 489,
              "column": 1
            },
            "end": {
              "offset": 15340,
              "line": 491,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Substrings\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/01strings/01-01substrings.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "qtZmg6BWKyrdXjEgjDsPp",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Substrings\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Substrings\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 60,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 60,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "s1nqf8IJ8ncDLw5mQ2Qtg"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 61,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 83,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 61,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 83,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "0kiPjASJiKIJbgrgTyt9x"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to access or modify a portion of a string, not the whole thing.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to access or modify a portion of a string, not the whole thing.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 84,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 157,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 167,
              "line": 14,
              "column": 1
            }
          },
          "id": "yxeYmmsGtU9vpJjfdNGuY"
        },
        {
          "text": "\nmy ($string, $offset, $count) = ('Rakudo is da bomb', 2, 7);\nsay $string.substr($offset, $count);\nsay $string.substr($offset);\n\n# want to replace everything but the first two letters with the string\n# \"diators are nice in winter\"\n# this code works in Perl 5, but not in Perl 6 since strings are immutable\n# substr($string, $offset) = \"diators are nice in winter\";\n# say $string;\n$string = $string.substr(0, $offset) ~ \"diators are nice in winter\";\nsay $string;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 167,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 669,
              "line": 28,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Swapping values\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/01strings/01-03exchanging-values.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "BshPZsCiscwVIATIvu6tF",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Swapping values\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Swapping values\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 65,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 65,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "VNslJLm9lio-8dfogY30E"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 66,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 88,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 66,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 88,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "rtsRK3tHJnUevTxe-wdat"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to swap values without using a temporary variable\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to swap values without using a temporary variable\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 89,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 148,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 158,
              "line": 14,
              "column": 1
            }
          },
          "id": "rA2jSs5KrRNek-TIJ8Znu"
        },
        {
          "text": "\nmy ($x, $y) = (3, 2);\n($x, $y) = ($y, $x);\n# XXX Binding (:=) is more efficient, because it doesn't copy the values.\n# XXX Compile-time binding (::=) could not be used here, as the cells\n#     would be swapped at compile-time, not runtime. ::= doesn't have an effect\n#     at runtime:\n#         $a ::= $b;  # sugar for\n#         BEGIN { $a := $b }\nsay $x;\nsay $y;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 158,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 563,
              "line": 27,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Converting between characters and numbers.\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/01strings/01-04converting-values.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "8uLEDCB9C61-638FZdcsD",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Converting between characters and numbers.\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Converting between characters and numbers.\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 92,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 92,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "bqmOjUZwtcfkK7CE8Z6Zb"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 93,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 115,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 93,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 115,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "D_C5qj3ct-ZGpiNbCPgDo"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to convert characters to their codepoint number value or vice-versa\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to convert characters to their codepoint number value or vice-versa\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 116,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 193,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 203,
              "line": 14,
              "column": 1
            }
          },
          "id": "JZSFMm8ScF-fUzIqJI9vX"
        },
        {
          "text": "\nmy $char = 'a';\nmy $num  = $char.ord;\nsay $num;\nmy $char2 = $num.chr;\nsay $char2;\nmy $copyright = '©';\nsay $copyright ~ \" : \" ~ $copyright.ord ~ \" : \" ~ $copyright.ord.chr;\n\n$char = 'foo';\n# ords returns the codepoints of all char in a string\nsay $char ~ \" : \" ~ $char.ords;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 203,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 519,
              "line": 28,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Using Named Unicode Chars\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/01strings/01-05namedunicode.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Ase6NgYa8blhmeg4VZYmi",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Using Named Unicode Chars\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Using Named Unicode Chars\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "tqxbqI9UfDd74oVlpQihM"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 76,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 90,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 76,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 90,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "cfr5mW6Ol6M40p9DdVTNd"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 100,
              "line": 12,
              "column": 1
            }
          },
          "id": "zq3GrOpx5cxaJarHDYtPK"
        },
        {
          "text": "\nsay \"\\c[REGISTERED SIGN]\";\n\n# POUTING CAT FACE\n\"\\x1f63E\".say;\n\"\\x1f63E\".uniname.say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 100,
              "line": 12,
              "column": 1
            },
            "end": {
              "offset": 226,
              "line": 20,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Reversing a String by Word or Character\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/01strings/01-07reversing-strings.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "ez8mP6A8r75zOrL55ak8M",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Reversing a String by Word or Character\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Reversing a String by Word or Character\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 89,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 89,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "W3q7mbRKiPHLHsLJREwPF"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 90,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 104,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 90,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 104,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "ey68qYw3aCYbj5lwmugpL"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to reverse words or characters in a string\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to reverse words or characters in a string\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 105,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 157,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 167,
              "line": 14,
              "column": 1
            }
          },
          "id": "L2vEAMSE3pFdtUJKv_sZO"
        },
        {
          "text": "\nmy $string = \"The Magic Words are Squeamish Ossifrage\";\n\n# reverse the characters in a scalar\n\nsay $string.flip;\n\n# reverse the words in a scalar\n\nsay $string.split(\" \").reverse.join(\" \");\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 167,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 397,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Upper/Lower Case\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/01strings/01-13upper-lower-case.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "F4OnIwad5asf0WzUWjYMO",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Upper/Lower Case\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Upper/Lower Case\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 66,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 66,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "X-TTb_8mPof1T5ORDds8Q"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 67,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 81,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 67,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 81,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "68y7dHtpCFLBERhZp4fUV"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You have a string and want to upper/lower case it\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You have a string and want to upper/lower case it\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 82,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 132,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 142,
              "line": 14,
              "column": 1
            }
          },
          "id": "P3dnkqIu6vSgOdaUSd3bP"
        },
        {
          "text": "\nmy $string = \"the cat sat on the mat\";\n\nsay $string=$string.uc; # THE CAT SAT ON THE MAT\n\nsay $string.=lc;        # the cat sat on the mat\n\nsay $string.wordcase;   # The Cat Sat On The Mat\n\n$string.tc.say;         # The cat sat on the mat\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 142,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 422,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Trimming whitespace from both ends of a string\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/01strings/01-19trim-whitespace.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "93KxDNhgytm-8SX3YIdpw",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Trimming whitespace from both ends of a string\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Trimming whitespace from both ends of a string\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 96,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 96,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "7L_CzZs0J7ZIkcOQ35ImN"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 97,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 111,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 97,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 111,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "cNodPyuU_QaZ76u74ZLMH"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You have a string with leading and/or trailing whitespace\nyou wish to remove\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You have a string with leading and/or trailing whitespace\nyou wish to remove\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 112,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 189,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 199,
              "line": 15,
              "column": 1
            }
          },
          "id": "gixrk8fA5UKPGVe-uVv62"
        },
        {
          "text": "\nmy $string = \"\\t the cat sat on the mat  \";\n\n$string.=trim;\n\nsay :$string.perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 199,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 320,
              "line": 23,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Soundex Matching\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/01strings/01-22soundex-matching.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Ud-mijnekck48_wIMMGWG",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Soundex Matching\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Soundex Matching\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 66,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 66,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "i1lE-bmHC-B_LhMin3wt5"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 67,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 81,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 67,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 81,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "ClfekHvfDmvo7dKDtPkim"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You have two surnames and want to know if they sound similar\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You have two surnames and want to know if they sound similar\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 82,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 143,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 153,
              "line": 14,
              "column": 1
            }
          },
          "id": "v4AqpHvV43CEeZ19J79PW"
        },
        {
          "text": "\nuse Algorithm::Soundex;\n\nmy Algorithm::Soundex $s .= new();\n\nsay  $s.soundex(\"Smith\");\nsay  $s.soundex(\"Smythe\");\nsay  $s.soundex(\"Bloggs\");\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 153,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 335,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Valid Number\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/02numbers/02-01valid-number.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "53blXEuIJr4os5UG-zxA0",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Valid Number\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Valid Number\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 62,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 62,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "IeaT5UE0haR4lMMlXoIrZ"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Steve Mynott\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Steve Mynott\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 63,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 84,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 63,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 84,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "OxjoXAdYN04TFDBY07vRF"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to check if a string is a valid number.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to check if a string is a valid number.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 85,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 134,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Most of the time you will not need to do this.  Rather then testing for a\nscalar's numerical nature you can ensure that the variable contains a number\nby setting its type.  Assigning a number to that variable will cause it to\nbe coerced into an integer or a number.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Most of the time you will not need to do this.  Rather then testing for a\nscalar's numerical nature you can ensure that the variable contains a number\nby setting its type.  Assigning a number to that variable will cause it to\nbe coerced into an integer or a number.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 135,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 401,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Ensure that a variable is used to store a real number.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Ensure that a variable is used to store a real number.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 402,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 457,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "my Num $number;\n",
              "margin": "  ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "my Num $number;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 458,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 476,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Ensure that a variable is used to store an integer.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Ensure that a variable is used to store an integer.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 477,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 529,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "my Int $integer;\n",
              "margin": "  ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "my Int $integer;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 530,
                  "line": 24,
                  "column": 1
                },
                "end": {
                  "offset": 549,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sometimes you need to validate a string from some source corresponds to a\nreal or an integer.  In this situation compare it against the rule for\nintegers or reals.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sometimes you need to validate a string from some source corresponds to a\nreal or an integer.  In this situation compare it against the rule for\nintegers or reals.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 550,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 714,
                  "line": 29,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 724,
              "line": 31,
              "column": 1
            }
          },
          "id": "h8Xa_OwoVX4h2-nJ1m9I9"
        },
        {
          "text": "\ntype(12);\n\ntype(14.12);\n\nsub type ( $string) {\n    print $string ~ ' is a ';\n    given $string {\n        when Int { say \"Integer\"; }\n        when Rat { say \"Rational\"; }\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 724,
              "line": 31,
              "column": 1
            },
            "end": {
              "offset": 943,
              "line": 45,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Convert to/from Roman Numerals\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/02numbers/02-05-roman-numerals.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Zp67TGdJAyEK6AuDrYtbU",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Convert to/from Roman Numerals\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Convert to/from Roman Numerals\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 80,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 80,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "KmRVtJzf99LSLsRuAlo_0"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Rosetta Code\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Rosetta Code\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 81,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 102,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 81,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 102,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "037DJ1B_ZPAobRBuMiiMF"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to convert to/from Roman Numerals\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to convert to/from Roman Numerals\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 103,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 146,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 156,
              "line": 14,
              "column": 1
            }
          },
          "id": "gZct8kUqRdMJh8kZgzaEO"
        },
        {
          "text": "\nsay to-roman(2015); # ==> MMXV\n\nsay from-roman('MMXV'); # ==> 2015\n\nmulti sub to-roman (0) { '' }\nmulti sub to-roman (Int $n) {\n    my %symbols =\n    1 => \"I\", 5 => \"V\", 10 => \"X\", 50 => \"L\", 100 => \"C\",\n    500 => \"D\", 1_000 => \"M\";\n\n    my @subtractors =\n    1_000, 100,  500, 100,  100, 10,  50, 10,  10, 1,  5, 1,  1, 0;\n\n    for @subtractors -> $cut, $minus {\n        $n >= $cut\n            and return %symbols{$cut} ~ to-roman($n - $cut);\n        $n >= $cut - $minus\n            and return %symbols{$minus} ~ to-roman($n + $minus);\n    }\n}\n\nsub from-roman($r) {\n    [+] gather $r.uc ~~ /\n        ^\n        [\n        | M  { take 1000 }\n        | CM { take 900 }\n        | D  { take 500 }\n        | CD { take 400 }\n        | C  { take 100 }\n        | XC { take 90 }\n        | L  { take 50 }\n        | XL { take 40 }\n        | X  { take 10 }\n        | IX { take 9 }\n        | V  { take 5 }\n        | IV { take 4 }\n        | I  { take 1 }\n        ]+\n        $\n    /;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 156,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 1168,
              "line": 59,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Logarithms\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/02numbers/02-12taking-logarithms.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "9Yyxp8iY1sJEXj5KOmUx3",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Logarithms\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Logarithms\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 60,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 60,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "ME8l0LUuVtdRxMlrNa9Zw"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "uzluisf\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "uzluisf\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 61,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 77,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 61,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 77,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "1_658HRCncrPJ_Bq00HJv"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to take logarithms in several bases.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to take logarithms in several bases.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 78,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 124,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 134,
              "line": 14,
              "column": 1
            }
          },
          "id": "FamxNiFgB2AM1rxhGvMpq"
        },
        {
          "text": "\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 134,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 135,
              "line": 15,
              "column": 1
            }
          }
        },
        {
          "margin": "",
          "type": "block",
          "content": [
            {
              "type": "text",
              "value": "For logarithms to base 10\n"
            }
          ],
          "name": "comment",
          "config": [],
          "location": {
            "start": {
              "offset": 135,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 170,
              "line": 16,
              "column": 1
            }
          },
          "id": "PdSsZPtBMy_kLQA-kjnyy"
        },
        {
          "text": "\nput log10 100; #=> 2\nput 250.log10; #=> 2.397940008672037\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 170,
              "line": 16,
              "column": 1
            },
            "end": {
              "offset": 230,
              "line": 20,
              "column": 1
            }
          }
        },
        {
          "margin": "",
          "type": "block",
          "content": [
            {
              "type": "text",
              "value": "For logarithms to any base (or base e by default)\n"
            }
          ],
          "name": "comment",
          "config": [],
          "location": {
            "start": {
              "offset": 230,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 289,
              "line": 21,
              "column": 1
            }
          },
          "id": "e31VQKz0SC97f1S0vq6wY"
        },
        {
          "text": "\nput log e³;      #=> 3\nput log 6561, 9; #=> 4\nput 1024.log(2); #=> 10\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 289,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 400,
              "line": 27,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Complex Numbers\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/02numbers/02-14complex-number.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "ek7_cuRZK-is3yyuvAktQ",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Complex Numbers\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Complex Numbers\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 65,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 65,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "dRlHQdmrgaHNcN-34GMep"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 66,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 80,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 66,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 80,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "8rGAbwap0sBs9TX81_BM3"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Math with Complex Numbers\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Math with Complex Numbers\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 81,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 107,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 117,
              "line": 14,
              "column": 1
            }
          },
          "id": "pk1nWY_rOywDR1zTne366"
        },
        {
          "text": "\nsay (3+5i) * (2-2i); # 16+4i\n\nsay sqrt(3+4i); # 2+1i\n\nsay abs(3+4i); # 5 (absolute value of complex number or \"modulus\")\n\nsay (3+4i).re; # 3 (real part)\n\nsay (3+4i).im; # 4 (imaginary part)\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 117,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 348,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Convert Bases\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/02numbers/02-15convert-bases.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Z_UHdztig4Bp8lsVcb70o",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Convert Bases\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Convert Bases\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 63,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 63,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "0j3cBVE8S2P8ftnDgP6Kd"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 64,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 78,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 64,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 78,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "w28lrzFbX6YmqTEium_GJ"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Convert between various numerical bases\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Convert between various numerical bases\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 79,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 119,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 129,
              "line": 14,
              "column": 1
            }
          },
          "id": "mZMQF2imfUATTu2yhaWuw"
        },
        {
          "text": "\nsay 0xDEADBEEF;\n\nsay 0o755;\nsay 493.fmt(\"%o\");\n\nsay :16<FEEDFACE>;\nsay 4277009102.base(16);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 129,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 262,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Today's Date\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/03dates-and-times/03-01-todays-date.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "eIyJnhFZOeypCDB1b_Sax",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Today's Date\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Today's Date\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 62,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 62,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "8BhuQak3GS-WkV6Nk6LDA"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 63,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 77,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 63,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 77,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "Jf4WoaBsMBox1TidcFYXa"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want year, month and day for today's date.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want year, month and day for today's date.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 78,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 125,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 135,
              "line": 14,
              "column": 1
            }
          },
          "id": "uVt2gy6bBzMBncgoSt-og"
        },
        {
          "text": "\nmy $d = Date.today;\n\nsay \"{$d.year} {$d.month} {$d.day}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 135,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 234,
              "line": 20,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "DateTime to Epoch Seconds\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/03dates-and-times/03-02-datetime-to-epoch.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "679AKFPf7PJhnxtH0mHsy",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "DateTime to Epoch Seconds\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "DateTime to Epoch Seconds\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "ogHssWKxzFD_T3oL0TJaQ"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 76,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 90,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 76,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 90,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "-WwQRvPfn2WrolDtmwdtE"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want a datetime (ISO 8601) as seconds past the epoch.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want a datetime (ISO 8601) as seconds past the epoch.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 91,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 149,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 159,
              "line": 14,
              "column": 1
            }
          },
          "id": "GQRtej64ebEj1by0irEgc"
        },
        {
          "text": "\nmy $dt = DateTime.new(\"1981-06-17T00:00:00Z\");\n\nsay $dt.posix;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 159,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 263,
              "line": 20,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Epoch Seconds to DateTime\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/03dates-and-times/03-03-epoch-to-datetime.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "UMeUVwqU7l-pC2uoHx9Os",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Epoch Seconds to DateTime\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Epoch Seconds to DateTime\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "jPUhBaliW9HAO5AchibtU"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 76,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 90,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 76,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 90,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "kWSIpRkXR4NOJjTSVeeaY"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to convert as seconds past the epoch to a datetime (ISO 8601)\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to convert as seconds past the epoch to a datetime (ISO 8601)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 91,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 162,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 172,
              "line": 14,
              "column": 1
            }
          },
          "id": "bPDOgQNup24PkC_UubMmO"
        },
        {
          "text": "\nmy $now = 1417793234;\nmy $dt = DateTime.new($now);\n\nsay $dt;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 172,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 274,
              "line": 21,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Adding and Subtracting Dates\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/03dates-and-times/03-04-date-add-sub.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "_Etl7LhP6tfoifDr07tXW",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Adding and Subtracting Dates\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Adding and Subtracting Dates\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 78,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 78,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "WxER4uELKlBbEIFHR3tND"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 79,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 93,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 79,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 93,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "7VC223InEQhicowNwde_-"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to calculate a past or future timeday from a given one.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to calculate a past or future timeday from a given one.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 94,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 159,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 169,
              "line": 14,
              "column": 1
            }
          },
          "id": "piQV1Pr4DviRH5UXgiW8M"
        },
        {
          "text": "\n# the past using whole days\n\nmy $wall = Date.new(\"1981-06-17\");\nsay ($wall-28);\n\n# the future with datetimes\n\nmy $dt = DateTime.new(\"1981-06-17T20:00:00Z\");\nsay $dt.later(:week(2));\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 169,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 392,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Subtracting Two Dates From Each other\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/03dates-and-times/03-05-sub-two-dates.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "E94PQv3bq3b-Q1wYd7s4_",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Subtracting Two Dates From Each other\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Subtracting Two Dates From Each other\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 87,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 87,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "3cAVQ5jlXaFmDotCCmELA"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 88,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 102,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 88,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 102,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "Mc-jh8GvwbOQZVT6qU0B7"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Subtracting Two Dates From Each other returning days\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Subtracting Two Dates From Each other returning days\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 103,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 156,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 166,
              "line": 14,
              "column": 1
            }
          },
          "id": "NdLGBSydb8WwIj8Nycj2Z"
        },
        {
          "text": "\n# the past using whole days\n\nmy $past-day = Date.new(\"1966-08-04\");\n\nmy $off-work = Date.new(\"2014-12-05\");\n\nsay $off-work - $past-day ;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 166,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 344,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "From date to week of year, month of year, day of year\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/03dates-and-times/03-06-day-to-num-wmy.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "sVeJSaRXRkynXidThsJM7",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "From date to week of year, month of year, day of year\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "From date to week of year, month of year, day of year\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 103,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 103,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "I0i9lW822ON-dGy42BOI-"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 104,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 118,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 104,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 118,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "oIwzWG3EUbDE8EgAv7Jjj"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You have a date and want week of year, month of year, day of year\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You have a date and want week of year, month of year, day of year\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 119,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 185,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 195,
              "line": 14,
              "column": 1
            }
          },
          "id": "WcjvMUG26I79QsZL61Z1E"
        },
        {
          "text": "\nmy $d = Date.new(\"1966-08-04\");\n\nsay \"{$d.week-number} {$d.month} {$d.day-of-year}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 195,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 321,
              "line": 20,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Hi-Res Timings\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/03dates-and-times/03-09-hires-times.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Js6TlRIWfikxGGPmOIoSg",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Hi-Res Timings\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Hi-Res Timings\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 64,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 64,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "8z57GDgl2HHUgA7T7h7Am"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 65,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 79,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 65,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 79,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "9QTDFOrZo1Azyqf_V9hou"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to measure sub-second timings\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to measure sub-second timings\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 80,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 119,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 129,
              "line": 14,
              "column": 1
            }
          },
          "id": "9Xqz_n21MtMi7gpJrsx2M"
        },
        {
          "text": "\nmy $t0 = DateTime.now.Instant;\n\n# apparently not *quite* 2 secs\n\nsleep 2;\n\nsay  DateTime.now.Instant - $t0;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 129,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 278,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Specifying a list in your program\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/04arrays/04-01specifying-a-list-in-your-program.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "N5PAEx5_NyGqv7qnW-phn",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Specifying a list in your program\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Specifying a list in your program\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 83,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 83,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Fe2BXpsFnAelAj8_9pyL5"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 84,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 106,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 84,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 106,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "vuK9TCfoB6ubzd0W3PDdx"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to include a list in your program.  This is how to initialize arrays.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to include a list in your program.  This is how to initialize arrays.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 107,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 186,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 196,
              "line": 14,
              "column": 1
            }
          },
          "id": "xnn2rE4CC2TXL5vFgOLqq"
        },
        {
          "text": "\n# comma separated list of elements\nmy @a = ('alpha', 'beta', 'gamma');\nsay @a[1];\n\n# angle brackes to autoquote items\n{\n    my @a = <alpha beta gamma>;\n\n    for @a -> $e {\n        say $e;\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 196,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 433,
              "line": 29,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Printing a list with commas\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/04arrays/04-02printing-a-list-with-commas.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "gXX9PKi2v4sULPYmltlZ5",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Printing a list with commas\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Printing a list with commas\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 77,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 77,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "d5e23HibwccNCDooqo463"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 78,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 100,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 78,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 100,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "6_-dGZaB6SuQ7tPWNieDA"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You'd like to print out a list containing an unknown number of elements,\nplacing an \"and\" before the last element and commas between each element if\nthere are more than two.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You'd like to print out a list containing an unknown number of elements,\nplacing an \"and\" before the last element and commas between each element if\nthere are more than two.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 101,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 275,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 285,
              "line": 16,
              "column": 1
            }
          },
          "id": "RaAxN_uFmhS3Syx794ywq"
        },
        {
          "text": "\nmy @a = <alpha beta gamma>;\n\nsay commify_series(['foo']);\nsay commify_series(<this that>);\nsay commify_series(@a);\n\nsub commify_series(@list) {\n    given @list.elems {\n        when 0  { return '' };\n        when 1  { return @list[0] };\n        when 2  { return join \" and \", @list };\n        default { return join(\", \", @list[0 .. $_ -2]) ~ \" and @list[*-1]\" };\n    };\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 285,
              "line": 16,
              "column": 1
            },
            "end": {
              "offset": 697,
              "line": 33,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Iterating Over an Array\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/04arrays/04-05iterating-over-an-array.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "RO5BsQ4Ty-h4tADk5BVsW",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Iterating Over an Array\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Iterating Over an Array\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 73,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 73,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "4EC1IkisiKKVqfDaPV9vg"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 74,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 96,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 74,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 96,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "tAMEN8KPfCuuqysDq-IzH"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to iterate over the elements in an array\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to iterate over the elements in an array\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 97,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 147,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 157,
              "line": 14,
              "column": 1
            }
          },
          "id": "CW1DmiAn-obi-jR66RdTG"
        },
        {
          "text": "\nmy @a = <94 13 97 95 12 13 74 10 47 4 62 47 75 36 25 35 0 71 56 50 72 39 30 93>;\n\nfor @a -> $e {\n    say $e.Str;\n}\n\nsay $_.Str for @a;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 157,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 333,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Traversing a hash\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/05hashes/05-05traversing.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "YgdlnQdOubBtEKjGwy1id",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Traversing a hash\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Traversing a hash\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 67,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 67,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "EJS7VdyF7LCiT4vpRGKgw"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 68,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 90,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 68,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 90,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "FYrIaWQXz4GXoOZCB7ewY"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to perform an action on each entry (i.e., each pair) in a hash.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to perform an action on each entry (i.e., each pair) in a hash.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 91,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 164,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 174,
              "line": 14,
              "column": 1
            }
          },
          "id": "qk8b7pBs_QM-Z0YVqLp6x"
        },
        {
          "text": "\nmy %hash = (\n    'one'   => 'un',\n    'two'   => 'deux',\n    'three' => 'trois'\n);\n\nfor %hash.sort(*.key)>>.kv -> ($key, $value) {\n    say \"The word '$key' is '$value' in French.\";\n}\n\nfor %hash.keys.sort -> $key {\n    say \"$key => %hash{$key}\";\n}\n\nfor %hash.sort {\n    .say;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 174,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 492,
              "line": 34,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Copy and substitute simultaneously \n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/06pattern-matching/06-01-copy-subst.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "8YUhGx8up_NneLwJtDJRv",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Copy and substitute simultaneously \n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Copy and substitute simultaneously \n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "tu7qj42SLVlKMrKE9kCx4"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 86,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 100,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 86,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 100,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "fB0YnkYtcdl6-0e1Ax_7c"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to copy and substitute simultaneously\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to copy and substitute simultaneously\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 101,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 148,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 158,
              "line": 14,
              "column": 1
            }
          },
          "id": "40w3BesuAicK7YnT9glkx"
        },
        {
          "text": "\nmy $src = \"BBC\";\n\n(my $dst = $src ) ~~ s/^B/A/;\n\nsay :$dst.perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 158,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 264,
              "line": 22,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Matching alphabetic wide characters\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/06pattern-matching/06-02-match-letters.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "MEAzS3w2FRT6iqdWhSQRg",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Matching alphabetic wide characters\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Matching alphabetic wide characters\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "cwNL-jadV1TMFe0ORONlz"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 86,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 100,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 86,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 100,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "5k_sOUg-tfAEcJPyjOq2R"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to match alphabetic characters which include unicode\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to match alphabetic characters which include unicode\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 101,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 163,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 173,
              "line": 14,
              "column": 1
            }
          },
          "id": "mvIAR28DekmqTyqV2eaC1"
        },
        {
          "text": "\nmy $var = \"\\c[OGHAM LETTER RUIS]\";\nif $var ~~ /^<:letter>+$/ {   # or just /^<:L>+$/ or even  /^\\w+$/\n    say \"{$var}  is purely alphabetic\";\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 173,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 358,
              "line": 21,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Opening a file\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/07file-access/07-01opening_file.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "m2gYesJDwsKle_OM48HUk",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Opening a file\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Opening a file\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 64,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 64,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "ZVfJTHPK5vgX7wLsWSIVq"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 65,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 87,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 65,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 87,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "hhEslA_wGMhtgWjEJAkRd"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to read or write a file from Perl.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to read or write a file from Perl.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 88,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 132,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 142,
              "line": 14,
              "column": 1
            }
          },
          "id": "zNxDH2j2byaOLtk0KwJ3O"
        },
        {
          "text": "\nmy $path = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, \"07-01opening_file.p6\");\n\nmy $input = open($path, :r)\n    or die \"Could not open $path for reading $!\\n\";\n\nmy $filename = \"test_file\";\nmy $output = open($filename, :w)\n    or die \"Could not open $filename for writing $!\\n\";\n\n\n# File-access modes\n# If you want to use any of the mode parameters you have to put parenthese () after the open.\n# :r      read, this is the defaul open mode\n# :w      write, automatically creating non existing files and emptying existing files\n# :a      append, keep the file intact and enable to write at the end of it\n# :rw     read and write\n# :r, :w\n# :ra     read and append\n# :r, :a\n#      write and read (overwriting a a file) will we have this?\n\n# Closing the file\n$input.close or die $!;\nclose($output);\n\nsay \"ok last\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 142,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 992,
              "line": 43,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Count File Lines\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/08file-contents/08-02-count-lines.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "RJjGRgTuwfV2lrjY694RL",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Count File Lines\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Count File Lines\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 66,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 66,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "qfCMDqGzYslaQ-iVRGr7B"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 67,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 81,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 67,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 81,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "JghlVDXmkMAvMsuM5jPzG"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to count the number of lines in a file\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to count the number of lines in a file\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 82,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 130,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 140,
              "line": 14,
              "column": 1
            }
          },
          "id": "nO0pEx4l1gpkYo7YIn411"
        },
        {
          "text": "\nmy @lines = $*PROGRAM-NAME.IO.lines;\n\nsay @lines.elems;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 140,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 237,
              "line": 20,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Process every word in a file\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/08file-contents/08-03-process-words.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Z7mqi9neYPFj9TnAVlvKg",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Process every word in a file\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Process every word in a file\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 78,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 78,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "3UGFKf80JzdRnHJEABuOL"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 79,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 93,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 79,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 93,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "sPzsN9Gre6cCOBfBfu61J"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to process every word in a file\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to process every word in a file\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 94,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 135,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 145,
              "line": 14,
              "column": 1
            }
          },
          "id": "UDrtTwjopBf1MCP-lThsx"
        },
        {
          "text": "\nmy @words = $*PROGRAM-NAME.IO.words;\n\nfor @words -> $word {\n    dd $word;\n}\n\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 145,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 263,
              "line": 23,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Read file lines backwards\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/08file-contents/08-04-read-file-lines-backwards.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "jWvbUleoebI2DusJT9bXA",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Read file lines backwards\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Read file lines backwards\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "FKOj9TfT5rfd5HOGYIMzY"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 76,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 90,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 76,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 90,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "og5T4WBRWBpabRULldwNq"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to read file lines backwards\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to read file lines backwards\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 91,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 129,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 139,
              "line": 14,
              "column": 1
            }
          },
          "id": "FTQIxyV4IucLzQ1gZbmdd"
        },
        {
          "text": "\nmy @lines = $*PROGRAM-NAME.IO.lines;\n@lines .= reverse;\n\nfor @lines -> $line {\n    dd $line;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 139,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 275,
              "line": 23,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Get/Set Filetime\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/09directories/09-01-get-set-filetime.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "rDkV6Er3reVmtuTHZQXOl",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Get/Set Filetime\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Get/Set Filetime\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 66,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 66,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Il81IWqiF3VTRB2RhWzlW"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 67,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 81,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 67,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 81,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "WNxY7EDyTOKy0tNOHr66c"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to get and set a utime on a file's inode\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to get and set a utime on a file's inode\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 82,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 132,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 142,
              "line": 14,
              "column": 1
            }
          },
          "id": "yqEs4i15sFi633moIEPXq"
        },
        {
          "text": "\nmy $fn =  $?FILE;\n\nmy Instant $i = $fn.IO.accessed;\nmy $dt = $i.to-posix;\n\nsay :$dt.perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 142,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 273,
              "line": 23,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Delete File\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/09directories/09-02-delete-file.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "xZQMGtPUlK5h2xi3hrJRy",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Delete File\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Delete File\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 61,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 61,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "v6jqbDK_sZsWh2ySMJgyb"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 62,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 76,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 62,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 76,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "zXvvF1av3N55XMqZEsuRu"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to delete a file\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to delete a file\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 77,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 103,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 113,
              "line": 14,
              "column": 1
            }
          },
          "id": "zaNgOtKgeog4-dC3L82xj"
        },
        {
          "text": "\n# create a file\nmy $f = open \"foo\", :w;\n$f.print(time);\n$f.close;\n\nunlink \"foo\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 113,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 235,
              "line": 23,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Copy/Move File\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/09directories/09-03-copy-move-file.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "H5Ya51eRZbgDfcqfhd1RH",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Copy/Move File\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Copy/Move File\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 64,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 64,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Ez2aAZ9OzFlHJuT4L06f4"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 65,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 79,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 65,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 79,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "GGJZNRg1JACuUQ7aiMpzt"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to copy and move a file\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to copy and move a file\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 80,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 113,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 123,
              "line": 14,
              "column": 1
            }
          },
          "id": "6XxzPu8WhfKnTes7R9eNw"
        },
        {
          "text": "\n# create a file\nmy $f = open \"foo\", :w;\n$f.print(time);\n$f.close;\n\n# copy\nmy $io = IO::Path.new(\"foo\");\n$io.copy(\"foo2\");\n\n# clean up\nunlink(\"foo2\");\n\n# move\n$io.rename(\"foo2\");\n\n# clean up\nunlink(\"foo2\");\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 123,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 370,
              "line": 34,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Process all files in a directory\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/09directories/09-05-all-files-dir.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "QziHFWydlEG_PORlmaqTL",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Process all files in a directory\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Process all files in a directory\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 82,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 82,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "JF1S5hiXHUzWQ7Fm3VPj9"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 83,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 97,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 83,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 97,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "TFPrBfOvwxYGO5rBNzCFo"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to process all files in a directory\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to process all files in a directory\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 98,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 143,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 153,
              "line": 14,
              "column": 1
            }
          },
          "id": "LUtkgenxaR7L6wgZn-2vl"
        },
        {
          "text": "\nsub MAIN(:$dir = \".\") {\n    # print a string representation of each file's path\n    for dir($dir).sort -> $file {\n        say Str($file);\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 153,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 340,
              "line": 23,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Get list of files matching a pattern\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/09directories/09-06-filenames-matching-pattern.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Ex7RHaNMBx3tFavy_sPuR",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Get list of files matching a pattern\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Get list of files matching a pattern\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 86,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 86,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "0j9A_-QK7cBSeTrEtQC2G"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 87,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 101,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 87,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 101,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "b1g6UuZPVoSHwyfB1Leo-"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want a list of filenames matching a pattern\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want a list of filenames matching a pattern\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 102,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 150,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 160,
              "line": 14,
              "column": 1
            }
          },
          "id": "bVcTv4hkGzSYl11RwP0NG"
        },
        {
          "text": "\nsub MAIN(:$dir = \".\") {\n    my @perl-files = dir $dir, test => /\\.pl/;\n\n    #  returns a list of IO::Path objects\n\n    for @perl-files.sort -> $io {\n        say $io.basename;\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 160,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 384,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Process files recursively\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/09directories/09-07-all-files-process.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Ffy3y2dvIcOXy25Fsl55k",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Process files recursively\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Process files recursively\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "beINvDG5zTsLvxdm2xS1P"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 76,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 90,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 76,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 90,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "SoUuISK68-p5WOhNNaCzx"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to recurse over all files in and under a directory\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to recurse over all files in and under a directory\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 91,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 151,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 161,
              "line": 14,
              "column": 1
            }
          },
          "id": "_Kny9SZ618jsGX_EiQgsg"
        },
        {
          "text": "\nuse File::Find;\n\nsub MAIN(:$dir = \".\") {\n\n    my $files = find(:dir($dir), :type('file'));\n\n    for $files.map({.IO}).sort -> $io {\n        say $io.absolute;\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 161,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 368,
              "line": 27,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Splitting up a filename\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/09directories/09-10-filename-splitting.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "zDNnTuRDCZT3VZbe0CAEN",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Splitting up a filename\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Splitting up a filename\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 73,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 73,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "R9xAd3oqiu9LlTpzaEGxt"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 74,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 88,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 74,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 88,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "MjahFgw40Dd6n8NDsgyCU"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to split a filename into basename, directory etc.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to split a filename into basename, directory etc.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 89,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 148,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 158,
              "line": 14,
              "column": 1
            }
          },
          "id": "CmuIs_cHImcl0Q2ot5Sdf"
        },
        {
          "text": "\nsub MAIN(:$file = \"/usr/lib64/libc.so\") {\n    my $io = $file.IO;\n\n    say \"basename: \",  $io.basename;\n    say \"dirname: \",   $io.dirname;\n    say \"extension: \", $io.extension;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 158,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 378,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Process files lazy\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/09directories/09-11-all-files-lazy.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "DnNbwRA9DnnW5Xo2W2u5m",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Process files lazy\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Process files lazy\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "oR7KrJ-BwdrkZKJlhdY2o"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "gfldex\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "gfldex\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 69,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 84,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 69,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 84,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "1pVktlLJk2AGepBN8TMyi"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to recurse over all files in and under a directory in a lazy fashion\nand stop after the first three files are found. We filter either based on\nmethods of IO::Path or on a simple Str match.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to recurse over all files in and under a directory in a lazy fashion\nand stop after the first three files are found. We filter either based on\nmethods of IO::Path or on a simple Str match.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 85,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 283,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 293,
              "line": 16,
              "column": 1
            }
          },
          "id": "p6gBFErK5gxwCmRJreW9f"
        },
        {
          "text": "\nmulti sub find-files(Str:D $dir, &filter = {True}) {\n    find-files($dir.IO, &filter)\n}\n\nmulti sub find-files (IO::Path:D $dir, &filter is copy = {True}) {\n\n# If the argument type of &filter is Str, we append a '/' to directories to\n# allow simple Str matches against directories.\n    \n    my &str-filter = { &filter(.d ?? .Str ~ '/' !! .Str) } if &filter.signature.params[0].type ~~ Str;\n\n    gather for dir($dir) {\n        take .IO if (&str-filter ?? str-filter(.IO) !! filter(.IO));\n        take slip sort find-files($_, &filter) if .d && (&str-filter ?? str-filter .IO !! filter .IO);\n    } but role {\n\n# We mixin a role into the returned Seq to provide one extra method. Calling\n# .head would do the same thing but would be less instructive.\n\n        method top(Seq:D: Int $amount){\n            my $counter = $amount;\n            gather for self {\n                take $counter-- ?? $_ !! IterationEnd;\n            }\n        }\n    }\n}\n\nsub MAIN(:$dir = \"..\") {\n    my \\files = find-files($dir, { \n        (.d && .ends-with(none <tmp mnt>) ) # any directory that doesn't end in tmp or mnt\n        || .ends-with(any <.pl .md>) # any file or symlink, etc, that end in .pl and .md\n    } );\n\n    for files.top(3) -> $path {\n        say $path.Str;\n    }\n\n    for find-files($dir, -> Str $_ {.ends-with(none <.md 04arrays/>)}) {\n        say .d ?? .Str ~ '/' !! .Str;\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 293,
              "line": 16,
              "column": 1
            },
            "end": {
              "offset": 1707,
              "line": 61,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Accessing subroutine arguments\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/10subroutines/10-01arguments.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "FUONwyzhg0LLSyhXrGDa7",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Accessing subroutine arguments\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Accessing subroutine arguments\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 80,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 80,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "wLoWtMycHgSUUnsBNEXrU"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 81,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 95,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 81,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 95,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "QeCEasHwX96cDiWxbChu4"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You have written a function that takes arguments supplied by its caller and\nyou need to access those arguments\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You have written a function that takes arguments supplied by its caller and\nyou need to access those arguments\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 96,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 207,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 217,
              "line": 15,
              "column": 1
            }
          },
          "id": "_gV9wYLo2D2O3Y7UzC8UZ"
        },
        {
          "text": "\nsub perl5 {\n    my ($x) = @_;\n    say $x;\n}\n\nperl5('old-fashioned');\n\nmulti sub parameters ($foo) { say $foo }\nmulti sub parameters (:$foo) { say $foo }\n\nparameters('some parameter');\nparameters 'some parameter';\nparameters foo => 'some parameter';\nparameters :foo('some parameter');\n\nsub whole (@names, %flags) {\n    for @names -> $name {\n        say $name;\n    }\n    for %flags.sort(*.key)>>.kv -> ($key, $value) {\n        say \"$key => $value\";\n    }\n}\nmy @stuff = ('array', 'elements');\nmy %flags = (hash => 'elements', are => 'pairs');\nwhole(@stuff, %flags);\n\nsub optional ($required, $optional?) {\n    my $second_arg = $optional // 'Told you it was optional!';\n    say $required;\n    say $second_arg;\n}\n\noptional('this');\noptional('this', 'that');\n\nsub named_params ($first, :$second, :$third) {\n    say $first, $second, $third;\n}\n\nnamed_params(1, second => 2, third => 3);\nnamed_params(1, :second(2), :third(3));\n\nsub transport ($planet, *@names) {\n    say \"Transporting to $planet:\";\n    for @names -> $name {\n        say \"    $name\";\n    }\n}\ntransport('Magrathea', 'Arthur', 'Ford', 'Ovid');\n\nsub typed (Int $val) {\n    say \"You gave me the integer: \" ~ $val;\n}\ntyped(3);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 217,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 1438,
              "line": 73,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Constructing an object\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/13classes-objects-and-ties/13-01constructing-an-object.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Fpk2bLTgN_drDis9pxlsB",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Constructing an object\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Constructing an object\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 72,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 72,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "eky_-SzQ_qzjIytMVTUeu"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 73,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 95,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 73,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 95,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "Grq8XQ3dunjd8DLT1jrr0"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Problem\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Problem\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 96,
                      "line": 11,
                      "column": 1
                    },
                    "end": {
                      "offset": 111,
                      "line": 12,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 96,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 111,
                  "line": 12,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Problem"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to create a way for your users to generate new objects\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to create a way for your users to generate new objects\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 112,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 176,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Solution\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Solution\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 177,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 193,
                      "line": 16,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 177,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 193,
                  "line": 16,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Solution"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Merely declare the class. A C«new» constructor is provided for each one of\nyour class automatically.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Merely declare the class. A "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "new"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " constructor is provided for each one of\nyour class automatically.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 194,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 295,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 305,
              "line": 21,
              "column": 1
            }
          },
          "id": "GHJJ00YerhSbkDypqe_vr"
        },
        {
          "text": "\nclass Foo {}\n\nmy $foo = Foo.new;\nsay $foo ~~ Foo ?? \"Yes\" !! \"No\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 305,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 413,
              "line": 28,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Managing Instance data\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/13classes-objects-and-ties/13-03managing-instance-data.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "lvVMLXwh_DnQ03wRpaOeY",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Managing Instance data\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Managing Instance data\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 72,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 72,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Ltm-WMaoZRjtH6WQ55S1i"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "uzluisf\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "uzluisf\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 73,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 89,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 73,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 89,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "ddtzzsi6uveVgqa5R9Deg"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Problem\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Problem\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 90,
                      "line": 11,
                      "column": 1
                    },
                    "end": {
                      "offset": 105,
                      "line": 12,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 90,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 105,
                  "line": 12,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Problem"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Each data of an object needs its method for access. How do you write methods \nthat manipulate the object's instance data?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Each data of an object needs its method for access. How do you write methods \nthat manipulate the object's instance data?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 106,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 228,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Solution\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Solution\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 229,
                      "line": 16,
                      "column": 1
                    },
                    "end": {
                      "offset": 245,
                      "line": 17,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 229,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 245,
                  "line": 17,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Solution"
            },
            {
              "type": "blankline"
            },
            {
              "text": "An attribute declared with the C«$.» have an automatically\ngenerated I«read-only» accessor method named after it. Tagging\nthe attribute with the C«is rw» trait makes the accessor method I«writable».\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "An attribute declared with the "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "$."
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " have an automatically\ngenerated "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "read-only"
                    }
                  ],
                  "type": "fcode",
                  "name": "I"
                },
                {
                  "type": "text",
                  "value": " accessor method named after it. Tagging\nthe attribute with the "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "is rw"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " trait makes the accessor method "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "writable"
                    }
                  ],
                  "type": "fcode",
                  "name": "I"
                },
                {
                  "type": "text",
                  "value": ".\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 246,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 445,
                  "line": 21,
                  "column": 1
                }
              }
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 454,
              "line": 22,
              "column": 1
            }
          },
          "id": "Ac99v542keXzBSXyiZ9eZ"
        },
        {
          "text": "\nclass Person {\n    has $.name is rw;\n    has $.age is rw;\n}\n\nmy Person $p1 .= new: name => 'Sylvia', :age(24);\n\nput $p1.name; #=> Sylvia\nput $p1.age;  #=> 24\n\n$p1.name = 'Sylvester';\n$p1.age = 23;\n\nput $p1.name; #=> Sylvester\nput $p1.age;  #=> 23\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 454,
              "line": 22,
              "column": 1
            },
            "end": {
              "offset": 742,
              "line": 40,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Managing Instance data\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/13classes-objects-and-ties/13-04managing-class-data.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "lqmG7oZ1X131JLrtcy2Ws",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Managing Instance data\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Managing Instance data\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 72,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 72,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "iLAf7WL4kqg3dw95jWiQC"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "uzluisf\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "uzluisf\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 73,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 89,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 73,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 89,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "Q7h18TGoNfjd4n1l6jigd"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Problem\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Problem\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 90,
                      "line": 11,
                      "column": 1
                    },
                    "end": {
                      "offset": 105,
                      "line": 12,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 90,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 105,
                  "line": 12,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Problem"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You need a method invoked on behalf of the whole class, not just a single\ninstance of the class.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You need a method invoked on behalf of the whole class, not just a single\ninstance of the class.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 106,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 203,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Solution\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Solution\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 204,
                      "line": 16,
                      "column": 1
                    },
                    "end": {
                      "offset": 220,
                      "line": 17,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 204,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 220,
                  "line": 17,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Solution"
            },
            {
              "type": "blankline"
            },
            {
              "text": "In order to do this, a variable that is shared by all the instances of the class\nmust be created. A variable of this kind is known as a I«class variable» and it\nuses the same syntax as any other attribute, but it's declared as C«my» or\nC«our», depending on the scope. Thus, an C«our»-declared class variable will\nbe shared by all subclasses, since it has package scope.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In order to do this, a variable that is shared by all the instances of the class\nmust be created. A variable of this kind is known as a "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "class variable"
                    }
                  ],
                  "type": "fcode",
                  "name": "I"
                },
                {
                  "type": "text",
                  "value": " and it\nuses the same syntax as any other attribute, but it's declared as "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "my"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " or\n"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "our"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": ", depending on the scope. Thus, an "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "our"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": "-declared class variable will\nbe shared by all subclasses, since it has package scope.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 221,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 591,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "It's preferable the method accessing the class variable can only be invoked\non the class and not an instance of the class. To do this, C«::?CLASS:U:» must\nbe used in the method signature, which indicates it's only callable on the\nclass.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It's preferable the method accessing the class variable can only be invoked\non the class and not an instance of the class. To do this, "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "::?CLASS:U:"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " must\nbe used in the method signature, which indicates it's only callable on the\nclass.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 592,
                  "line": 24,
                  "column": 1
                },
                "end": {
                  "offset": 829,
                  "line": 28,
                  "column": 1
                }
              }
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 838,
              "line": 29,
              "column": 1
            }
          },
          "id": "pgABHGBg4IQ084JSZz3HN"
        },
        {
          "text": "\nclass Person {\n    has $.name;\n    has $.age;\n\n    my  $people-number       = 0;\n    our $instantiated-people = 0;\n\n    submethod TWEAK {\n        $people-number++\n    }\n\n    method population( ::?CLASS:U: ) {\n        $people-number\n    }\n}\n\nclass Student is Person {\n    has $.major;\n}\n\nmy @names = :Eren(19), :Mikasa(19), :Levi(32), :Armin(19), :Erwin(35);\nmy @people;\nfor @names -> $name {\n    @people.push: Person.new: name => $name.key, age => $name.value;\n}\n\nput Person.population; #=> 5\n\nmy $stud01 = Student.new: name => 'Tricia McMillan', age => 28, major => 'Math';\n\nput Person.population; #=> 6\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 838,
              "line": 29,
              "column": 1
            },
            "end": {
              "offset": 1484,
              "line": 63,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Overloading operators\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/13classes-objects-and-ties/13-14overloading-operators.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "hPU8824-1FNqnVNZrrE_k",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Overloading operators\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Overloading operators\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "ScwGuMW7q6n4lolRW6iTG"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "uzluisf\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "uzluisf\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 72,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 88,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 72,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 88,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "6xhaO0MyCm_MV-ilMjOhn"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Problem\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Problem\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 89,
                      "line": 11,
                      "column": 1
                    },
                    "end": {
                      "offset": 104,
                      "line": 12,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 89,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 104,
                  "line": 12,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Problem"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to use familiar operators like C«==» or C«+» on objects from a\nclass you've written, or you want to define the print interpolation value for\nobjects.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to use familiar operators like "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "=="
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " or "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "+"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " on objects from a\nclass you've written, or you want to define the print interpolation value for\nobjects.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 105,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 264,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Solution\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Solution\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 266,
                      "line": 18,
                      "column": 1
                    },
                    "end": {
                      "offset": 282,
                      "line": 19,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 266,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 282,
                  "line": 19,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Solution"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Operators are declared by using the C«sub» (or C«multi») keyword followed by the \nkeyword indicating the operator's place with respect to the operand(s). For instance,\nfor an operator between two operands, the C«infix» is used. This is all followed \nby a colon and the operator name in a quote construct. \n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Operators are declared by using the "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "sub"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " (or "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "multi"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": ") keyword followed by the \nkeyword indicating the operator's place with respect to the operand(s). For instance,\nfor an operator between two operands, the "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "infix"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " is used. This is all followed \nby a colon and the operator name in a quote construct. \n"
                }
              ],
              "location": {
                "start": {
                  "offset": 283,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 589,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "As for how the class (or instances of it) is printed, it's matter of implementing\na version of the C«gist» method specific to the class. This method is responsible \nfor providing a default representation of the class and it's called by the\nC«say» routine by default.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "As for how the class (or instances of it) is printed, it's matter of implementing\na version of the "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "gist"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " method specific to the class. This method is responsible \nfor providing a default representation of the class and it's called by the\n"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "say"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " routine by default.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 590,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 857,
                  "line": 29,
                  "column": 1
                }
              }
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 866,
              "line": 30,
              "column": 1
            }
          },
          "id": "DjP9tUEsCBsR_dZx1S-AE"
        },
        {
          "text": "\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 866,
              "line": 30,
              "column": 1
            },
            "end": {
              "offset": 867,
              "line": 31,
              "column": 1
            }
          }
        },
        {
          "margin": "",
          "type": "block",
          "content": [
            {
              "type": "text",
              "value": "Overloading operators\n"
            }
          ],
          "name": "comment",
          "config": [],
          "location": {
            "start": {
              "offset": 867,
              "line": 31,
              "column": 1
            },
            "end": {
              "offset": 898,
              "line": 32,
              "column": 1
            }
          },
          "id": "mLLvkSnwunShXpypp1_HV"
        },
        {
          "text": "\nclass Cents {\n    has Int $.value;\n}\n\nmulti infix:<+>( Cents $q1, Cents $q2 ) {\n    $q1.value + $q2.value\n}\n\nmulti infix:<->( Cents $q1, Cents $q2 ) {\n    $q1.value - $q2.value\n}\n\nmy Cents $c1 .= new: :value(100);\nmy Cents $c2 .= new: :value(45);\n\nput $c1 + $c2; # 145\nput $c1 - $c2; # 55\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 898,
              "line": 32,
              "column": 1
            },
            "end": {
              "offset": 1189,
              "line": 51,
              "column": 1
            }
          }
        },
        {
          "margin": "",
          "type": "block",
          "content": [
            {
              "type": "text",
              "value": "Overriding the gist method\n"
            }
          ],
          "name": "comment",
          "config": [],
          "location": {
            "start": {
              "offset": 1189,
              "line": 51,
              "column": 1
            },
            "end": {
              "offset": 1225,
              "line": 52,
              "column": 1
            }
          },
          "id": "vNicpOnRUshNfo0Zv30_h"
        },
        {
          "text": "\nclass PrintableCents {\n    has Int $.value;\n\n    method gist {\n        return \"$!value¢\" if $!value < 100;\n        return '$' ~ $!value/100 \n    }\n}\n\nmy $below-a-dollar = PrintableCents.new: value => 25;\nmy $over-a-dollar  = PrintableCents.new: value => 275;\n\nsay $below-a-dollar;     # 25¢\nput $over-a-dollar.gist; # $2.75\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1225,
              "line": 52,
              "column": 1
            },
            "end": {
              "offset": 1590,
              "line": 69,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Executing SQL with DBIish\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/14database-access/14-09-dbi-sql.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "H3L2BSLUQVTWq_kJnN8Dc",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Executing SQL with DBIish\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Executing SQL with DBIish\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "hWkFOnFOQltfzxaOq6Sd2"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 76,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 90,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 76,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 90,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "RhILCd9WvK0EFPwlwyzZZ"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Execute some SQL commands using the DBIish database driver\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Execute some SQL commands using the DBIish database driver\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 91,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 150,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 160,
              "line": 14,
              "column": 1
            }
          },
          "id": "6KsdQ1Mc97_PjgKq5AwQH"
        },
        {
          "text": "\nuse DBIish;\n\nmy $dbh = DBIish.connect('SQLite', database => 'video.db');\n\n$dbh.do('DROP TABLE IF EXISTS video');\n\nmy $sql =  q:to\"END\";\nCREATE TABLE video(\n    id integer primary key not null,\n    title text not null,\n    uri text not null\n)\nEND\n\n$dbh.do($sql);\n\nmy $st = $dbh.prepare('INSERT INTO video(title, uri) VALUES(?, ?)');\n\n# put some data in\n$st.execute(\"Larry Wall - Keynote, APW2014 2014-10-10 \",\n            \"https://www.youtube.com/watch?v",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 160,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 614,
              "line": 35,
              "column": 45
            }
          }
        },
        {
          "margin": "",
          "type": "block",
          "content": [
            {
              "type": "verbatim",
              "value": "\");\n$st.execute(\"Carl Mäsak - Regexes in Perl 6 - Zero to Perl 6 Training\",\n            \"https://www.youtube.com/watch?v=oo-gA9Z9SaA\");\n"
            }
          ],
          "name": "enlqVqit62Y",
          "config": [],
          "location": {
            "start": {
              "offset": 614,
              "line": 35,
              "column": 45
            },
            "end": {
              "offset": 762,
              "line": 38,
              "column": 1
            }
          },
          "id": "wLz6RLl_raBtqw58qY00R"
        },
        {
          "text": "\n# get some data out\n$st = $dbh.prepare('SELECT title,uri FROM video');\n$st.execute;\n\nmy @rows =  $st.fetchall-AoH;\n\nsay @rows.gist;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 762,
              "line": 38,
              "column": 1
            },
            "end": {
              "offset": 935,
              "line": 48,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Parsing program arguments\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/15interactivity/15-01-parse-program-args.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "J3U5SBqw4NWBqyMhajJWH",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Parsing program arguments\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Parsing program arguments\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "vfMMUTkRyYMydj3xkj6nk"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 76,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 90,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 76,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 90,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "HLwkMf7zma2dHL4QSb06j"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Parse program arguments as passed from the command line\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Parse program arguments as passed from the command line\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 91,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 147,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 157,
              "line": 14,
              "column": 1
            }
          },
          "id": "VvV_J0KiqF-Vg5-OEQaoT"
        },
        {
          "text": "\n##| open file, whatever\nsub MAIN (Str :$output!, Bool :$debug = False )  { # False can be ommitted\n    warn \"debugging\" if $debug;\n    dd $output;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 157,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 347,
              "line": 22,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Test whether program is interactive or not\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/15interactivity/15-02-test-interactive-program.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "-XR2CgwSZfKVcRuSP9OQ1",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Test whether program is interactive or not\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Test whether program is interactive or not\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 92,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 92,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "_GLHA8Gq0QgXqZs15m7xL"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 93,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 107,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 93,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 107,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "UrK1cjM1VTjf8hhVGAiy2"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Test whether program is interactive or not\nrunning from terminal or in batch mode (like cron on UNIX)\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Test whether program is interactive or not\nrunning from terminal or in batch mode (like cron on UNIX)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 108,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 210,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 220,
              "line": 15,
              "column": 1
            }
          },
          "id": "vVcJPCkRhpSmGlTv-HQSI"
        },
        {
          "text": "\nsub I-am-interactive {\n    return  $*IN.t && $*OUT.t;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 220,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 317,
              "line": 21,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Clear the screen\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/15interactivity/15-03-clear-screen.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "M-MYKEazwtp1LybwkacpE",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Clear the screen\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Clear the screen\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 66,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 66,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "xbspYZHANHvVmEnXmC016"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 67,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 81,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 67,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 81,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "aKYD_hkbalUWyQfsevDv7"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 91,
              "line": 12,
              "column": 1
            }
          },
          "id": "76iTVXWqgK5vwOcBWqkz6"
        },
        {
          "text": "\n# TODO control code sequence probably better\n\nshell \"clear\";\n# shell \"cls\"; # for windows\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 91,
              "line": 12,
              "column": 1
            },
            "end": {
              "offset": 222,
              "line": 19,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Change text colour\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/15interactivity/15-04-changing-text-colour.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "FgGcbtUbITGBgvOiQMJOq",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Change text colour\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Change text colour\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "XleyD0uOK4Zgngz92aKSO"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 69,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 83,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 69,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 83,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "A6TokO3LdInEI03oAEz5f"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Change text colour on a terminal\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Change text colour on a terminal\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 84,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 117,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 127,
              "line": 14,
              "column": 1
            }
          },
          "id": "eArhGBQkULkIHnn-8gynB"
        },
        {
          "text": "\nuse Terminal::ANSIColor;\n\nprint color(\"red\"), \"Danger, Will Robinson!\\n\", color(\"reset\");\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 127,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 258,
              "line": 20,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Timeout Operation\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/16processes/16-01-operation-timeout.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "210cask-W-SPfOVY_2q0g",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Timeout Operation\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Timeout Operation\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 67,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 67,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Q8h9XxN_8G8GXvx-SpS4T"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 68,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 82,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 68,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 82,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "JHIdihXEBqJhFSZMOwSro"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to timeout an operation (possibly long running)\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to timeout an operation (possibly long running)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 83,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 140,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 150,
              "line": 14,
              "column": 1
            }
          },
          "id": "w9zsBl3NU92EG6BwlvRr-"
        },
        {
          "text": "\nconstant timeout = 3;\n\nmy $done = start {\n    say \"starting to sleep...\";\n    sleep 10; # long running operation here\n}\n\nawait Promise.anyof($done, Promise.in(timeout));\n\nif $done {\n    say \"operation completed\";\n}\nelse {\n    warn \"timed out after {timeout} sec(s)\";\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 150,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 460,
              "line": 32,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "List Signals\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/16processes/16-13-listing-signals.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "H6L_5qomX1lUCu7i6jWt6",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "List Signals\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "List Signals\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 62,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 62,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "H_rK7p1iEt1wxPZnL6mXO"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 63,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 77,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 63,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 77,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "iLN_BczhWebMBW3xH9zvn"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to list the signals available on a UNIX-like OS\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to list the signals available on a UNIX-like OS\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 78,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 135,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 145,
              "line": 14,
              "column": 1
            }
          },
          "id": "J4E1AvZA7yGDzmK6onjxo"
        },
        {
          "text": "\n# shamelessly stolen from a test\n#\nmy @signals = $*KERNEL.signals.grep(Signal);\n\nsay :@signals.perl;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 145,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 287,
              "line": 22,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Send a signal to a process\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/16processes/16-14-send-signal.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "z6FNkQTHrmJZtPNx57i8t",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Send a signal to a process\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Send a signal to a process\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 76,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 76,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "V5Z1nLUPdY7KrR0K87Yr7"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 77,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 91,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 77,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 91,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "Hluqep8A1dXpoQ-91v200"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to send a signal to a process on a UNIX-like OS\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to send a signal to a process on a UNIX-like OS\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 92,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 149,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 159,
              "line": 14,
              "column": 1
            }
          },
          "id": "26iNO6Z7IlqF1MfeiXWON"
        },
        {
          "text": "\nuse NativeCall;\n\nsub kill(int32, int32) returns int32 is native { ... }\n\nsignal(SIGHUP).tap( {say \"caught HUP\"});\n\nkill($*PID, Signal::SIGHUP);\n\nsleep 2;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 159,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 354,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Catch ctrl-c\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/16processes/16-18-catch-control-c.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "YTgIzcJCytTV39SVOhj9x",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Catch ctrl-c\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Catch ctrl-c\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 62,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 62,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "l22_CTu7_MCYwsQzmhYF3"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 63,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 77,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 63,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 77,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "w8xnAD4s-Os4NyPTJRGzh"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Catch ctrl-c to ignore or execute code\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Catch ctrl-c to ignore or execute code\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 78,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 117,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 127,
              "line": 14,
              "column": 1
            }
          },
          "id": "p-cIwehivnMofKakQK0Jo"
        },
        {
          "text": "\nsignal(SIGINT).tap();\n#signal(SIGINT).tap( { say \"caught\" } );\nmy $name = prompt \"what's your name?\";\ndd $name;\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 127,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 240,
              "line": 19,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Writing a TCP Client\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/17sockets/17-01tcp_client.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "ZEvmgFK2wKx94LYIXmws2",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Writing a TCP Client\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Writing a TCP Client\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 70,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 70,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Z0LxPOs7LGSy5kgOjCkBX"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 71,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 71,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "yDc2zSXUYTtbJGLZMWsWO"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to connect to a socket on a remote host\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to connect to a socket on a remote host\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 86,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 135,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 145,
              "line": 14,
              "column": 1
            }
          },
          "id": "MeMx3aUTcdeVxZFCTJmcn"
        },
        {
          "text": "\nmy $s = IO::Socket::INET.new( :host<example.org>, :port(80) );\n$s.print( \"HEAD / HTTP/1.1\\r\\nHost: example.org\\r\\n\\r\\n\" );\n\nwhile my $r = $s.get {\n    say $r;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 145,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 347,
              "line": 23,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Writing a TCP Server\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/17sockets/17-02tcp_server.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "IbvUxzo5_cY3zgXoH1sHd",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Writing a TCP Server\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Writing a TCP Server\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 70,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 70,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "dqz4Huv8J8Pg-DLuiXQYi"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 71,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 71,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "27Gf3P3LdZUzquFuH6bmS"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to write a TCP Server to listen on a socket\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to write a TCP Server to listen on a socket\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 86,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 139,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 149,
              "line": 14,
              "column": 1
            }
          },
          "id": "KIUuaMfnT9U2jhb7JCSvN"
        },
        {
          "text": "\nmy $s = IO::Socket::INET.new( :localport(1024), :type(1), :reuse(1),\n                              :listen(10));\n\nwhile my $c = $s.accept()  {\n    say $c.get;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 149,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 351,
              "line": 23,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Writing a CGI Script\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/19cgi-programming/19-01cgi-script.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "jVtdUCLO9s3oTvGALJOrQ",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Writing a CGI Script\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Writing a CGI Script\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 70,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 70,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "wySV-eg-g8a43_wx02mo6"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 71,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 71,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "LiZF-8Mb1X8fmegC8I1on"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to write a simple CGI to parse a form and display it\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to write a simple CGI to parse a form and display it\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 86,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 148,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "(This example uses the more modern and faster variation PSGI and runs\nstandalone on localhost at port 8080 and depends on 'HTTP::Easy' and 'Web'\nbeing installed from the ecosystem)\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "(This example uses the more modern and faster variation PSGI and runs\nstandalone on localhost at port 8080 and depends on 'HTTP::Easy' and 'Web'\nbeing installed from the ecosystem)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 149,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 330,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 340,
              "line": 18,
              "column": 1
            }
          },
          "id": "8il4DtI9GtK1EufkV1pG_"
        },
        {
          "text": "\nuse HTTP::Easy::PSGI;\nuse Web::Request;\n\nmy $http = HTTP::Easy::PSGI.new(:port(8080));\n\nmy $form = qq :to 'EOT';\n<html>\n  <form>\n    Enter your name\n    <input name=\"name\" type=\"text\">\n    <input type=\"submit\">\n  </form>\n</html>\nEOT\n\n# entry point\nmy $app = sub (%env) {\n    my $req = Web::Request.new(%env);\n\n    if !(my $name = $req.get('name')).so {\n        # no CGI param passed so display form\n        return [ 200, [ 'Content-Type' => 'text/html;charset",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 340,
              "line": 18,
              "column": 1
            },
            "end": {
              "offset": 800,
              "line": 40,
              "column": 61
            }
          }
        },
        {
          "margin": "",
          "type": "block",
          "content": [
            {
              "type": "para",
              "text": "' ], [ $form ]];\n    }\n    else {\n        return [ 200, [ 'Content-Type' => 'text/html;charset=UTF-8' ], [ \"<html>hello {$name}</html>\" ] ];\n    }\n}\n",
              "margin": "",
              "content": [
                {
                  "type": "text",
                  "value": "' ], [ $form ]];\n    }\n    else {\n        return [ 200, [ 'Content-Type' ="
                },
                {
                  "type": "text",
                  "value": ">"
                },
                {
                  "type": "text",
                  "value": " 'text/html;charset=UTF-8' ], [ \"<html>hello {$name}</html>\" ] ];\n    }\n}\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 800,
                  "line": 40,
                  "column": 61
                },
                "end": {
                  "offset": 955,
                  "line": 46,
                  "column": 1
                }
              }
            }
          ],
          "name": "UTF-8",
          "location": {
            "start": {
              "offset": 800,
              "line": 40,
              "column": 61
            },
            "end": {
              "offset": 955,
              "line": 46,
              "column": 1
            }
          },
          "id": "Bap6u2iHp1DHegm5Kr_lv"
        },
        {
          "text": "\n$http.handle($app);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 955,
              "line": 46,
              "column": 1
            },
            "end": {
              "offset": 1016,
              "line": 50,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Fetch uri\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/cookbook/20web-automation/20-01-fetching-uri.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "n6LtUh5fNz3kS27errFTV",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 30,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Fetch uri\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Fetch uri\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 59,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 59,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "zo4jeMORSb1H7nK254Zs4"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "stmuk\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "stmuk\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 60,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 74,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 60,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 74,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "aao9zflvd0QZH8UO0yC_B"
            },
            {
              "type": "blankline"
            },
            {
              "text": "You want to fetch a uri\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You want to fetch a uri\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 75,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 99,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 30,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 109,
              "line": 14,
              "column": 1
            }
          },
          "id": "vN3NbOagBpr3JPFA_p4x7"
        },
        {
          "text": "\nuse LWP::Simple;\n\nmy $html = LWP::Simple.get('http://examples.perl6.org/');\n\nsay $html;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 109,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 238,
              "line": 22,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "file": "work_examples/categories/cookbook/README.md",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Y47G2m-DhpFoWb0lqBekI",
      "margin": "",
      "name": "root",
      "content": [
        {
          "type": "block",
          "id": "0MlQUJEaxSqMGW5rIyCEx",
          "margin": "",
          "level": 1,
          "name": "head",
          "location": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 54,
              "offset": 53
            }
          },
          "content": [
            "PLEAC: Programming Language Examples Alike Cookbook"
          ]
        },
        {
          "type": "para",
          "id": "sLg6LScqxhjbGFHU2FuRY",
          "margin": "",
          "location": {
            "start": {
              "line": 3,
              "column": 1,
              "offset": 55
            },
            "end": {
              "line": 3,
              "column": 51,
              "offset": 105
            }
          },
          "text": "text",
          "content": [
            "This is PLEAC, from ",
            {
              "meta": "https://github.com/pleac/pleac",
              "type": "fcode",
              "name": "L",
              "content": [
                "https://github.com/pleac/pleac"
              ]
            }
          ]
        },
        {
          "type": "para",
          "id": "ShtDAv0qZlCiXNU_fKx-o",
          "margin": "",
          "location": {
            "start": {
              "line": 5,
              "column": 1,
              "offset": 107
            },
            "end": {
              "line": 7,
              "column": 53,
              "offset": 317
            }
          },
          "text": "text",
          "content": [
            "PLEAC stands for \"Programming Language Examples Alike Cookbook.\"  Think \"Perl6\nCookbook.\"  This is our attempt to recreate the Perl5 Cookbook but with proper\nPerl 6 idioms.  Naturally, it's an evolving process."
          ]
        },
        {
          "type": "para",
          "id": "1ULa66jHgqUBu5bichgvW",
          "margin": "",
          "location": {
            "start": {
              "line": 9,
              "column": 1,
              "offset": 319
            },
            "end": {
              "line": 11,
              "column": 27,
              "offset": 501
            }
          },
          "text": "text",
          "content": [
            "Note the naming of the directories and the files are done in such a way as to\nmirror the Cookbook (2nd Edition) and to ease sorting.  Please do not use the\n1st edition section names."
          ]
        },
        {
          "type": "para",
          "id": "L66Q-ALiNGe5Op0LVsJYw",
          "margin": "",
          "location": {
            "start": {
              "line": 13,
              "column": 1,
              "offset": 503
            },
            "end": {
              "line": 13,
              "column": 6,
              "offset": 508
            }
          },
          "text": "text",
          "content": [
            "NOTE:"
          ]
        },
        {
          "type": "list",
          "id": "J3qSuvDqPNu717nuI-97G",
          "margin": "",
          "level": 1,
          "list": "itemized",
          "content": [
            {
              "type": "block",
              "id": "JU8kapoZEoMpg2OisWR44",
              "margin": "",
              "name": "item",
              "level": 1,
              "location": {
                "start": {
                  "line": 15,
                  "column": 3,
                  "offset": 512
                },
                "end": {
                  "line": 16,
                  "column": 53,
                  "offset": 639
                }
              },
              "content": [
                {
                  "type": "para",
                  "id": "rA7PiU2QfCcgosIbH41QK",
                  "margin": "",
                  "location": {
                    "start": {
                      "line": 15,
                      "column": 5,
                      "offset": 514
                    },
                    "end": {
                      "line": 16,
                      "column": 53,
                      "offset": 639
                    }
                  },
                  "text": "text",
                  "content": [
                    "This was a port from the now defunct ",
                    {
                      "type": "fcode",
                      "name": "C",
                      "content": [
                        "pugs/examples/cookbook"
                      ]
                    },
                    " which then\nbecame ",
                    {
                      "type": "fcode",
                      "name": "C",
                      "content": [
                        "mu/examples/cookbook"
                      ]
                    },
                    " supporting Rakudo."
                  ]
                }
              ]
            },
            {
              "type": "block",
              "id": "ldazw25t95cZMB0LDDlK8",
              "margin": "",
              "name": "item",
              "level": 1,
              "location": {
                "start": {
                  "line": 17,
                  "column": 3,
                  "offset": 642
                },
                "end": {
                  "line": 17,
                  "column": 42,
                  "offset": 681
                }
              },
              "content": [
                {
                  "type": "para",
                  "id": "G9SveHqw3uIQ08xA1VBEP",
                  "margin": "",
                  "location": {
                    "start": {
                      "line": 17,
                      "column": 5,
                      "offset": 644
                    },
                    "end": {
                      "line": 17,
                      "column": 42,
                      "offset": 681
                    }
                  },
                  "text": "text",
                  "content": [
                    "PLEAC itself doesn't seem very active"
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Multiples of 3 and 5\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob001-cspencer.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "ncEAkWJlMBL40Uf-ZJ07o",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Multiples of 3 and 5\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Multiples of 3 and 5\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "34PYZZQjX6r-a770TkwMK"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "cspence\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "cspence\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 66,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 66,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "5r7sIPY3Iwg0tZ0b4IJq2"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=1>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=1"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 67,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 105,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If we list all the natural numbers below 10 that are multiples of 3 or 5, we\nget 3, 5, 6 and 9. The sum of these multiples is 23.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If we list all the natural numbers below 10 that are multiples of 3 or 5, we\nget 3, 5, 6 and 9. The sum of these multiples is 23.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 106,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 236,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the sum of all the multiples of 3 or 5 below 1000.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the sum of all the multiples of 3 or 5 below 1000.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 237,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 293,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 303,
              "line": 17,
              "column": 1
            }
          },
          "id": "cJ83ZJf0eeEO4n-70NMBt"
        },
        {
          "text": "\n(1..^1000).grep({ ! ($^a % 3 and $^a % 5) }).reduce({ $^a + $^b }).say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 303,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 416,
              "line": 21,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Multiples of 3 and 5\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob001-eric256.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "qEmpfGwCjdyhXisS8Wviu",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Multiples of 3 and 5\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Multiples of 3 and 5\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "1mOa7WwQroegebPhH0tUG"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Eric Hodges\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Eric Hodges\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 70,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 70,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "sHfhVbVL0L6aBtTbXlM3E"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=1>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=1"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 71,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 109,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If we list all the natural numbers below 10 that are multiples of 3 or 5, we\nget 3, 5, 6 and 9. The sum of these multiples is 23.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If we list all the natural numbers below 10 that are multiples of 3 or 5, we\nget 3, 5, 6 and 9. The sum of these multiples is 23.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 110,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 240,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the sum of all the multiples of 3 or 5 below 1000.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the sum of all the multiples of 3 or 5 below 1000.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 241,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 297,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 307,
              "line": 17,
              "column": 1
            }
          },
          "id": "gd-dRO_HrFReC6kWadClT"
        },
        {
          "text": "\nmy $sum;\nfor (1..^1000) -> $n { $sum+=$n unless $n % 5 and $n % 3};\n$sum.say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 307,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 426,
              "line": 23,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Multiples of 3 and 5\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob001-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "1jM_yAHNCZwDTTKntV16e",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Multiples of 3 and 5\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Multiples of 3 and 5\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "YM8CgogGlcD6u8aDTysNK"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 69,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 69,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "KcfFjnZnugCd944JQ6Qmt"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=1>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=1"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 70,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 108,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If we list all the natural numbers below 10 that are multiples of 3 or 5, we\nget 3, 5, 6 and 9. The sum of these multiples is 23.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If we list all the natural numbers below 10 that are multiples of 3 or 5, we\nget 3, 5, 6 and 9. The sum of these multiples is 23.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 109,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 239,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the sum of all the multiples of 3 or 5 below 1000.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the sum of all the multiples of 3 or 5 below 1000.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 240,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 296,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 306,
              "line": 17,
              "column": 1
            }
          },
          "id": "5i5rMV-cpVE8Nrr2_MxPD"
        },
        {
          "text": "\nsay [+] grep * %% (3|5), ^1000;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 306,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 379,
              "line": 21,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Multiples of 3 and 5\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob001-hexmode.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "ayoTsfasECkqpCPQdt2Ad",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Multiples of 3 and 5\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Multiples of 3 and 5\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "XXM9cKskWSUE8pvjfb3UJ"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Mark A. Hershberger\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Mark A. Hershberger\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 78,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 78,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "PB5ErJ3dKu0FDHTxzJquO"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=1>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=1"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 79,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 117,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If we list all the natural numbers below 10 that are multiples of 3 or 5, we\nget 3, 5, 6 and 9. The sum of these multiples is 23.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If we list all the natural numbers below 10 that are multiples of 3 or 5, we\nget 3, 5, 6 and 9. The sum of these multiples is 23.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 118,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 248,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the sum of all the multiples of 3 or 5 below 1000.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the sum of all the multiples of 3 or 5 below 1000.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 249,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 305,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 315,
              "line": 17,
              "column": 1
            }
          },
          "id": "TveTLZM_UN9bMiTWgPTNQ"
        },
        {
          "text": "\nsay [+] gather {\n    for (1..999) {\n        take $_ if $_ % 3 == 0 || $_ % 5 == 0;\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 315,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 447,
              "line": 25,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Multiples of 3 and 5\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob001-unobe.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Wf8KGdE09zvlf-RAg-ItC",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Multiples of 3 and 5\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Multiples of 3 and 5\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "faShxQhn3Pf8bnNDz66l4"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Romano\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Romano\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Rdzx_dHxCXKlIbw6w_BTC"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=1>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=1"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 72,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 110,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If we list all the natural numbers below 10 that are multiples of 3 or 5, we\nget 3, 5, 6 and 9. The sum of these multiples is 23.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If we list all the natural numbers below 10 that are multiples of 3 or 5, we\nget 3, 5, 6 and 9. The sum of these multiples is 23.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 111,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 241,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the sum of all the multiples of 3 or 5 below 1000.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the sum of all the multiples of 3 or 5 below 1000.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 242,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 298,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 308,
              "line": 17,
              "column": 1
            }
          },
          "id": "5Pkqbpe_N6FnIkecdSENl"
        },
        {
          "text": "\nsay [+] (1..^1000).grep: { !($_ % (3&5)) };\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 308,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 393,
              "line": 21,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Even Fibonacci numbers\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob002-eric256.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "WWUREqUqE0Q7weonwRjLW",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Even Fibonacci numbers\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Even Fibonacci numbers\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 51,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 51,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "L0gAWqdRp36ouQH3NtjXh"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Eric Hodges\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Eric Hodges\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 52,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 72,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 52,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 72,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "G5k1Kt-eqK9v_sp5jDyhP"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=2>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=2"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 73,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 111,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Each new term in the Fibonacci sequence is generated by adding the previous\ntwo terms. By starting with 1 and 2, the first 10 terms will be:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Each new term in the Fibonacci sequence is generated by adding the previous\ntwo terms. By starting with 1 and 2, the first 10 terms will be:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 112,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 253,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 254,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 293,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "By considering the terms in the Fibonacci sequence whose values do not\nexceed four million, find the sum of the even-valued terms.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "By considering the terms in the Fibonacci sequence whose values do not\nexceed four million, find the sum of the even-valued terms.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 294,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 425,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 435,
              "line": 20,
              "column": 1
            }
          },
          "id": "mQB-zp2UusSWRvbtVMGSI"
        },
        {
          "text": "\nmy $term = 1;\nmy $last_term = 0;\nmy $sum = 0;\n\nwhile ($term < 4000000) {\n    ($last_term, $term) = ($term, $term + $last_term);\n    $sum += $term unless $term % 2;\n}\nsay $sum;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 435,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 652,
              "line": 32,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Even Fibonacci numbers\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob002-gerdr.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "JHrL4a_2kQMVOS-hHUnkl",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Even Fibonacci numbers\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Even Fibonacci numbers\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 51,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 51,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "I7lDlOZuZ5AbaJHl_VbX4"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Gerhard R\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Gerhard R\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 52,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 70,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 52,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 70,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "h6dpSLny1YeQBmsO_BtkC"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=2>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=2"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 71,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 109,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Each new term in the Fibonacci sequence is generated by adding the previous\ntwo terms. By starting with three terms 1, 1, and 2, the first 10 terms will be:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Each new term in the Fibonacci sequence is generated by adding the previous\ntwo terms. By starting with three terms 1, 1, and 2, the first 10 terms will be:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 110,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 267,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ...\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ...\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 268,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 305,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "By considering the terms in the Fibonacci sequence whose values do not\nexceed four million, find the sum of the even-valued terms.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "By considering the terms in the Fibonacci sequence whose values do not\nexceed four million, find the sum of the even-valued terms.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 306,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 437,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 447,
              "line": 20,
              "column": 1
            }
          },
          "id": "IHcAAhomBATlWDC-Ihdi6"
        },
        {
          "text": "\nsay [+] grep * %% 2, (1, 1, *+* ...^ * > 4_000_000);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 447,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 541,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Even Fibonacci numbers\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob002-hexmode.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "QkNoyT_Ld1H_odFIsntfH",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Even Fibonacci numbers\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Even Fibonacci numbers\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 51,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 51,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "wVmE0ZGdeCQthDdIPKo-V"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Mark A. Hershberger\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Mark A. Hershberger\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 52,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 80,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 52,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 80,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "gwERSNoWNi8OCrHmPTtI3"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=2>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=2"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 81,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 119,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Each new term in the Fibonacci sequence is generated by adding the previous\ntwo terms. By starting with 1 and 2, the first 10 terms will be:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Each new term in the Fibonacci sequence is generated by adding the previous\ntwo terms. By starting with 1 and 2, the first 10 terms will be:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 120,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 261,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 262,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 301,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "By considering the terms in the Fibonacci sequence whose values do not\nexceed four million, find the sum of the even-valued terms.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "By considering the terms in the Fibonacci sequence whose values do not\nexceed four million, find the sum of the even-valued terms.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 302,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 433,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 443,
              "line": 20,
              "column": 1
            }
          },
          "id": "eMTTY1MaaCZtu0wjDEhj2"
        },
        {
          "text": "\n# code exposes a bug in r34733 rakudo, but works in pugs\n\nclass Fibonacci {\n    has @!list = (0, 1);\n\n    method next() {\n        @!list[2] = [+] @!list;\n        shift @!list;\n        return @!list[1];\n    }\n}\n\nmy $fibber = Fibonacci.new;\nmy $f;\n\nmy @r = gather {\n    $f = $fibber.next;\n    while $f < 4000000 {\n        take (0+$f) if $f % 2 == 0;\n        $f = $fibber.next;\n    }\n}\n\nsay [+] @r;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 443,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 880,
              "line": 47,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Largest prime factor\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob003-eric256.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "RluAq3oniFg3p4LrgRwO0",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Largest prime factor\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Largest prime factor\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "Md2WYD3_gtIRGQNohSoga"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Eric Hodges\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Eric Hodges\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 70,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 70,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "n2TBFjlTsqqCWNtV6flb0"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=3>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=3"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 71,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 109,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The prime factors of 13195 are 5, 7, 13 and 29.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The prime factors of 13195 are 5, 7, 13 and 29.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 110,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 158,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the largest prime factor of the number 600851475143 ?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the largest prime factor of the number 600851475143 ?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 159,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 221,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 231,
              "line": 16,
              "column": 1
            }
          },
          "id": "ptcKWkLil4cqFKYUwEzid"
        },
        {
          "text": "\nsub is_prime ($num) {\n    for (2..^$num) {\n        return 0 unless $num % $_;\n    }\n    return 1;\n};\n\nclass Primes {\n    has $.current = 0;\n\n    method next {\n        $!current++;\n        $!current++ until is_prime($.current);\n        return $.current;\n    }\n}\n\nmy $prime = Primes.new();\nmy $number = 600851475143;\nmy @primes = gather while ($number > 1) {\n    if !($number % $prime.next) {\n        $number /= $prime.current;\n        take $prime.current;\n    }\n}\n\nsay @primes.max;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 231,
              "line": 16,
              "column": 1
            },
            "end": {
              "offset": 753,
              "line": 46,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Largest prime factor\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob003-gerdr.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Vlza9CEX8xXl18d_rien5",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Largest prime factor\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Largest prime factor\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "REjmheiyRUz6Om-VQAuH7"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Gerhard R\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Gerhard R\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "2L-Wa-tV7QrS89R3VbD0i"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=3>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=3"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 69,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 107,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The prime factors of 13195 are 5, 7, 13 and 29.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The prime factors of 13195 are 5, 7, 13 and 29.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 108,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 156,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the largest prime factor of the number 600851475143 ?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the largest prime factor of the number 600851475143 ?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 157,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 219,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 229,
              "line": 16,
              "column": 1
            }
          },
          "id": "iHLxgHOgvI5FjAsDldNHc"
        },
        {
          "text": "\nsub largest-prime-factor($n is copy) {\n    for 2, 3, *+2 ... * {\n        while $n %% $_ {\n            $n div= $_;\n            return $_ if $_ > $n;\n        }\n    }\n}\n\nsay largest-prime-factor(600_851_475_143);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 229,
              "line": 16,
              "column": 1
            },
            "end": {
              "offset": 480,
              "line": 29,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Largest prime factor\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob003-hexmode.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "519g1jNjqXIiG2l6A5z15",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Largest prime factor\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Largest prime factor\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "tfH-e_oQnNKjl9SvIZo4U"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Mark A. Hershberger\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Mark A. Hershberger\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 78,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 78,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "IVpF1DpEj8ta4BML_egPa"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=3>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=3"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 79,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 117,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The prime factors of 13195 are 5, 7, 13 and 29.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The prime factors of 13195 are 5, 7, 13 and 29.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 118,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 166,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the largest prime factor of the number 600851475143 ?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the largest prime factor of the number 600851475143 ?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 167,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 229,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 239,
              "line": 16,
              "column": 1
            }
          },
          "id": "CvtZTxcV-ownCWr8ua6I1"
        },
        {
          "text": "\nclass Prime {\n    has @!primes;\n    has Int $!number = 1;\n\n    method next() {\n        my $not_prime = 1;\n\n        while $not_prime && $!number++ {\n            $not_prime = @!primes.grep({$!number % $^a == 0});\n        }\n        @!primes.push($!number);\n\n        my $copy = $!number;\n        return $copy;\n    }\n}\n\nmy $number = 600851475143;\n\nmy $prime = Prime.new;\nmy $current-prime;\nmy @primes = gather repeat {\n    $current-prime = $prime.next;\n    if $number %% $current-prime {\n        take $current-prime;\n        $number /= $current-prime;\n    }\n} while ($current-prime < $number);\n\nsay @primes.max;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 239,
              "line": 16,
              "column": 1
            },
            "end": {
              "offset": 887,
              "line": 49,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Largest prime factor\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob003-lanny.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "tui8eISU7VZ8R6lYxnL_b",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Largest prime factor\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Largest prime factor\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "gTtuue0rMgLF571SP1S91"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Lanny Ripple\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Lanny Ripple\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "VewnapJVZZ89fwnlwDOJo"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=3>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=3"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 72,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 110,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The prime factors of 13195 are 5, 7, 13 and 29.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The prime factors of 13195 are 5, 7, 13 and 29.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 111,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 159,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the largest prime factor of the number 600851475143 ?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the largest prime factor of the number 600851475143 ?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 160,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 222,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 232,
              "line": 16,
              "column": 1
            }
          },
          "id": "F87ZUqHhAx_f1vtCBcDWu"
        },
        {
          "text": "\nclass PrimeSieve {\n    has Int $.p;\n    has Int $.value is rw = $!p * $!p;\n\n    method next {\n        return $.value += $.p;\n    }\n}\n\nclass Primes {\n    has Int @!primes = 2,3;\n\n    has PrimeSieve @!wheel;\n    has Int $!spix = 1;\n    has Int $!spval = @!primes[$!spix] ** 2;\n\n    method !next {\n        # Candidate for next prime.\n        my $z = @!primes[*-1] + 2;\n        self!adjust_wheel($z);\n\n        # Work through each stream.\n        my $ix = 0;\n        while $ix < @!wheel {\n            my $s = @!wheel[$ix];\n\n            # Step the current PrimeSieve if less than candidate\n            $s.next if $s.value < $z;\n\n            if $z == $s.value {\n                # If the stream matches incr accumulator.\n                $z += 2;\n                self!adjust_wheel($z);\n                $ix = 0;\n            }\n            else {\n                # If the stream is greater then try next stream.\n                ++$ix;\n            }\n        }\n\n        # All streams are used up.  We are the next prime.\n        @!primes.push($z);\n    }\n\n    method !adjust_wheel(Int $x) {\n        if ( $x == $!spval ) {\n            @!wheel.push(PrimeSieve.new(:p(@!primes[$!spix])));\n            $!spix += 1;\n            $!spval = @!primes[$!spix] ** 2;\n        }\n    }\n\n    # postcircumfix:<[ ]> giving problems\n    method ix(Int $ix) {\n        self!next while $ix > @!primes.end;\n        return @!primes[$ix];\n    }\n\n    method factor(Int $n is copy) {\n        my Int @value;\n        my Int $psqr = 4;\n\n        loop ( my Int $ix = 0; $psqr <= $n; ++$ix ) {\n            my $p = $.ix($ix);\n            $psqr = $p * $p;\n\n            while $n != 1 && $n % $p == 0 {\n                @value.push($p);\n                $n = ($n / $p).Int;\n            }\n        }\n\n        @value.push($n) if $n != 1;\n\n        return @value;\n    }\n\n    method is_prime(Int $n) of Bool {\n        return ?0 if ( $n < 2 );\n\n        my Int $psqr = 4;\n\n        loop ( my Int $ix = 0; $psqr <= $n; ++$ix ) {\n            my $p = $.ix($ix);\n            $psqr = $p * $p;\n\n            return ?0\n            if $n % $p == 0;\n        }\n\n        return ?1;\n    }\n\n    method Str { return \"{$!spix-1}: {@!primes}\"; }\n}\n\nsub MAIN($n?) {\n    my Primes $p .= new;\n\n    if $n.defined {\n        say \"$n: {$p.factor($n.Int)}\";\n    }\n    else {\n        say $p.factor( 600_851_475_143 ).[*-1];\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 232,
              "line": 16,
              "column": 1
            },
            "end": {
              "offset": 2616,
              "line": 126,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Largest palindrome product\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob004-unobe.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "-HSXqyCszaAFRapDBlHpP",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Largest palindrome product\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Largest palindrome product\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 55,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 55,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "2dACbsQossCxVJCh3Tonm"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Romano\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Romano\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 56,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 77,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 56,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 77,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "9LbMJjMiAVyGzRStWeOKp"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=4>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=4"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 78,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 116,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A palindromic number reads the same both ways. The largest palindrome made\nfrom the product of two 2-digit numbers is 9009 = 91 × 99.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A palindromic number reads the same both ways. The largest palindrome made\nfrom the product of two 2-digit numbers is 9009 = 91 × 99.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 117,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 251,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the largest palindrome made from the product of two 3-digit numbers.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the largest palindrome made from the product of two 3-digit numbers.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 252,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 326,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 336,
              "line": 17,
              "column": 1
            }
          },
          "id": "5KZpVWz2Ru7xLsO3kzRn0"
        },
        {
          "text": "\n# another case where @array = %*% (100..999) would be nice to have:\n# http://use.perl.org/~dpuu/journal/38142\nsub diagonal_x (@array is copy) {\n        \n    gather while @array.shift -> $this {\n        for @array -> $that { take $this * $that  }\n    }\n}\n\ndiagonal_x(100...999).grep({ $_ eq $_.flip }).sort.reverse.[0].say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 336,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 700,
              "line": 30,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Largest palindrome product\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob004-xfix.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "M109Ypm1ixGjOgMzRyRSc",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Largest palindrome product\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Largest palindrome product\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 55,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 55,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "GRG5sldpC2_JIZruoEjja"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Konrad Borowski\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Konrad Borowski\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 56,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 80,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 56,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 80,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "JulSl3w6ntrwqof6KkDY1"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=4>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=4"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 81,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 119,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A palindromic number reads the same both ways. The largest palindrome made\nfrom the product of two 2-digit numbers is 9009 = 91 × 99.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A palindromic number reads the same both ways. The largest palindrome made\nfrom the product of two 2-digit numbers is 9009 = 91 × 99.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 120,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 254,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the largest palindrome made from the product of two 3-digit numbers.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the largest palindrome made from the product of two 3-digit numbers.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 255,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 329,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 339,
              "line": 17,
              "column": 1
            }
          },
          "id": "GaAOKeaqjeRVD3ijqR6eW"
        },
        {
          "text": "\nmy @nums = 100..^1000;\nsay (@nums X* @nums).grep({.flip eq $_}).max;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 339,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 449,
              "line": 22,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Smallest multiple\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob005-unobe.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "VpdT1P977yPJzaJU5PZDs",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Smallest multiple\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Smallest multiple\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 46,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 46,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "K8D8v_QHOW6vpPr_UADRL"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Romano\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Romano\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 47,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 47,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "EL0bxWhpoS_1OW3_mFtjR"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=5>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=5"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 69,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 107,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "2520 is the smallest number that can be divided by each of the numbers from\n1 to 10 without any remainder.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "2520 is the smallest number that can be divided by each of the numbers from\n1 to 10 without any remainder.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 108,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 215,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the smallest positive number that is evenly divisible by all of the\nnumbers from 1 to 20?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the smallest positive number that is evenly divisible by all of the\nnumbers from 1 to 20?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 216,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 314,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 324,
              "line": 18,
              "column": 1
            }
          },
          "id": "_HAx5SRaHhvoqA0SPqJXC"
        },
        {
          "text": "\nmy @numbers = 2..20;\nmy @factors = @numbers;\nmy %factor;\nfor @numbers -> $num is rw {\n    for @factors -> $factor is rw {\n        next if $num % $factor;\n        my $exp = 0;\n        while $num div= $factor { $exp++; }\n        if !%factor{$factor} || %factor{$factor} < $exp {\n            %factor{$factor} = $exp;\n        };\n    }\n}\nsay [*] %factor.map({ .key**.value });\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 324,
              "line": 18,
              "column": 1
            },
            "end": {
              "offset": 737,
              "line": 35,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Smallest multiple\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob005-xfix.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "MjRd9xbY-Z-LiEsu0-Hwr",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Smallest multiple\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Smallest multiple\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 46,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 46,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "S7JIWXrxTBV1OzZJSaLDa"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Konrad Borowski\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Konrad Borowski\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 47,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 47,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "kuxsPJ_T2IrqGHfVigCub"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=5>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=5"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 72,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 110,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "2520 is the smallest number that can be divided by each of the numbers from\n1 to 10 without any remainder.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "2520 is the smallest number that can be divided by each of the numbers from\n1 to 10 without any remainder.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 111,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 218,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the smallest positive number that is evenly divisible by all of the\nnumbers from 1 to 20?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the smallest positive number that is evenly divisible by all of the\nnumbers from 1 to 20?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 219,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 317,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 327,
              "line": 18,
              "column": 1
            }
          },
          "id": "r0R4GS808crhZ6wdYAZKJ"
        },
        {
          "text": "\nsay [lcm] 1..20;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 327,
              "line": 18,
              "column": 1
            },
            "end": {
              "offset": 385,
              "line": 22,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Sum square difference\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob006-polettix.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "PFhYjG3iUtUtCOCSa8lqm",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Sum square difference\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Sum square difference\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 50,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 50,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "XdfxAYbrUxZNoOLaIIbMv"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "polettix\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "polettix\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 51,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 51,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "6UA2mcaSv-8SPFlas4KD9"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=6>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=6"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 69,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 107,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The sum of the squares of the first ten natural numbers is,\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The sum of the squares of the first ten natural numbers is,\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 108,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 168,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1**2 + 2**2 + ... + 10**2 = 385\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "1**2 + 2**2 + ... + 10**2 = 385\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 169,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 205,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The square of the sum of the first ten natural numbers is,\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The square of the sum of the first ten natural numbers is,\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 206,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 265,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "(1 + 2 + ... + 10)**2 = 55**2 = 3025\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "(1 + 2 + ... + 10)**2 = 55**2 = 3025\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 266,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 307,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Hence the difference between the sum of the squares of the first\nten natural numbers and the square of the sum is 3025 - 385 = 2640.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Hence the difference between the sum of the squares of the first\nten natural numbers and the square of the sum is 3025 - 385 = 2640.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 308,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 441,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the difference between the sum of the squares of the first\none hundred natural numbers and the square of the sum.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the difference between the sum of the squares of the first\none hundred natural numbers and the square of the sum.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 442,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 561,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 571,
              "line": 26,
              "column": 1
            }
          },
          "id": "gIesZH7SLE8eZBLA6qyXv"
        },
        {
          "text": "\n# Upper bound optionally taken from command line, defaults to\n# challenge's request\nmy $upper = shift(@*ARGS) || 100;\n\n# This is quite straightforward: the sum of the first N positive\n# integers is easily computed as (N + 1) * N / 2, hence the square\n# is straightforward. We then subtract the square of each single\n# one to get the final result.\nmy $result = (($upper + 1) * $upper / 2) ** 2;\n$result -= $_ ** 2 for 1 .. $upper;\nsay $result;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 571,
              "line": 26,
              "column": 1
            },
            "end": {
              "offset": 1055,
              "line": 40,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "10001st prime\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob007-polettix.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "AuAe0cW8xxpt-DhKxImyC",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "10001st prime\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "10001st prime\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 42,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 42,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "UG2rNb6IFqE4SOOIh0QCV"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "polettix\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "polettix\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 43,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 60,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 43,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 60,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "_a9TcXHtF3ClTKECRDWFu"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=7>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=7"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 61,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 99,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see\nthat the 6th prime is 13.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see\nthat the 6th prime is 13.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 100,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 201,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the 10001st prime number?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the 10001st prime number?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 202,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 236,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 246,
              "line": 17,
              "column": 1
            }
          },
          "id": "XTwmAxncTCTNQIiu67vIj"
        },
        {
          "text": "\n# A simple implementation of Eratosthenes' sieve\nsub primes_iterator {\n    return sub {\n        state %D;\n        state $q //= 2;\n        while %D{$q}:exists {\n            my $p = %D{$q}:delete;\n\n            my $x = $q + $p;\n            $x += $p while %D{$x} :exists;\n            %D{$x} = $p;\n            ++$q;\n        }\n        %D{$q * $q} = $q;\n        return $q++;\n    }\n}\n\n#= nth: The number of primes we want, defaults to challenge's request\n#= vebose: print verbose progress information\nsub MAIN(Int :$nth = 10001, Bool :$verbose = False) {\n    my $it = primes_iterator();\n    for 1 .. $nth - 1 -> $i {\n        $it();\n        if $verbose {\n            say \"found $i primes so far\" unless $i % 100;\n        }\n    }\n\n    say $it();\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 246,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 1025,
              "line": 51,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Largest product in a series\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob008-duff.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "0COXxcPILE6dt3Xaq4D3k",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Largest product in a series\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Largest product in a series\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 56,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 56,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "yI57TR9Wa26G6GQjFoJcB"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Jonathan Scott Duff\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Jonathan Scott Duff\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 57,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 57,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "zvsxCLk90KmI4CdbfuNEf"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=8>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=8"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 86,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 124,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The four adjacent digits in the 1000-digit number that have the greatest\nproduct are 9 × 9 × 8 × 9 = 5832.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The four adjacent digits in the 1000-digit number that have the greatest\nproduct are 9 × 9 × 8 × 9 = 5832.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 125,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 232,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 233,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 1253,
                  "line": 34,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the thirteen adjacent digits in the 1000-digit number that have the\ngreatest product. What is the value of this product?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the thirteen adjacent digits in the 1000-digit number that have the\ngreatest product. What is the value of this product?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1254,
                  "line": 35,
                  "column": 1
                },
                "end": {
                  "offset": 1380,
                  "line": 37,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1390,
              "line": 39,
              "column": 1
            }
          },
          "id": "D3opSarz5-ckpYAkVkXxy"
        },
        {
          "text": "\nmy $num = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450';\n\nmy $max = 0;\nfor 0..$num.chars-5 -> $i {\n    my $nummette = $num.substr($i,5);\n    my $product = [*] $nummette.comb;\n    $max = $product if $product > $max;\n}\nsay $max;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1390,
              "line": 39,
              "column": 1
            },
            "end": {
              "offset": 2615,
              "line": 51,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Largest product in a series\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob008-duff2.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "qiJyVNa5KrWAY9rELc-xI",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Largest product in a series\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Largest product in a series\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 56,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 56,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "jqujt_UX4JHSo38MGz1wL"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Jonathan Scott Duff\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Jonathan Scott Duff\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 57,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 57,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Bn2tXQaJ_uwwSsb4PmwDr"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=8>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=8"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 86,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 124,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The four adjacent digits in the 1000-digit number that have the greatest\nproduct are 9 × 9 × 8 × 9 = 5832.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The four adjacent digits in the 1000-digit number that have the greatest\nproduct are 9 × 9 × 8 × 9 = 5832.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 125,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 232,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 233,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 1253,
                  "line": 34,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the thirteen adjacent digits in the 1000-digit number that have the\ngreatest product. What is the value of this product?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the thirteen adjacent digits in the 1000-digit number that have the\ngreatest product. What is the value of this product?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1254,
                  "line": 35,
                  "column": 1
                },
                "end": {
                  "offset": 1380,
                  "line": 37,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Basically:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Basically:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1381,
                  "line": 38,
                  "column": 1
                },
                "end": {
                  "offset": 1392,
                  "line": 39,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "build a list of indices,\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "build a list of indices,\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1393,
                          "line": 40,
                          "column": 1
                        },
                        "end": {
                          "offset": 1424,
                          "line": 41,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1393,
                      "line": 40,
                      "column": 1
                    },
                    "end": {
                      "offset": 1424,
                      "line": 41,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "_PjEAgNTpokcl5IKdnELK"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "convert that into a list of 5 character strings that start at those indices,\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "convert that into a list of 5 character strings that start at those indices,\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1424,
                          "line": 41,
                          "column": 1
                        },
                        "end": {
                          "offset": 1507,
                          "line": 42,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1424,
                      "line": 41,
                      "column": 1
                    },
                    "end": {
                      "offset": 1507,
                      "line": 42,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "Y_s5B2DxgUHEM36PQ75pm"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "convert that into a list of the product of the digits\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "convert that into a list of the product of the digits\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1507,
                          "line": 42,
                          "column": 1
                        },
                        "end": {
                          "offset": 1567,
                          "line": 43,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1507,
                      "line": 42,
                      "column": 1
                    },
                    "end": {
                      "offset": 1567,
                      "line": 43,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "NHP7_SSs5jjAtylkPay7g"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "sort the list from #3\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "sort the list from #3\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1567,
                          "line": 43,
                          "column": 1
                        },
                        "end": {
                          "offset": 1595,
                          "line": 44,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1567,
                      "line": 43,
                      "column": 1
                    },
                    "end": {
                      "offset": 1595,
                      "line": 44,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "KHBSJ4D-rZtIaLiPjMMl5"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "reverse it (Yes, I know that this could have been done in #4 instead)\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "reverse it (Yes, I know that this could have been done in #4 instead)\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1595,
                          "line": 44,
                          "column": 1
                        },
                        "end": {
                          "offset": 1671,
                          "line": 45,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1595,
                      "line": 44,
                      "column": 1
                    },
                    "end": {
                      "offset": 1671,
                      "line": 45,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "MXXXhvaUijAlbbhmFNEef"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "grab the first one\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "grab the first one\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1671,
                          "line": 45,
                          "column": 1
                        },
                        "end": {
                          "offset": 1696,
                          "line": 46,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1671,
                      "line": 45,
                      "column": 1
                    },
                    "end": {
                      "offset": 1696,
                      "line": 46,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "pffh0V8wgreklFoq4kg56"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "output the result\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "output the result\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1696,
                          "line": 46,
                          "column": 1
                        },
                        "end": {
                          "offset": 1720,
                          "line": 47,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1696,
                      "line": 46,
                      "column": 1
                    },
                    "end": {
                      "offset": 1720,
                      "line": 47,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "u8tvi_Z0d3l-2W14cfq6p"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "Expected result: 40824\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Expected result: 40824\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1721,
                  "line": 48,
                  "column": 1
                },
                "end": {
                  "offset": 1744,
                  "line": 49,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1754,
              "line": 51,
              "column": 1
            }
          },
          "id": "7gATYWgtkrvSll1VGltA3"
        },
        {
          "text": "\nmy $num = \"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\";\n\n(0..$num.chars - 5).map({substr($num,$_,5)}).map({ [*] $_.comb }).sort({ $^a <=> $^b }).reverse.[0].say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1754,
              "line": 51,
              "column": 1
            },
            "end": {
              "offset": 2915,
              "line": 57,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Special Pythagorean triplet\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob009-gerdr-feeds.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "wE08J4hXwA9BWLV4JVuTv",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Special Pythagorean triplet\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Special Pythagorean triplet\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 56,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 56,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "5aCa0tAoI0pFfNrcHdhgP"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Gerhard R\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Gerhard R\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 57,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 57,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "-LCmEsF5NK57sreWNXJhw"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=9>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=9"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 76,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 114,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A Pythagorean triplet is a set of three natural numbers, a < b < c, for\nwhich,\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A Pythagorean triplet is a set of three natural numbers, a < b < c, for\nwhich,\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 115,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 194,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "a^2 + b^2 = c^2\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "a^2 + b^2 = c^2\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 195,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 215,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 216,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 260,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "There exists exactly one Pythagorean triplet for which a + b + c = 1000.\nFind the product abc.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "There exists exactly one Pythagorean triplet for which a + b + c = 1000.\nFind the product abc.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 261,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 356,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 366,
              "line": 22,
              "column": 1
            }
          },
          "id": "aa9B-5Y_Ou1B6DVHFNgJ6"
        },
        {
          "text": "\nconstant $N = 1000;\n\nmy $result;\n1..Int((1 - sqrt(0.5)) * $N) \\\n\n# compute numerator and denominator of closed expression for b\n==> map -> $a { [ $a, $N * ($N - 2 * $a), 2 * ($N - $a) ] } \\\n\n# check if closed expression yields an integer\n==> grep -> [ $a, $u, $v ] { $u %% $v } \\\n\n# compute b and c\n==> map -> [ $a, $u, $v ] { my $b = $u div $v; [ $a, $b, $N - $a - $b ] } \\\n\n# ... to give the result.\n# XXX Rakudo feed operator wraps results in an extra sequence, thus .[0]\n==> { .[0].say }();\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 366,
              "line": 22,
              "column": 1
            },
            "end": {
              "offset": 902,
              "line": 42,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Special Pythagorean triplet\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob009-gerdr.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "a8jG8bcIVbniS2kf1BWul",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Special Pythagorean triplet\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Special Pythagorean triplet\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 56,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 56,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "TjNzMJItUozTksYTINLTd"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Gerhard R\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Gerhard R\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 57,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 57,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "9oAfxnqrHV24ovpodrFFw"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=9>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=9"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 76,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 114,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A Pythagorean triplet is a set of three natural numbers, a < b < c, for\nwhich,\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A Pythagorean triplet is a set of three natural numbers, a < b < c, for\nwhich,\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 115,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 194,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "a^2 + b^2 = c^2\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "a^2 + b^2 = c^2\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 195,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 215,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 216,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 260,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "There exists exactly one Pythagorean triplet for which a + b + c = 1000.\nFind the product abc.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "There exists exactly one Pythagorean triplet for which a + b + c = 1000.\nFind the product abc.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 261,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 356,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Solution method:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Solution method:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 358,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 375,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Let (a, b, c) be a pythagorean triple\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Let (a, b, c) be a pythagorean triple\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 376,
                  "line": 24,
                  "column": 1
                },
                "end": {
                  "offset": 414,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "a < b < c\na² + b² = c²\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "a < b < c\na² + b² = c²\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 415,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 438,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For N = a + b + c it follows\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For N = a + b + c it follows\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 439,
                  "line": 29,
                  "column": 1
                },
                "end": {
                  "offset": 468,
                  "line": 30,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "b = N·(N - 2a) / 2·(N - a)\nc = N·(N - 2a) / 2·(N - a) + a²/(N - a)\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "b = N·(N - 2a) / 2·(N - a)\nc = N·(N - 2a) / 2·(N - a) + a²/(N - a)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 469,
                  "line": 31,
                  "column": 1
                },
                "end": {
                  "offset": 536,
                  "line": 33,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "which automatically meets b < c.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "which automatically meets b < c.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 537,
                  "line": 34,
                  "column": 1
                },
                "end": {
                  "offset": 570,
                  "line": 35,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The condition a < b gives the constraint\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The condition a < b gives the constraint\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 571,
                  "line": 36,
                  "column": 1
                },
                "end": {
                  "offset": 612,
                  "line": 37,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "a < (1 - 1/√2)·N\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "a < (1 - 1/√2)·N\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 613,
                  "line": 38,
                  "column": 1
                },
                "end": {
                  "offset": 630,
                  "line": 39,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 640,
              "line": 41,
              "column": 1
            }
          },
          "id": "p3qfg1ALtdwOej4kEdgtH"
        },
        {
          "text": "constant \\SQRT2 = sqrt(0.5);\nsub triples($N) {\n    for 1..Int((1 - SQRT2) * $N) -> $a {\n        my $u = $N * ($N - 2 * $a);\n        my $v = 2 * ($N - $a);\n\n        # check if b = u/v is an integer\n        # if so, we've found a triple\n        if $u %% $v {\n            my $b = $u div $v;\n            my $c = $N - $a - $b;\n            return ($a, $b, $c);\n        }\n    }\n}\n\nsay triples(1000);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 640,
              "line": 41,
              "column": 1
            },
            "end": {
              "offset": 1073,
              "line": 60,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Special Pythagorean triplet\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob009-polettix.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "PGyPYzwOLMylxuG625V6Z",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Special Pythagorean triplet\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Special Pythagorean triplet\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 56,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 56,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "Xzdl_N5GXdG3J_fYgVJz5"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Flavio Poletti\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Flavio Poletti\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 57,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 80,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 57,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 80,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "XZpOJpFUV6jDiF1JYsTea"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=9>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=9"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 81,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 119,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A Pythagorean triplet is a set of three natural numbers, a < b < c, for\nwhich,\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A Pythagorean triplet is a set of three natural numbers, a < b < c, for\nwhich,\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 120,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 199,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "a^2 + b^2 = c^2\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "a^2 + b^2 = c^2\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 200,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 220,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 221,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 265,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "There exists exactly one Pythagorean triplet for which a + b + c = 1000.\nFind the product abc.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "There exists exactly one Pythagorean triplet for which a + b + c = 1000.\nFind the product abc.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 266,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 361,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Solution method:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Solution method:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 362,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 379,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "$x + $y + $z = 1000 means that we can solve for $z:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "$x + $y + $z = 1000 means that we can solve for $z:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 380,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 432,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "$z = 1000 - $x - $y\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "$z = 1000 - $x - $y\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 433,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 453,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "We can safely assume that $x < $y < $z because the three numbers will be\ndifferent and can be ordered. Hence, it suffices to iterate $x from 1 up\nto 1000/3, iterate $y from $x + 1 up to the midway to 1000 and get $z\naccordingly. This speeds up things in Rakudo!\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "We can safely assume that $x < $y < $z because the three numbers will be\ndifferent and can be ordered. Hence, it suffices to iterate $x from 1 up\nto 1000/3, iterate $y from $x + 1 up to the midway to 1000 and get $z\naccordingly. This speeds up things in Rakudo!\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 454,
                  "line": 27,
                  "column": 1
                },
                "end": {
                  "offset": 716,
                  "line": 31,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 726,
              "line": 33,
              "column": 1
            }
          },
          "id": "FrXCcUfwl763uF6f0E7EO"
        },
        {
          "text": "\nmy $sum = 1000;\nfor 1 .. ($sum / 3) -> $x {\n    for ($x + 1) .. (($sum + $x) / 2) -> $y {\n        my $z = $sum - $x - $y;\n        if ($z * $z == $x * $x + $y * $y) {\n            say $x * $y * $z;\n            exit;\n        }\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 726,
              "line": 33,
              "column": 1
            },
            "end": {
              "offset": 999,
              "line": 46,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Summation of primes\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob010-polettix.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "4O0nZ09nZExbRRrN51Qep",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Summation of primes\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Summation of primes\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 48,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 48,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "3xwmcjFu7EbTdhViHwnl0"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "polettix\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "polettix\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 49,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 66,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 49,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 66,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "ixf2wWL4Iwnq4aXDoVD6c"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=10>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=10"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 67,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 106,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 107,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 161,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the sum of all the primes below two million.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the sum of all the primes below two million.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 162,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 212,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 222,
              "line": 16,
              "column": 1
            }
          },
          "id": "4WrdHxyn4aPvGdJk2GTGK"
        },
        {
          "text": "\n# The upper bound, defaults to challenge's request\nmy $upper_bound = shift(@*ARGS) || 2_000_000;\n\n# A simple implementation of Eratosthenes' sieve. Modified to avoid\n# registering stuff beyond the $upper_bound.\nsub primes_iterator {\n    return sub {\n        state %D;\n        state $q //= 2;\n        while (%D{$q}:exists) {\n            my $p = %D{$q};\n\n            my $x = $q + $p;\n            $x += $p while %D{$x}:exists;\n            %D{$x} = $p if $x <= $upper_bound;\n            ++$q;\n        }\n        my $q2 = $q * $q;\n        %D{$q2} = $q if $q2 <= $upper_bound;\n        return $q++;\n    }\n}\n\nmy $it = primes_iterator();\nmy $prime = $it();\nmy $sum = 0;\nmy $feedback_threshold = 0; # To give some life signals during computation...\nwhile $prime < $upper_bound {\n    $sum += $prime;\n    if $prime > $feedback_threshold {\n        say \"# Processed up to prime number: $prime\";\n        $feedback_threshold += 10000;\n    }\n    $prime = $it();\n}\nsay 'result: ', $sum;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 222,
              "line": 16,
              "column": 1
            },
            "end": {
              "offset": 1231,
              "line": 55,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Largest product in a grid\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob011-moritz.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "9Aw5P6aDXQBivpOOUJQ7Z",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Largest product in a grid\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Largest product in a grid\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 54,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 54,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "Ifc15kA4XRXbHYa1wJQoT"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Moritz Lenz\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Moritz Lenz\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 55,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 55,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "AE-FiuLTepV5qJb0l7PRS"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=11>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=11"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 76,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 115,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "In the 20×20 grid below, four numbers along a diagonal line have been marked\nin bold.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In the 20×20 grid below, four numbers along a diagonal line have been marked\nin bold.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 116,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 202,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "block",
              "content": [
                {
                  "type": "text",
                  "value": "    08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n    49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n    81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n    52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n    22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n    24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n    32 98 81 28 64 23 67 10 "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "26"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " 38 40 67 59 54 70 66 18 38 64 70\n    67 26 20 68 02 62 12 20 95 "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "63"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " 94 39 63 08 40 91 66 49 94 21\n    24 55 58 05 66 73 99 26 97 17 "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "78"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " 78 96 83 14 88 34 89 63 72\n    21 36 23 09 75 00 76 44 20 45 35 "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "14"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " 00 61 33 97 34 31 33 95\n    78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n    16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n    86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n    19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n    04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n    88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n    04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n    20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n    20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n    01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\n"
                }
              ],
              "name": "code",
              "margin": "",
              "text": "=begin code :allow<B>\n    08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n    49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n    81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n    52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n    22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n    24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n    32 98 81 28 64 23 67 10 B<26> 38 40 67 59 54 70 66 18 38 64 70\n    67 26 20 68 02 62 12 20 95 B<63> 94 39 63 08 40 91 66 49 94 21\n    24 55 58 05 66 73 99 26 97 17 B<78> 78 96 83 14 88 34 89 63 72\n    21 36 23 09 75 00 76 44 20 45 35 B<14> 00 61 33 97 34 31 33 95\n    78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n    16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n    86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n    19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n    04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n    88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n    04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n    20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n    20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n    01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\n=end code\n",
              "config": [
                {
                  "name": "allow",
                  "value": [
                    "B"
                  ],
                  "type": "array"
                }
              ],
              "location": {
                "start": {
                  "offset": 203,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 1527,
                  "line": 36,
                  "column": 1
                }
              },
              "id": "Yc6G__cFSFzXrtGsnkKKG"
            },
            {
              "type": "blankline"
            },
            {
              "text": "The product of these numbers is 26 × 63 × 78 × 14 = 1788696.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The product of these numbers is 26 × 63 × 78 × 14 = 1788696.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1528,
                  "line": 37,
                  "column": 1
                },
                "end": {
                  "offset": 1589,
                  "line": 38,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the greatest product of four adjacent numbers in the same direction\n(up, down, left, right, or diagonally) in the 20×20 grid?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the greatest product of four adjacent numbers in the same direction\n(up, down, left, right, or diagonally) in the 20×20 grid?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1590,
                  "line": 39,
                  "column": 1
                },
                "end": {
                  "offset": 1724,
                  "line": 41,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1734,
              "line": 43,
              "column": 1
            }
          },
          "id": "SWeJeIZj4gLs-C9bvPcBj"
        },
        {
          "text": "\nmy @m =\n    [<08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08>],\n    [<49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00>],\n    [<81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65>],\n    [<52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91>],\n    [<22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80>],\n    [<24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50>],\n    [<32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70>],\n    [<67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21>],\n    [<24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72>],\n    [<21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95>],\n    [<78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92>],\n    [<16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57>],\n    [<86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58>],\n    [<19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40>],\n    [<04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66>],\n    [<88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69>],\n    [<04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36>],\n    [<20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16>],\n    [<20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54>],\n    [<01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48>];\n\nsub prod ($x is copy, $y is copy, $dx, $dy) {\n    my $prod =  @m[$y][$x];\n    for 1..3 {\n        $x += $dx;\n        $y += $dy;\n        $prod *= @m[$y][$x];\n    }\n    return $prod;\n}\n\nmy $max = 0;\n\n# diagonals\nfor 0 .. 16 -> $x {\n    for 0 .. 16 -> $y {\n        $max = $max max prod($x, $y,     1, 1)\n                    max prod($x, $y + 3, 1, -1);\n    }\n}\n\n# horizontal\nfor 0..16 -> $x {\n    for 0..19 -> $y {\n        $max = $max max prod($x, $y, 1, 0);\n    }\n}\n\n# vertical\nfor 0..19 -> $x {\n    for 0..10 -> $y {\n        $max = $max max prod($x, $y, 0, 1);\n    }\n}\n\nsay $max;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1734,
              "line": 43,
              "column": 1
            },
            "end": {
              "offset": 3742,
              "line": 103,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Highly divisible triangular number\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob012-polettix.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "_lwTFIsF71dY93UEzbrYO",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Highly divisible triangular number\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Highly divisible triangular number\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 63,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 63,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "jkG_VJujP5d2QKsQITEBU"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "polettix\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "polettix\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 64,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 81,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 64,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 81,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "ZEF0QSxnOQc5-cq_OaJtw"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=12>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=12"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 82,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 121,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The sequence of triangle numbers is generated by adding the natural\nnumbers. So the 7th triangle number would be\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The sequence of triangle numbers is generated by adding the natural\nnumbers. So the 7th triangle number would be\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 122,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 235,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 236,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 271,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The first ten terms would be:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The first ten terms would be:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 272,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 302,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 303,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 347,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Let us list the factors of the first seven triangle numbers:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Let us list the factors of the first seven triangle numbers:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 348,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 409,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1: 1\n3: 1,3\n6: 1,2,3,6\n10: 1,2,5,10\n15: 1,3,5,15\n21: 1,3,7,21\n28: 1,2,4,7,14,28\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "1: 1\n    3: 1,3\n    6: 1,2,3,6\n   10: 1,2,5,10\n   15: 1,3,5,15\n   21: 1,3,7,21\n   28: 1,2,4,7,14,28\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 410,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 514,
                  "line": 29,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "We can see that 28 is the first triangle number to have over five\ndivisors.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "We can see that 28 is the first triangle number to have over five\ndivisors.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 515,
                  "line": 30,
                  "column": 1
                },
                "end": {
                  "offset": 591,
                  "line": 32,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the value of the first triangle number to have over five\nhundred divisors?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the value of the first triangle number to have over five\nhundred divisors?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 592,
                  "line": 33,
                  "column": 1
                },
                "end": {
                  "offset": 675,
                  "line": 35,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 685,
              "line": 37,
              "column": 1
            }
          },
          "id": "d2dpQFpgeoUwOjGCRquKG"
        },
        {
          "text": "\n# Minimum number of factors, defaults to challenge's request\nmy $t = @*ARGS.shift || 500;\n\n\n# It's easy to tell triangle numbers: they are all of the form\n# ($n * ($n + 1)) / 2. Hence, the factors are those of\n# $n and ($n + 1), less one \"2\" because of the division.\n#\n# We'll iterate through $n, from 2 to... wherever it is needed.\n#\n# We use a factors_progressively_asked() function that is supposed\n# to return factors but requests you to ask factors for numbers\n# progressively (i.e. start from 2, then 3, 4, 5, ...). This allows\n# an optimisation and is perfect in our case, because we need the\n# factors for increasing values of $n.\n\nmy $max = 1;\nmy $n = 2;\nmy %previous_factors = factors_progressively_asked(2);\n\n# Due to lazyness, we'll talk about ($n - 1) and $n instead of $n and\n# ($n + 1).\nwhile ($max <= $t) {\n    $n++;\n    my %this_factors = factors_progressively_asked($n);\n\n    # Now, %previous_factors has the factors for ($n - 1), and\n    # %this_factors has the factors for $n. We mix them all into\n    # %previous_factors and then eliminate one \"2\" to cope with the\n    # division.\n    %previous_factors{$_} += %this_factors{$_} for %this_factors.keys;\n    %previous_factors{2}--; # divide by 2\n\n    # Now, we count the number of different factors\n    my $p = 1;\n    $p *= $_ for %previous_factors.values.map({ $_ + 1 });\n\n    # a little feedback\n    say \"$n $p ($max)\" unless $n % 100;\n\n    # prepare for next iteration: update $max and save %this_factors\n    $max = $p if $max < $p;\n    %previous_factors = %this_factors;\n}\n\nsay 'result: ', ($n * ($n - 1)) / 2;\n\n# In rakudo, the \"is copy\" is needed because of a known bug\n# as of Aug 24th, 2009. Otherwise, the @primes.push($x) gets\n# \"confused\".\nsub factors_progressively_asked ($x is copy) {\n    state @primes;\n    state %factors_for;\n    my $result;\n\n    if (%factors_for{$x}:exists) {\n        $result = %factors_for{$x};\n    }\n    else {\n        for @primes -> $p {\n            if ($x % $p) == 0 { # Bingo! A divisor!\n                # Now, $p is prime, and $x / $p is surely into %factors_for\n                # because we're calling this function progressively, so\n                # we're done.\n                $result = [ $p, %factors_for{$x / $p}.list ];\n            }\n        }\n        if (! $result) { # Ok, there's a new prime in town\n            @primes.push($x);\n            $result = [ $x ];\n        }\n        %factors_for{$x} = $result;\n    }\n\n    # Return as a hash of (factor, occurrences) pairs\n    my %factors;\n    %factors{$_}++ for $result.list;\n    return %factors;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 685,
              "line": 37,
              "column": 1
            },
            "end": {
              "offset": 3288,
              "line": 119,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Large sum\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob013-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "J2h8rMB7sDdvM13T7U_g1",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Large sum\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Large sum\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 38,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 38,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "SzwohzU1ImTzw1Quh_l5M"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 39,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 58,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 39,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 58,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "2UXqZKTpSJtP6su32u4RC"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=13>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=13"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 59,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 98,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Work out the first ten digits of the sum of the following one-hundred\n50-digit numbers.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Work out the first ten digits of the sum of the following one-hundred\n50-digit numbers.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 99,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 187,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "37107287533902102798797998220837590246510135740250\n46376937677490009712648124896970078050417018260538\n74324986199524741059474233309513058123726617309629\n91942213363574161572522430563301811072406154908250\n23067588207539346171171980310421047513778063246676\n89261670696623633820136378418383684178734361726757\n28112879812849979408065481931592621691275889832738\n44274228917432520321923589422876796487670272189318\n47451445736001306439091167216856844588711603153276\n70386486105843025439939619828917593665686757934951\n62176457141856560629502157223196586755079324193331\n64906352462741904929101432445813822663347944758178\n92575867718337217661963751590579239728245598838407\n58203565325359399008402633568948830189458628227828\n80181199384826282014278194139940567587151170094390\n35398664372827112653829987240784473053190104293586\n86515506006295864861532075273371959191420517255829\n71693888707715466499115593487603532921714970056938\n54370070576826684624621495650076471787294438377604\n53282654108756828443191190634694037855217779295145\n36123272525000296071075082563815656710885258350721\n45876576172410976447339110607218265236877223636045\n17423706905851860660448207621209813287860733969412\n81142660418086830619328460811191061556940512689692\n51934325451728388641918047049293215058642563049483\n62467221648435076201727918039944693004732956340691\n15732444386908125794514089057706229429197107928209\n55037687525678773091862540744969844508330393682126\n18336384825330154686196124348767681297534375946515\n80386287592878490201521685554828717201219257766954\n78182833757993103614740356856449095527097864797581\n16726320100436897842553539920931837441497806860984\n48403098129077791799088218795327364475675590848030\n87086987551392711854517078544161852424320693150332\n59959406895756536782107074926966537676326235447210\n69793950679652694742597709739166693763042633987085\n41052684708299085211399427365734116182760315001271\n65378607361501080857009149939512557028198746004375\n35829035317434717326932123578154982629742552737307\n94953759765105305946966067683156574377167401875275\n88902802571733229619176668713819931811048770190271\n25267680276078003013678680992525463401061632866526\n36270218540497705585629946580636237993140746255962\n24074486908231174977792365466257246923322810917141\n91430288197103288597806669760892938638285025333403\n34413065578016127815921815005561868836468420090470\n23053081172816430487623791969842487255036638784583\n11487696932154902810424020138335124462181441773470\n63783299490636259666498587618221225225512486764533\n67720186971698544312419572409913959008952310058822\n95548255300263520781532296796249481641953868218774\n76085327132285723110424803456124867697064507995236\n37774242535411291684276865538926205024910326572967\n23701913275725675285653248258265463092207058596522\n29798860272258331913126375147341994889534765745501\n18495701454879288984856827726077713721403798879715\n38298203783031473527721580348144513491373226651381\n34829543829199918180278916522431027392251122869539\n40957953066405232632538044100059654939159879593635\n29746152185502371307642255121183693803580388584903\n41698116222072977186158236678424689157993532961922\n62467957194401269043877107275048102390895523597457\n23189706772547915061505504953922979530901129967519\n86188088225875314529584099251203829009407770775672\n11306739708304724483816533873502340845647058077308\n82959174767140363198008187129011875491310547126581\n97623331044818386269515456334926366572897563400500\n42846280183517070527831839425882145521227251250327\n55121603546981200581762165212827652751691296897789\n32238195734329339946437501907836945765883352399886\n75506164965184775180738168837861091527357929701337\n62177842752192623401942399639168044983993173312731\n32924185707147349566916674687634660915035914677504\n99518671430235219628894890102423325116913619626622\n73267460800591547471830798392868535206946944540724\n76841822524674417161514036427982273348055556214818\n97142617910342598647204516893989422179826088076852\n87783646182799346313767754307809363333018982642090\n10848802521674670883215120185883543223812876952786\n71329612474782464538636993009049310363619763878039\n62184073572399794223406235393808339651327408011116\n66627891981488087797941876876144230030984490851411\n60661826293682836764744779239180335110989069790714\n85786944089552990653640447425576083659976645795096\n66024396409905389607120198219976047599490197230297\n64913982680032973156037120041377903785566085089252\n16730939319872750275468906903707539413042652315011\n94809377245048795150954100921645863754710598436791\n78639167021187492431995700641917969777599028300699\n15368713711936614952811305876380278410754449733078\n40789923115535562561142322423255033685442488917353\n44889911501440648020369068063960672322193204149535\n41503128880339536053299340368006977710650566631954\n81234880673210146739058568557934581403627822703280\n82616570773948327592232845941706525094512325230608\n22918802058777319719839450180888072429661980811197\n77158542502016545090413245809786882778948721859617\n72107838435069186155435662884062257473692284509516\n20849603980134001723930671666823555245252804609722\n53503534226472524250874054075591789781264330331690\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "37107287533902102798797998220837590246510135740250\n    46376937677490009712648124896970078050417018260538\n    74324986199524741059474233309513058123726617309629\n    91942213363574161572522430563301811072406154908250\n    23067588207539346171171980310421047513778063246676\n    89261670696623633820136378418383684178734361726757\n    28112879812849979408065481931592621691275889832738\n    44274228917432520321923589422876796487670272189318\n    47451445736001306439091167216856844588711603153276\n    70386486105843025439939619828917593665686757934951\n    62176457141856560629502157223196586755079324193331\n    64906352462741904929101432445813822663347944758178\n    92575867718337217661963751590579239728245598838407\n    58203565325359399008402633568948830189458628227828\n    80181199384826282014278194139940567587151170094390\n    35398664372827112653829987240784473053190104293586\n    86515506006295864861532075273371959191420517255829\n    71693888707715466499115593487603532921714970056938\n    54370070576826684624621495650076471787294438377604\n    53282654108756828443191190634694037855217779295145\n    36123272525000296071075082563815656710885258350721\n    45876576172410976447339110607218265236877223636045\n    17423706905851860660448207621209813287860733969412\n    81142660418086830619328460811191061556940512689692\n    51934325451728388641918047049293215058642563049483\n    62467221648435076201727918039944693004732956340691\n    15732444386908125794514089057706229429197107928209\n    55037687525678773091862540744969844508330393682126\n    18336384825330154686196124348767681297534375946515\n    80386287592878490201521685554828717201219257766954\n    78182833757993103614740356856449095527097864797581\n    16726320100436897842553539920931837441497806860984\n    48403098129077791799088218795327364475675590848030\n    87086987551392711854517078544161852424320693150332\n    59959406895756536782107074926966537676326235447210\n    69793950679652694742597709739166693763042633987085\n    41052684708299085211399427365734116182760315001271\n    65378607361501080857009149939512557028198746004375\n    35829035317434717326932123578154982629742552737307\n    94953759765105305946966067683156574377167401875275\n    88902802571733229619176668713819931811048770190271\n    25267680276078003013678680992525463401061632866526\n    36270218540497705585629946580636237993140746255962\n    24074486908231174977792365466257246923322810917141\n    91430288197103288597806669760892938638285025333403\n    34413065578016127815921815005561868836468420090470\n    23053081172816430487623791969842487255036638784583\n    11487696932154902810424020138335124462181441773470\n    63783299490636259666498587618221225225512486764533\n    67720186971698544312419572409913959008952310058822\n    95548255300263520781532296796249481641953868218774\n    76085327132285723110424803456124867697064507995236\n    37774242535411291684276865538926205024910326572967\n    23701913275725675285653248258265463092207058596522\n    29798860272258331913126375147341994889534765745501\n    18495701454879288984856827726077713721403798879715\n    38298203783031473527721580348144513491373226651381\n    34829543829199918180278916522431027392251122869539\n    40957953066405232632538044100059654939159879593635\n    29746152185502371307642255121183693803580388584903\n    41698116222072977186158236678424689157993532961922\n    62467957194401269043877107275048102390895523597457\n    23189706772547915061505504953922979530901129967519\n    86188088225875314529584099251203829009407770775672\n    11306739708304724483816533873502340845647058077308\n    82959174767140363198008187129011875491310547126581\n    97623331044818386269515456334926366572897563400500\n    42846280183517070527831839425882145521227251250327\n    55121603546981200581762165212827652751691296897789\n    32238195734329339946437501907836945765883352399886\n    75506164965184775180738168837861091527357929701337\n    62177842752192623401942399639168044983993173312731\n    32924185707147349566916674687634660915035914677504\n    99518671430235219628894890102423325116913619626622\n    73267460800591547471830798392868535206946944540724\n    76841822524674417161514036427982273348055556214818\n    97142617910342598647204516893989422179826088076852\n    87783646182799346313767754307809363333018982642090\n    10848802521674670883215120185883543223812876952786\n    71329612474782464538636993009049310363619763878039\n    62184073572399794223406235393808339651327408011116\n    66627891981488087797941876876144230030984490851411\n    60661826293682836764744779239180335110989069790714\n    85786944089552990653640447425576083659976645795096\n    66024396409905389607120198219976047599490197230297\n    64913982680032973156037120041377903785566085089252\n    16730939319872750275468906903707539413042652315011\n    94809377245048795150954100921645863754710598436791\n    78639167021187492431995700641917969777599028300699\n    15368713711936614952811305876380278410754449733078\n    40789923115535562561142322423255033685442488917353\n    44889911501440648020369068063960672322193204149535\n    41503128880339536053299340368006977710650566631954\n    81234880673210146739058568557934581403627822703280\n    82616570773948327592232845941706525094512325230608\n    22918802058777319719839450180888072429661980811197\n    77158542502016545090413245809786882778948721859617\n    72107838435069186155435662884062257473692284509516\n    20849603980134001723930671666823555245252804609722\n    53503534226472524250874054075591789781264330331690\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 188,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 5688,
                  "line": 114,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 5698,
              "line": 116,
              "column": 1
            }
          },
          "id": "LQ3SAB9_18v-N2r9mRX0W"
        },
        {
          "text": "\nsay .comb[^10].join given [+] <\n    37107287533902102798797998220837590246510135740250\n    46376937677490009712648124896970078050417018260538\n    74324986199524741059474233309513058123726617309629\n    91942213363574161572522430563301811072406154908250\n    23067588207539346171171980310421047513778063246676\n    89261670696623633820136378418383684178734361726757\n    28112879812849979408065481931592621691275889832738\n    44274228917432520321923589422876796487670272189318\n    47451445736001306439091167216856844588711603153276\n    70386486105843025439939619828917593665686757934951\n    62176457141856560629502157223196586755079324193331\n    64906352462741904929101432445813822663347944758178\n    92575867718337217661963751590579239728245598838407\n    58203565325359399008402633568948830189458628227828\n    80181199384826282014278194139940567587151170094390\n    35398664372827112653829987240784473053190104293586\n    86515506006295864861532075273371959191420517255829\n    71693888707715466499115593487603532921714970056938\n    54370070576826684624621495650076471787294438377604\n    53282654108756828443191190634694037855217779295145\n    36123272525000296071075082563815656710885258350721\n    45876576172410976447339110607218265236877223636045\n    17423706905851860660448207621209813287860733969412\n    81142660418086830619328460811191061556940512689692\n    51934325451728388641918047049293215058642563049483\n    62467221648435076201727918039944693004732956340691\n    15732444386908125794514089057706229429197107928209\n    55037687525678773091862540744969844508330393682126\n    18336384825330154686196124348767681297534375946515\n    80386287592878490201521685554828717201219257766954\n    78182833757993103614740356856449095527097864797581\n    16726320100436897842553539920931837441497806860984\n    48403098129077791799088218795327364475675590848030\n    87086987551392711854517078544161852424320693150332\n    59959406895756536782107074926966537676326235447210\n    69793950679652694742597709739166693763042633987085\n    41052684708299085211399427365734116182760315001271\n    65378607361501080857009149939512557028198746004375\n    35829035317434717326932123578154982629742552737307\n    94953759765105305946966067683156574377167401875275\n    88902802571733229619176668713819931811048770190271\n    25267680276078003013678680992525463401061632866526\n    36270218540497705585629946580636237993140746255962\n    24074486908231174977792365466257246923322810917141\n    91430288197103288597806669760892938638285025333403\n    34413065578016127815921815005561868836468420090470\n    23053081172816430487623791969842487255036638784583\n    11487696932154902810424020138335124462181441773470\n    63783299490636259666498587618221225225512486764533\n    67720186971698544312419572409913959008952310058822\n    95548255300263520781532296796249481641953868218774\n    76085327132285723110424803456124867697064507995236\n    37774242535411291684276865538926205024910326572967\n    23701913275725675285653248258265463092207058596522\n    29798860272258331913126375147341994889534765745501\n    18495701454879288984856827726077713721403798879715\n    38298203783031473527721580348144513491373226651381\n    34829543829199918180278916522431027392251122869539\n    40957953066405232632538044100059654939159879593635\n    29746152185502371307642255121183693803580388584903\n    41698116222072977186158236678424689157993532961922\n    62467957194401269043877107275048102390895523597457\n    23189706772547915061505504953922979530901129967519\n    86188088225875314529584099251203829009407770775672\n    11306739708304724483816533873502340845647058077308\n    82959174767140363198008187129011875491310547126581\n    97623331044818386269515456334926366572897563400500\n    42846280183517070527831839425882145521227251250327\n    55121603546981200581762165212827652751691296897789\n    32238195734329339946437501907836945765883352399886\n    75506164965184775180738168837861091527357929701337\n    62177842752192623401942399639168044983993173312731\n    32924185707147349566916674687634660915035914677504\n    99518671430235219628894890102423325116913619626622\n    73267460800591547471830798392868535206946944540724\n    76841822524674417161514036427982273348055556214818\n    97142617910342598647204516893989422179826088076852\n    87783646182799346313767754307809363333018982642090\n    10848802521674670883215120185883543223812876952786\n    71329612474782464538636993009049310363619763878039\n    62184073572399794223406235393808339651327408011116\n    66627891981488087797941876876144230030984490851411\n    60661826293682836764744779239180335110989069790714\n    85786944089552990653640447425576083659976645795096\n    66024396409905389607120198219976047599490197230297\n    64913982680032973156037120041377903785566085089252\n    16730939319872750275468906903707539413042652315011\n    94809377245048795150954100921645863754710598436791\n    78639167021187492431995700641917969777599028300699\n    15368713711936614952811305876380278410754449733078\n    40789923115535562561142322423255033685442488917353\n    44889911501440648020369068063960672322193204149535\n    41503128880339536053299340368006977710650566631954\n    81234880673210146739058568557934581403627822703280\n    82616570773948327592232845941706525094512325230608\n    22918802058777319719839450180888072429661980811197\n    77158542502016545090413245809786882778948721859617\n    72107838435069186155435662884062257473692284509516\n    20849603980134001723930671666823555245252804609722\n    53503534226472524250874054075591789781264330331690\n>;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 5698,
              "line": 116,
              "column": 1
            },
            "end": {
              "offset": 11274,
              "line": 221,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Longest Collatz sequence\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob014-felher.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "KvXcRD4qgJSGC9ZEUcET_",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Longest Collatz sequence\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Longest Collatz sequence\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 53,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 53,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "ozPR62Mzn69dfxI-xF9PF"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Felix Herrmann\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Felix Herrmann\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 54,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 77,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 54,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 77,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Jx4h_NjrjVSjzCtLZUW4-"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=14>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=14"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 78,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 117,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The following iterative sequence is defined for the set of positive integers:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The following iterative sequence is defined for the set of positive integers:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 118,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 196,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "n → n/2 (n is even)\nn → 3n + 1 (n is odd)\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "n → n/2 (n is even)\nn → 3n + 1 (n is odd)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 197,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 239,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Using the rule above and starting with 13, we generate the following sequence:\n13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Using the rule above and starting with 13, we generate the following sequence:\n13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 240,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 362,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "It can be seen that this sequence (starting at 13 and finishing at 1)\ncontains 10 terms. Although it has not been proved yet (Collatz Problem), it\nis thought that all starting numbers finish at 1.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It can be seen that this sequence (starting at 13 and finishing at 1)\ncontains 10 terms. Although it has not been proved yet (Collatz Problem), it\nis thought that all starting numbers finish at 1.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 363,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 560,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Which starting number, under one million, produces the longest chain?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Which starting number, under one million, produces the longest chain?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 561,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 631,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "NOTE: Once the chain starts the terms are allowed to go above one million.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "NOTE: Once the chain starts the terms are allowed to go above one million.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 632,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 707,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 717,
              "line": 28,
              "column": 1
            }
          },
          "id": "-TTRr1lsoH4ntd3RqpadM"
        },
        {
          "text": "\n# this program takes quite a few minutes on my machine\n\nmy Int multi sub collatz(Int $n where * %% 2) { $n div 2;   }\nmy Int multi sub collatz(Int $n             ) { 3 * $n + 1; }\n\nmy Int sub get-length(Int $n)  {\n    state Int %length{Int} = 1 => 1;\n    my $result = %length{$n} // 1 + get-length collatz $n;\n    %length{$n} = $result;\n    $result;\n}\n\nmy $max = 0;\nmy $start = 0;\nfor 1 ..^ 1_000_000 -> $n {\n    say \"Starting number: $n\" unless $n % 10000; #just for progress\n    my $length = get-length $n;\n\n    if $length > $max {\n        $start = $n;\n        $max = $length;\n    }\n}\n\nsay \"The starting number $start produces a sequence of length $max\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 717,
              "line": 28,
              "column": 1
            },
            "end": {
              "offset": 1415,
              "line": 56,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Lattice paths\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob015-felher.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "GdOYdJB_gSYwlPUTlpArX",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Lattice paths\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Lattice paths\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 42,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 42,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "owAzS3KvFga0zfHkYhpDl"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Felix Herrmann\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Felix Herrmann\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 43,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 66,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 43,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 66,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "bLVw6DLRZ9UHZFCbGpZmx"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=15>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=15"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 67,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 106,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Starting in the top left corner of a 2×2 grid, and only being able to move\nto the right and down, there are exactly 6 routes to the bottom right\ncorner.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Starting in the top left corner of a 2×2 grid, and only being able to move\nto the right and down, there are exactly 6 routes to the bottom right\ncorner.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 107,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 260,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "How many such routes are there through a 20×20 grid?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "How many such routes are there through a 20×20 grid?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 261,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 314,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 324,
              "line": 18,
              "column": 1
            }
          },
          "id": "-qj_GadpS0_cT4aWwFd1K"
        },
        {
          "text": "\n# This program doesn't really simulate anything and is only here for the\n# sake of completeness. But to show something cool about perl6 let's at\n# least introduce the factorial as the ! postfix operator\nmy Int sub postfix:<!>(Int $n) { [*] 1 .. $n }\n\n# The strategy for this Problem is quite straight-forward: To move from the\n# upper left to the lower right corner of an NxN grid without ever going in\n# the wrong direction one has to go down N times and one has to go right N\n# times.  The problem is therefore equivalent to \"How many distinguishable\n# ways exist to order N white and N black balls?\" and the answer to that\n# problem is:\n\nmy \\N = 20;\nsay (2 * N)!/(N! * N!);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 324,
              "line": 18,
              "column": 1
            },
            "end": {
              "offset": 1042,
              "line": 35,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Power digit sum\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob016-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "5DxprBnl1rtZf3J8HEB9L",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Power digit sum\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Power digit sum\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 44,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 44,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "nzMxk0hYDKRyYPD93hIZk"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 45,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 64,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 45,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 64,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "BCzj82hWi5B8S3J5JZII7"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=16>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=16"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 65,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 104,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 105,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 171,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the sum of the digits of the number 2^1000?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the sum of the digits of the number 2^1000?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 172,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 224,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 234,
              "line": 16,
              "column": 1
            }
          },
          "id": "XfRL1Mdx7iy7rn7gyg8HO"
        },
        {
          "text": "\nsay 2**1000 .comb.sum;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 234,
              "line": 16,
              "column": 1
            },
            "end": {
              "offset": 298,
              "line": 20,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Number letter counts\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob017-duff.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "65S3ydWzePE9PsDtU_IVi",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Number letter counts\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Number letter counts\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "_j8VmSOX419Pmgvuw-jIc"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Jonathan Scott Duff\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Jonathan Scott Duff\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 78,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 78,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Woq48xI7CkwlOQ74ESj5h"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=17>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=17"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 79,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 118,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If the numbers 1 to 5 are written out in words: one, two, three, four, five,\nthen there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If the numbers 1 to 5 are written out in words: one, two, three, four, five,\nthen there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 119,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 257,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If all the numbers from 1 to 1000 (one thousand) inclusive were written out\nin words, how many letters would be used?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If all the numbers from 1 to 1000 (one thousand) inclusive were written out\nin words, how many letters would be used?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 258,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 376,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and\nforty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20\nletters. The use of \"and\" when writing out numbers is in compliance with\nBritish usage.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and\nforty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20\nletters. The use of \"and\" when writing out numbers is in compliance with\nBritish usage.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 377,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 616,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 626,
              "line": 23,
              "column": 1
            }
          },
          "id": "Nq40ULjZRlY0g4AAoXGuR"
        },
        {
          "text": "\n# playing with multiple dispatch\n\nmulti sub num-to-word(0) { 'zero' }\nmulti sub num-to-word(1) { 'one' }\nmulti sub num-to-word(2) { 'two' }\nmulti sub num-to-word(3) { 'three' }\nmulti sub num-to-word(4) { 'four' }\nmulti sub num-to-word(5) { 'five' }\nmulti sub num-to-word(6) { 'six' }\nmulti sub num-to-word(7) { 'seven' }\nmulti sub num-to-word(8) { 'eight' }\nmulti sub num-to-word(9) { 'nine' }\nmulti sub num-to-word(10) { 'ten' }\nmulti sub num-to-word(11) { 'eleven' }\nmulti sub num-to-word(12) { 'twelve' }\nmulti sub num-to-word(13) { 'thirteen' }\nmulti sub num-to-word(14) { 'fourteen' }\nmulti sub num-to-word(15) { 'fifteen' }\nmulti sub num-to-word(16) { 'sixteen' }\nmulti sub num-to-word(17) { 'seventeen' }\nmulti sub num-to-word(18) { 'eighteen' }\nmulti sub num-to-word(19) { 'nineteen' }\nmulti sub num-to-word(20) { 'twenty' }\nmulti sub num-to-word(30) { 'thirty' }\nmulti sub num-to-word(40) { 'forty' }\nmulti sub num-to-word(50) { 'fifty' }\nmulti sub num-to-word(60) { 'sixty' }\nmulti sub num-to-word(70) { 'seventy' }\nmulti sub num-to-word(80) { 'eighty' }\nmulti sub num-to-word(90) { 'ninety' }\n\nmulti sub num-to-word($n is copy) {\n    my (@words,$m);\n\n    # The next three lines should be in a loop, but it's not really\n    # worth it for just hundreds and thousands\n    $m = truncate($n / 1000);\n    @words.push: num-to-word($m), 'thousand' unless $m == 0;\n    $n = $n % 1000;\n\n    $m = truncate($n / 100);\n    @words.push: num-to-word($m), 'hundred' unless $m == 0;\n    $n = $n % 100;\n    @words.push: 'and' if $m > 0 and $n > 0;\n\n    if 0 < $n < 20 {\n        @words.push: num-to-word($n);\n    }\n    else {\n        my $r = $n % 10;\n        $n = truncate($n / 10) * 10;\n        @words.push: num-to-word($n) if $n > 0;\n        @words.push: num-to-word($r) if $r > 0;\n    }\n    return @words.join;\n}\n\nmy $max = @*ARGS[0] // 1000;\nmy $count = 0;\n$count += num-to-word($_).chars for 1..$max;\nsay $count;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 626,
              "line": 23,
              "column": 1
            },
            "end": {
              "offset": 2578,
              "line": 87,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Maximum path sum I\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob018-felher.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "XvXlcoDgwAz7UunaxBi7d",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Maximum path sum I\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Maximum path sum I\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 47,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 47,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "oHWbgJTeX0ahvoMFvfGug"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Felix Herrmann\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Felix Herrmann\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 48,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 48,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "BHrIypL0vBA2YJHst3F5r"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=18>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=18"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 72,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 111,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "By starting at the top of the triangle below and moving to adjacent numbers\non the row below, the maximum total from top to bottom is 23.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "By starting at the top of the triangle below and moving to adjacent numbers\non the row below, the maximum total from top to bottom is 23.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 112,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 250,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "block",
              "content": [
                {
                  "type": "text",
                  "value": "    "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "3"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": "\n    "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "7"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " 4\n    2 "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "4"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " 6\n    8 5 "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "9"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " 3\n"
                }
              ],
              "name": "code",
              "margin": "",
              "text": "=begin code :allow<B>\n    B<3>\n    B<7> 4\n    2 B<4> 6\n    8 5 B<9> 3\n=end code\n",
              "config": [
                {
                  "name": "allow",
                  "value": [
                    "B"
                  ],
                  "type": "array"
                }
              ],
              "location": {
                "start": {
                  "offset": 251,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 331,
                  "line": 20,
                  "column": 1
                }
              },
              "id": "YKUrB4L8jsrAjSLLfUuBC"
            },
            {
              "type": "blankline"
            },
            {
              "text": "That is, 3 + 7 + 4 + 9 = 23.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "That is, 3 + 7 + 4 + 9 = 23.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 332,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 361,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the maximum total from top to bottom of the triangle below:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the maximum total from top to bottom of the triangle below:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 362,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 427,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "75\n95 64\n17 47 82\n18 35 87 10\n20 04 82 47 65\n19 01 23 75 03 34\n88 02 77 73 07 63 67\n99 65 04 28 06 16 70 92\n41 41 26 56 83 40 80 70 33\n41 48 72 33 47 32 37 16 94 29\n53 71 44 65 25 43 91 52 97 51 14\n70 11 33 28 77 73 17 78 39 68 17 57\n91 71 52 38 17 14 91 43 58 50 27 29 48\n63 66 04 68 89 53 67 30 73 16 69 87 40 31\n04 62 98 27 23 09 70 98 73 93 38 53 60 04 23\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "75\n    95 64\n    17 47 82\n    18 35 87 10\n    20 04 82 47 65\n    19 01 23 75 03 34\n    88 02 77 73 07 63 67\n    99 65 04 28 06 16 70 92\n    41 41 26 56 83 40 80 70 33\n    41 48 72 33 47 32 37 16 94 29\n    53 71 44 65 25 43 91 52 97 51 14\n    70 11 33 28 77 73 17 78 39 68 17 57\n    91 71 52 38 17 14 91 43 58 50 27 29 48\n    63 66 04 68 89 53 67 30 73 16 69 87 40 31\n    04 62 98 27 23 09 70 98 73 93 38 53 60 04 23\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 428,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 848,
                  "line": 40,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "NOTE: As there are only 16384 routes, it is possible to solve this problem\nby trying every route. However, Problem 67, is the same challenge with a\ntriangle containing one-hundred rows; it cannot be solved by brute force,\nand requires a clever method! ;o)\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "NOTE: As there are only 16384 routes, it is possible to solve this problem\nby trying every route. However, Problem 67, is the same challenge with a\ntriangle containing one-hundred rows; it cannot be solved by brute force,\nand requires a clever method! ;o)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 849,
                  "line": 41,
                  "column": 1
                },
                "end": {
                  "offset": 1105,
                  "line": 45,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1115,
              "line": 47,
              "column": 1
            }
          },
          "id": "fTJTJPalHHSa5ny3B_Pu5"
        },
        {
          "text": "\nmy $triangle =\n    '75\n    95 64\n    17 47 82\n    18 35 87 10\n    20 04 82 47 65\n    19 01 23 75 03 34\n    88 02 77 73 07 63 67\n    99 65 04 28 06 16 70 92\n    41 41 26 56 83 40 80 70 33\n    41 48 72 33 47 32 37 16 94 29\n    53 71 44 65 25 43 91 52 97 51 14\n    70 11 33 28 77 73 17 78 39 68 17 57\n    91 71 52 38 17 14 91 43 58 50 27 29 48\n    63 66 04 68 89 53 67 30 73 16 69 87 40 31\n    04 62 98 27 23 09 70 98 73 93 38 53 60 04 23';\n\nmy @lines = string-to-array($triangle).reverse;\n\n# reduce the triangle by adding up the lines until only one line with one\n# element is left; then print it.\nsay \"{@lines.reduce: &add-maxima}\";\n\n# this function assumes the shorter and longer array to be consecutive lines\n# in an reversed triangle. It then adds each of the maxima of consecutive fields\n# of the longer array to their shared diagonal neighbour in the shorter array.\nsub add-maxima(@longer, @shorter is copy) {\n    for 0 .. @longer - 2 -> $i {\n        @shorter[$i] += max @longer[$i], @longer[$i + 1];\n    }\n    return @shorter;\n}\n\nsub string-to-array($string) {\n    my @lines = $string.lines;\n    @lines .= map(-> $line { $line.comb(/\\d+/).item });\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1115,
              "line": 47,
              "column": 1
            },
            "end": {
              "offset": 2311,
              "line": 87,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Counting Sundays\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob019-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "NzeQAlHgYw6pWPTMufmk-",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Counting Sundays\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Counting Sundays\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 45,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 45,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "QXrnVHYY7duOweXO2Sefo"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 46,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 65,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 46,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 65,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "OGLMTGcX9Ej2QztfxXiSA"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=19>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=19"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 66,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 105,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "You are given the following information, but you may prefer to do some\nresearch for yourself.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You are given the following information, but you may prefer to do some\nresearch for yourself.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 106,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 200,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "1 Jan 1900 was a Monday.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "1 Jan 1900 was a Monday.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 201,
                          "line": 14,
                          "column": 1
                        },
                        "end": {
                          "offset": 232,
                          "line": 15,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 201,
                      "line": 14,
                      "column": 1
                    },
                    "end": {
                      "offset": 232,
                      "line": 15,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "UtvBDNzmP6cdF0Vr4oEQP"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Thirty days has September,\n      April, June and November.\n      All the rest have thirty-one,\n      Saving February alone,\n      Which has twenty-eight, rain or shine.\n      And on leap years, twenty-nine.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Thirty days has September,\n      April, June and November.\n      All the rest have thirty-one,\n      Saving February alone,\n      Which has twenty-eight, rain or shine.\n      And on leap years, twenty-nine.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 232,
                          "line": 15,
                          "column": 1
                        },
                        "end": {
                          "offset": 445,
                          "line": 21,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 232,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 445,
                      "line": 21,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "7uwmNd_qY0E4ogjvo9B3z"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 445,
                          "line": 21,
                          "column": 1
                        },
                        "end": {
                          "offset": 557,
                          "line": 22,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 445,
                      "line": 21,
                      "column": 1
                    },
                    "end": {
                      "offset": 557,
                      "line": 22,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "bw3vCZj8R0a_a896Bv5pS"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "How many Sundays fell on the first of the month during the twentieth century\n(1 Jan 1901 to 31 Dec 2000)?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "How many Sundays fell on the first of the month during the twentieth century\n(1 Jan 1901 to 31 Dec 2000)?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 558,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 664,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 674,
              "line": 27,
              "column": 1
            }
          },
          "id": "cBlIt6gpCT6HvTgM2D3dT"
        },
        {
          "text": "\n# A good guess:\n\nsay 100 * 12 div 7\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 674,
              "line": 27,
              "column": 1
            },
            "end": {
              "offset": 751,
              "line": 33,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Factorial digit sum\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob020-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "uFfSh-EGIQRH3gUyutxE4",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Factorial digit sum\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Factorial digit sum\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 48,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 48,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "i5KuokEhTD8Qa2I7GiNO5"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 49,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 49,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "yjuRSW4dwOshaC8elSysW"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=20>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=20"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 69,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 108,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "n! means n × (n − 1) × ... × 3 × 2 × 1\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "n! means n × (n − 1) × ... × 3 × 2 × 1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 109,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 148,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,\nand the sum of the digits in the number 10! is\n3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,\nand the sum of the digits in the number 10! is\n3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 149,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 283,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the sum of the digits in the number 100!\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the sum of the digits in the number 100!\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 284,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 330,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 340,
              "line": 20,
              "column": 1
            }
          },
          "id": "3zjiXR_6fZunSk8DjYIdc"
        },
        {
          "text": "\nsay [+] .comb given [*] 2..100;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 340,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 413,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Amicable numbers\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob021-gerdr.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "3o0-EzIkfOvS04fAa-ppW",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Amicable numbers\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Amicable numbers\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 45,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 45,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "5l3jvZ5jRgicg6XUjyLJ3"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Gerhard R\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Gerhard R\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 46,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 64,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 46,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 64,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "uz-RT9OzKtQ705o1cLlMF"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=21>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=21"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 65,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 104,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Let d(n) be defined as the sum of proper divisors of n (numbers less than n\nwhich divide evenly into n).  If d(a) = b and d(b) = a, where a ≠ b, then a\nand b are an amicable pair and each of a and b are called amicable numbers.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Let d(n) be defined as the sum of proper divisors of n (numbers less than n\nwhich divide evenly into n).  If d(a) = b and d(b) = a, where a ≠ b, then a\nand b are an amicable pair and each of a and b are called amicable numbers.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 105,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 333,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44,\n55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4,\n71 and 142; so d(284) = 220.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44,\n55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4,\n71 and 142; so d(284) = 220.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 334,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 515,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Evaluate the sum of all the amicable numbers under 10000.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Evaluate the sum of all the amicable numbers under 10000.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 516,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 574,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 584,
              "line": 22,
              "column": 1
            }
          },
          "id": "pP1X3ss8I9wtyeRlBlPVu"
        },
        {
          "text": "\nsub d(Int $n) {\n    my $sum = 1;\n    my $sqrt-n = sqrt $n;\n\n    for 2..Int($sqrt-n) -> $a {\n        my $b = $n div $a;\n        $sum += $a + $b if $a * $b == $n;\n    }\n\n    $sqrt-n ~~ Int ?? $sum - $sqrt-n !! $sum;\n}\n\nmy $sum = 0;\n\nfor 1..100_000 -> $a {\n    my $b = d($a);\n    $sum += $a + $b if $a < $b and d($b) == $a;\n}\n\nsay $sum;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 584,
              "line": 22,
              "column": 1
            },
            "end": {
              "offset": 959,
              "line": 45,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Names scores\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob022-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "FBwhHZHev99Ewf8Nt3IjT",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Names scores\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Names scores\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 41,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 41,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "Xap6Y7KO5dt7af9e2JOpy"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 61,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 61,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "4jVLCAvPmRqRFvRyPLekf"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=22>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=22"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 62,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 101,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Using names.txt a 46K text file containing over five-thousand first names,\nbegin by sorting it into alphabetical order. Then working out the\nalphabetical value for each name, multiply this value by its alphabetical\nposition in the list to obtain a name score.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Using names.txt a 46K text file containing over five-thousand first names,\nbegin by sorting it into alphabetical order. Then working out the\nalphabetical value for each name, multiply this value by its alphabetical\nposition in the list to obtain a name score.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 102,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 362,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For example, when the list is sorted into alphabetical order, COLIN, which\nis worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN\nwould obtain a score of 938 × 53 = 49714.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For example, when the list is sorted into alphabetical order, COLIN, which\nis worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN\nwould obtain a score of 938 × 53 = 49714.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 363,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 557,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the total of all the name scores in the file?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the total of all the name scores in the file?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 558,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 612,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 622,
              "line": 23,
              "column": 1
            }
          },
          "id": "M34U5P3cQq0rqZQZUlq34"
        },
        {
          "text": "\nmy $i = 1;\nconstant A = 'A'.ord - 1;\nmy $names-file = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, \"names.txt\");\nmy $data = slurp $names-file;\nmy @names = sort $data.subst('\"', '', :g).split(',');\nsay [+] gather\nfor @names {\n    take $i++ * [+] .comb».ord »-» A;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 622,
              "line": 23,
              "column": 1
            },
            "end": {
              "offset": 924,
              "line": 35,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Non-abundant sums\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob023-shlomif.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "XzTsDbxUrYOf_-D6FqIH7",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Non-abundant sums\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Non-abundant sums\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 46,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 46,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "WgRC5dIEY1q3nFIgQpS3v"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Shlomi Fish\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Shlomi Fish\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 47,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 67,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 47,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 67,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "r_38nQuMRHpCO34xN7Wmc"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://projecteuler.net/problem=23>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://projecteuler.net/problem=23"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 68,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 106,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A perfect number is a number for which the sum of its proper divisors is\nexactly equal to the number. For example, the sum of the proper divisors of\n28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect\nnumber.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A perfect number is a number for which the sum of its proper divisors is\nexactly equal to the number. For example, the sum of the proper divisors of\n28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect\nnumber.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 107,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 334,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A number n is called deficient if the sum of its proper divisors is less\nthan n and it is called abundant if this sum exceeds n.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A number n is called deficient if the sum of its proper divisors is less\nthan n and it is called abundant if this sum exceeds n.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 335,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 464,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest\nnumber that can be written as the sum of two abundant numbers is 24. By\nmathematical analysis, it can be shown that all integers greater than 28123\ncan be written as the sum of two abundant numbers.  However, this upper\nlimit cannot be reduced any further by analysis even though it is known that\nthe greatest number that cannot be expressed as the sum of two abundant\nnumbers is less than this limit.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest\nnumber that can be written as the sum of two abundant numbers is 24. By\nmathematical analysis, it can be shown that all integers greater than 28123\ncan be written as the sum of two abundant numbers.  However, this upper\nlimit cannot be reduced any further by analysis even though it is known that\nthe greatest number that cannot be expressed as the sum of two abundant\nnumbers is less than this limit.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 465,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 943,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the sum of all the positive integers which cannot be written as the sum\nof two abundant numbers.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the sum of all the positive integers which cannot be written as the sum\nof two abundant numbers.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 944,
                  "line": 27,
                  "column": 1
                },
                "end": {
                  "offset": 1046,
                  "line": 29,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Based on:\nL<https://bitbucket.org/shlomif/project-euler/src/aa5eecd18f0825901afeb3c54dcda0da79ac3576/project-euler/23/euler-23-4.pl?at=default>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Based on:\n"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://bitbucket.org/shlomif/project-euler/src/aa5eecd18f0825901afeb3c54dcda0da79ac3576/project-euler/23/euler-23-4.pl?at=default"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1047,
                  "line": 30,
                  "column": 1
                },
                "end": {
                  "offset": 1191,
                  "line": 32,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1201,
              "line": 34,
              "column": 1
            }
          },
          "id": "VI1rpC80KaG-vsj7gA3eU"
        },
        {
          "text": "\nmy @divisors_sums;\n@divisors_sums[1] = 0;\n\nmy $MAX = 28_123;\nfor (1 .. ($MAX +> 1)) -> $div {\n    loop (my $prod = ($div +< 1); $prod <= $MAX; $prod += $div) {\n        @divisors_sums[$prod] += $div;\n    }\n}\n\n# Memoized.\n#\nmy @is_abundant_sum;\n\nmy @abundants;\nmy $total = 0;\nfor (1 .. $MAX) -> $num {\n    if @divisors_sums[$num] > $num {\n        @abundants.push($num);\n        # The sub { ... } and return are a workaround for the fact that Rakudo\n        # Perl 6 does not have last LABEL yet.\n        my $c = sub {\n            for @abundants -> $i {\n                if ((my $s = $i + $num) > $MAX) {\n                    return;\n                }\n                else {\n                    if (! @is_abundant_sum[$s]) {\n                        $total += $s;\n                        @is_abundant_sum[$s] = True;\n                    }\n                }\n            }\n        };\n\n        $c();\n    }\n}\n\nsay ((((1 + $MAX) * $MAX) +> 1)-$total);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1201,
              "line": 34,
              "column": 1
            },
            "end": {
              "offset": 2183,
              "line": 77,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Lexicographic permutations\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob024-moritz.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "99vIdDYiSofrbVoKa2Xm9",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Lexicographic permutations\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Lexicographic permutations\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 55,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 55,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "TIK8vSDI6CLe0U4J7rIF_"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Moritz Lenz\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Moritz Lenz\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 56,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 76,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 56,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 76,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "lIeTiUrb_kTC5yB0RJNiu"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=24>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=24"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 77,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 116,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A permutation is an ordered arrangement of objects. For example, 3124 is one\npossible permutation of the digits 1, 2, 3 and 4. If all of the permutations\nare listed numerically or alphabetically, we call it lexicographic order.\nThe lexicographic permutations of 0, 1 and 2 are:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A permutation is an ordered arrangement of objects. For example, 3124 is one\npossible permutation of the digits 1, 2, 3 and 4. If all of the permutations\nare listed numerically or alphabetically, we call it lexicographic order.\nThe lexicographic permutations of 0, 1 and 2 are:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 117,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 395,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "012   021   102   120   201   210\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "012   021   102   120   201   210\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 396,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 434,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4,\n5, 6, 7, 8 and 9?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4,\n5, 6, 7, 8 and 9?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 435,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 530,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 540,
              "line": 22,
              "column": 1
            }
          },
          "id": "Bq9Zc2dPH-gJ2BKzIt9kF"
        },
        {
          "text": "\n# idea: the last 9 digits can be permuted in 9! = 362880 ways.  so there are\n# 9! numbers that start with a 0, 9! numbers that start with a 1 etc.\n#\n# So to get the first digit, divide our target by 9!, and the rounded result\n# is the first digit.\n#\n# then we remove the first digit from the pool of available digits, divide\n# the rest by 8!, round, store result in $n. Then the $n'th lowest available\n# digit is the second digit that we search.\n\nmy $target = 1e6;\nmy $t = $target;\n\nsub f(Int $x){\n    [*] 1..$x;\n}\n\nmy @f = map &f, 0..9;\nmy @available = 0 .. 9;\n\nsay gather {\n    for reverse(0..9) -> $marker {\n        my $n = ceiling($t / @f[$marker])- 1;\n        $t -= $n * @f[$marker];\n        take @available[$n];\n        @available.splice($n, 1);\n    }\n}.join('')\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 540,
              "line": 22,
              "column": 1
            },
            "end": {
              "offset": 1350,
              "line": 53,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "1000-digit Fibonacci number\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob025-polettix.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "sR9wZMb6RojW4tjFIeESU",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "1000-digit Fibonacci number\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "1000-digit Fibonacci number\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 56,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 56,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "xIb4dXDi77bypVQDz41r3"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Flavio Poletti\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Flavio Poletti\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 57,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 80,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 57,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 80,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "ytLCRN49iEfkdxob609FG"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=25>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=25"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 81,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 120,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The Fibonacci sequence is defined by the recurrence relation:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The Fibonacci sequence is defined by the recurrence relation:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 121,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 183,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Fn = Fn1 + Fn2, where F1 = 1 and F2 = 1.\nHence the first 12 terms will be:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Fn = Fn1 + Fn2, where F1 = 1 and F2 = 1.\nHence the first 12 terms will be:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 184,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 259,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "F1 = 1\nF2 = 1\nF3 = 2\nF4 = 3\nF5 = 5\nF6 = 8\nF7 = 13\nF8 = 21\nF9 = 34\nF10 = 55\nF11 = 89\nF12 = 144\n",
              "margin": "   ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "F1 = 1\n   F2 = 1\n   F3 = 2\n   F4 = 3\n   F5 = 5\n   F6 = 8\n   F7 = 13\n   F8 = 21\n   F9 = 34\n   F10 = 55\n   F11 = 89\n   F12 = 144\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 260,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 390,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The 12th term, F12, is the first term to contain three digits.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The 12th term, F12, is the first term to contain three digits.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 391,
                  "line": 29,
                  "column": 1
                },
                "end": {
                  "offset": 454,
                  "line": 30,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the first term in the Fibonacci sequence to contain 1000 digits?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the first term in the Fibonacci sequence to contain 1000 digits?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 455,
                  "line": 31,
                  "column": 1
                },
                "end": {
                  "offset": 528,
                  "line": 32,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 538,
              "line": 34,
              "column": 1
            }
          },
          "id": "h6umeZ9j35HPTqkgrfrae"
        },
        {
          "text": "\nsub MAIN(Int :$length = 1000, Bool :$boring = False) {\n    if $boring {\n        my ($x, $y, $c) = (1, 1, 2);\n        ($x, $y, $c) = ($y, $x + $y, $c + 1) while $y.chars < $length;\n        $c.say;\n        return;\n    }\n\n    my @fibs = 0, 1, *+* ... *;\n    ((1..*).grep:{@fibs[$_].chars == $length})[0].say;\n    return;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 538,
              "line": 34,
              "column": 1
            },
            "end": {
              "offset": 899,
              "line": 49,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Reciprocal cycles\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob026-shlomif.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "xolcke8yav7i7K9mXW1vT",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Reciprocal cycles\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Reciprocal cycles\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 46,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 46,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "eQ7cbn-El7WjF03_fdcLC"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Shlomi Fish\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Shlomi Fish\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 47,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 67,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 47,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 67,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "S-SG192Pgf1bxgOJoJu8w"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=26>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=26"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 68,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 107,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A unit fraction contains 1 in the numerator. The decimal representation of\nthe unit fractions with denominators 2 to 10 are given:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A unit fraction contains 1 in the numerator. The decimal representation of\nthe unit fractions with denominators 2 to 10 are given:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 108,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 239,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1/2 =       0.5\n1/3 =       0.(3)\n1/4 =       0.25\n1/5 =       0.2\n1/6 =       0.1(6)\n1/7 =       0.(142857)\n1/8 =       0.125\n1/9 =       0.(1)\n1/10        =       0.1\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "1/2 =       0.5\n    1/3 =       0.(3)\n    1/4 =       0.25\n    1/5 =       0.2\n    1/6 =       0.1(6)\n    1/7 =       0.(142857)\n    1/8 =       0.125\n    1/9 =       0.(1)\n    1/10        =       0.1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 240,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 445,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be\nseen that 1/7 has a 6-digit recurring cycle.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be\nseen that 1/7 has a 6-digit recurring cycle.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 446,
                  "line": 24,
                  "column": 1
                },
                "end": {
                  "offset": 568,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the value of d < 1000 for which 1/d contains the longest recurring\ncycle in its decimal fraction part.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the value of d < 1000 for which 1/d contains the longest recurring\ncycle in its decimal fraction part.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 569,
                  "line": 27,
                  "column": 1
                },
                "end": {
                  "offset": 677,
                  "line": 29,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 687,
              "line": 31,
              "column": 1
            }
          },
          "id": "UYii12llnQ9tmXXKxmABJ"
        },
        {
          "text": "\nsub find_cycle_len(Int $n) returns Int {\n    my %states;\n\n    my $r = 1;\n    my $count = 0;\n\n    while ! ( %states{$r}:exists ) {\n        # $*ERR.say( \"Trace: N = $n ; R = $r\" );\n        %states{$r} = $count++;\n        ($r *= 10) %= $n;\n    }\n\n    return $count - %states{$r};\n}\n\nmy $max_cycle_len = -1;\nmy $max_n;\n\nfor (2 .. 999) -> $n {\n    if ((my $cycle_len = find_cycle_len($n)) > $max_cycle_len) {\n        $max_n = $n;\n        $max_cycle_len = $cycle_len;\n    }\n}\n\nsay \"The recurring cycle is $max_n, and the cycle length is $max_cycle_len\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 687,
              "line": 31,
              "column": 1
            },
            "end": {
              "offset": 1276,
              "line": 60,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Quadratic primes\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob027-shlomif.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "pDE-amdzPNRX_0uGJstdv",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Quadratic primes\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Quadratic primes\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 45,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 45,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "NybiG5EKKMNPs-X-X8l14"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Shlomi Fish\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Shlomi Fish\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 46,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 66,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 46,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 66,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "0L5O_dG27odymtH8qH6g3"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=27>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=27"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 67,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 106,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Euler discovered the remarkable quadratic formula:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Euler discovered the remarkable quadratic formula:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 107,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 158,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "n² + n + 41\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "n² + n + 41\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 159,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 175,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "It turns out that the formula will produce 40 primes for the consecutive\nvalues n = 0 to 39. However, when n = 40, 402 + 40 + 41 = 40(40 + 1) + 41 is\ndivisible by 41, and certainly when n = 41, 41² + 41 + 41 is clearly\ndivisible by 41.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It turns out that the formula will produce 40 primes for the consecutive\nvalues n = 0 to 39. However, when n = 40, 402 + 40 + 41 = 40(40 + 1) + 41 is\ndivisible by 41, and certainly when n = 41, 41² + 41 + 41 is clearly\ndivisible by 41.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 176,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 412,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The incredible formula  n² − 79n + 1601 was discovered, which produces 80\nprimes for the consecutive values n = 0 to 79. The product of the\ncoefficients, −79 and 1601, is −126479.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The incredible formula  n² − 79n + 1601 was discovered, which produces 80\nprimes for the consecutive values n = 0 to 79. The product of the\ncoefficients, −79 and 1601, is −126479.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 413,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 593,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Considering quadratics of the form:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Considering quadratics of the form:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 594,
                  "line": 24,
                  "column": 1
                },
                "end": {
                  "offset": 630,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "n² + an + b, where |a| < 1000 and |b| < 1000\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "n² + an + b, where |a| < 1000 and |b| < 1000\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 631,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 680,
                  "line": 27,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "where |n| is the modulus/absolute value of n\ne.g. |11| = 11 and |−4| = 4\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "where |n| is the modulus/absolute value of n\n    e.g. |11| = 11 and |−4| = 4\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 681,
                  "line": 28,
                  "column": 1
                },
                "end": {
                  "offset": 762,
                  "line": 30,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the product of the coefficients, a and b, for the quadratic expression\nthat produces the maximum number of primes for consecutive values of n,\nstarting with n = 0.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the product of the coefficients, a and b, for the quadratic expression\nthat produces the maximum number of primes for consecutive values of n,\nstarting with n = 0.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 763,
                  "line": 31,
                  "column": 1
                },
                "end": {
                  "offset": 932,
                  "line": 34,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 943,
              "line": 37,
              "column": 1
            }
          },
          "id": "glEVX8oqsIKjQbkaLAofh"
        },
        {
          "text": "\nsub is_prime(Int $n) returns Bool {\n    if ($n <= 1) {\n        return False;\n    }\n\n    for (2 .. $n.sqrt.floor) -> $i {\n        if $n % $i == 0 {\n            return False;\n        }\n    }\n\n    return True;\n}\n\nmy (Int $max_a, Int $max_b);\n\nmy Int $max_iter = 0;\nfor (0 .. 999) -> $b_coeff {\n    for ((-$b_coeff+1) .. 999) -> $a_coeff {\n        my $n = 0;\n        while is_prime($b_coeff+$n*($n+$a_coeff)) {\n            $n++;\n        }\n        $n--;\n\n        if ($n > $max_iter) {\n            ($max_a, $max_b, $max_iter) = ($a_coeff, $b_coeff, $n);\n        }\n    }\n}\nsay \"A sequence length of $max_iter, is generated by a=$max_a, b=$max_b, the product is {$max_a*$max_b}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 943,
              "line": 37,
              "column": 1
            },
            "end": {
              "offset": 1656,
              "line": 71,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Number spiral diagonals\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob028-shlomif.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "o0upmTsWcrMeW9wAePaUO",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Number spiral diagonals\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Number spiral diagonals\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 52,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 52,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "A1HKjS1O71ca9vNYyHTTH"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Shlomi Fish\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Shlomi Fish\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 53,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 73,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 53,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 73,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "hoN7AHCN4CAKP6xNl3TIw"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://projecteuler.net/problem=28>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://projecteuler.net/problem=28"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 74,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 112,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Starting with the number 1 and moving to the right in a clockwise direction a 5\nby 5 spiral is formed as follows:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Starting with the number 1 and moving to the right in a clockwise direction a 5\nby 5 spiral is formed as follows:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 113,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 227,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "21 22 23 24 25\n20  7  8  9 10\n19  6  1  2 11\n18  5  4  3 12\n17 16 15 14 13\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "21 22 23 24 25\n20  7  8  9 10\n19  6  1  2 11\n18  5  4  3 12\n17 16 15 14 13\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 228,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 303,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "It can be verified that the sum of the numbers on the diagonals is 101.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It can be verified that the sum of the numbers on the diagonals is 101.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 304,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 376,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed\nin the same way?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed\nin the same way?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 377,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 474,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 484,
              "line": 26,
              "column": 1
            }
          },
          "id": "zUif98Ot7YIyjly_jQduB"
        },
        {
          "text": "\nmy Int $sum = 0;\n\nmy Int $num = 1;\n\n$sum += $num;\n\nfor 2, 4 ... 1000 -> $step {\n    for 0 .. 3 {\n        $num += $step;\n        $sum += $num;\n    }\n}\nsay $sum;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 484,
              "line": 26,
              "column": 1
            },
            "end": {
              "offset": 685,
              "line": 42,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Distinct powers\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob029-gerdr.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "8TAjKMbfI7KAdGZ19553f",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Distinct powers\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Distinct powers\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 44,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 44,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "eY2W25Ac8dB_EzY5wLpB_"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Gerhard R\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Gerhard R\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 45,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 63,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 45,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 63,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "foMlhooTgj-SMnxa94TOl"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=29>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=29"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 64,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 103,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 104,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 174,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "2^2=4, 2^3=8, 2^4=16, 2^5=32\n3^2=9, 3^3=27, 3^4=81, 3^5=243\n4^2=16, 4^3=64, 4^4=256, 4^5=1024\n5^2=25, 5^3=125, 5^4=625, 5^5=3125\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "2^2=4, 2^3=8, 2^4=16, 2^5=32\n    3^2=9, 3^3=27, 3^4=81, 3^5=243\n    4^2=16, 4^3=64, 4^4=256, 4^5=1024\n    5^2=25, 5^3=125, 5^4=625, 5^5=3125\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 175,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 320,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If they are then placed in numerical order, with any repeats removed, we get\nthe following sequence of 15 distinct terms:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If they are then placed in numerical order, with any repeats removed, we get\nthe following sequence of 15 distinct terms:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 321,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 443,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 444,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 512,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100\nand 2 ≤ b ≤ 100?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100\nand 2 ≤ b ≤ 100?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 513,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 607,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 617,
              "line": 27,
              "column": 1
            }
          },
          "id": "_n8-UWUdo8jY8wetgvdwD"
        },
        {
          "text": "\n# compute number of unique powers a**b with bases \\a in range 2..A\n# and exponents \\b in range 2..B\n\nsub count-naively(Int $A, Int $B) {\n    +(2..$A X=> 2..$B).classify({ .key ** .value })\n}\n\nsub count-smartly(Int $A, Int $B) {\n    my (%powers, %count);\n\n    # find bases which are powers of a preceding root base\n    # store decomposition into base and exponent relative to root\n    for 2..Int(sqrt $A) -> $a {\n        next if $a ~~ %powers;\n        %powers{$a, $a**2, $a**3 ...^ * > $A} = $a X=> 1..*;\n    }\n\n    # count duplicates\n    for %powers.values -> $p {\n        for 2..$B -> $e {\n            # raise to power \\e\n            # classify by root and relative exponent\n            ++%count{$p.key => $p.value * $e}\n        }\n    }\n\n    # add +%count as one of the duplicates needs to be kept\n    return ($A - 1) * ($B - 1) + %count - [+] %count.values;\n}\n\nsub cross(@a, @b) { @a X @b }\nsub dups(@a) { @a - @a.uniq }\nsub count-feedly(Int $A, Int $B) {\n    2..Int(sqrt $A) \\\n    ==> map -> $a { ($a, $a**2, $a**3 ...^ * > $A) Z=> ($a X 1..*).tree } \\\n    ==> reverse() \\\n    ==> hash() \\\n    ==> values() \\\n    ==> cross(2..$B) \\\n    ==> map -> $n, [$r, $e] { ($r) => $e * $n } \\\n    ==> dups() \\\n    ==> (($A - 1) * ($B - 1) - *)();\n}\n\nsub bench(|) {\n    my $start = now;\n    my $result = callsame;\n    my $end = now;\n    return $result, round ($end - $start) * 1000;\n}\n\nmulti MAIN(Int $N, Bool :$verify, Bool :$feeds) {\n    nextwith($N, $N, :$verify, :$feeds)\n}\n\nmulti MAIN(Int $A = 100, Int $B = 100, Bool :$verify, Bool :$feeds) {\n    &count-naively.wrap(&bench);\n    &count-smartly.wrap(&bench);\n    &count-feedly.wrap(&bench);\n\n    my ($result, $runtime) = ($feeds ?? &count-feedly !! &count-smartly)($A, $B);\n    say $result;\n\n    printf \"expected %u [%ums]\\n\", count-naively $A, $B if $verify;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 617,
              "line": 27,
              "column": 1
            },
            "end": {
              "offset": 2467,
              "line": 95,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Distinct powers\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob029-polettix.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "uCR3O_gEVze6l8rku5p5K",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Distinct powers\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Distinct powers\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 44,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 44,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "V85Mx6v2iAvKrbtutUS9E"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Flavio Poletti\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Flavio Poletti\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 45,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 45,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Hlld-OPKSJvbXbrT2n028"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=29>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=29"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 69,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 108,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 109,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 179,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "2^2=4, 2^3=8, 2^4=16, 2^5=32\n3^2=9, 3^3=27, 3^4=81, 3^5=243\n4^2=16, 4^3=64, 4^4=256, 4^5=1024\n5^2=25, 5^3=125, 5^4=625, 5^5=3125\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "2^2=4, 2^3=8, 2^4=16, 2^5=32\n    3^2=9, 3^3=27, 3^4=81, 3^5=243\n    4^2=16, 4^3=64, 4^4=256, 4^5=1024\n    5^2=25, 5^3=125, 5^4=625, 5^5=3125\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 180,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 325,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If they are then placed in numerical order, with any repeats removed, we get\nthe following sequence of 15 distinct terms:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If they are then placed in numerical order, with any repeats removed, we get\nthe following sequence of 15 distinct terms:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 326,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 448,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 449,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 517,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100\nand 2 ≤ b ≤ 100?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100\nand 2 ≤ b ≤ 100?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 518,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 612,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 622,
              "line": 27,
              "column": 1
            }
          },
          "id": "eVTyvusTRkPmRY8i_GYnq"
        },
        {
          "text": "\n# Range upper limit, defaults to challenge's value\nmy $max = @*ARGS.shift || 100;\n\n# Integers up to the square root of the maximum value may lead to\n# colliding items in the whole list, so we have to count them\n# properly in order to get rid of duplicates. For example,\n#\n#    2**8=256 is equal to 16**2\n#\n# In addition to this, some items under the square root might\n# lead to another kind of duplication. For example,\n#\n#    2**4=16  is equal to  4**2\n#\n# Hence, we'll skip the latter completely in our analysis from 2\n# to the square root, and count the former according to the possible\n# exponents.\nmy (%mark_for, %already_done);\nfor 2 .. sqrt($max).Int -> $i {\n    next if %already_done{$i};\n\n    my $x = $i;\n    my $exp = 1;\n    while ($x <= $max) {\n        %already_done{$x} = 1;\n        for 2 .. $max -> $f {\n            %mark_for{$i} ||= {}; # avoid autovivification for now...\n            %mark_for{$i}{$f * $exp} = 1;\n        }\n        ++$exp;\n        $x *= $i;\n    }\n}\n\n# Now, every element not already considered contributes only with\n# unique elements. We have to remember that ranges start from 2, so\n# we have to subtract 1 from $max\nmy $count = ($max - 1 - %already_done.keys) * ($max - 1);\n\n# Then, we add the unique elements from what we analysed before,\n# simply counting the number of elements that could potentially collide\nfor %mark_for.values -> $v {\n    $count += $v.elems;\n}\n\n$count.say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 622,
              "line": 27,
              "column": 1
            },
            "end": {
              "offset": 2077,
              "line": 76,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Coin sums\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob031-shlomif.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "0OpVyrJNzulUjTwqMJkJZ",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Coin sums\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Coin sums\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 38,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 38,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "D8chXRsGtHYS7WgCmcWA9"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Shlomi Fish\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Shlomi Fish\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 39,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 59,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 39,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 59,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "UdOu5DhCFeOS4fVxyrX9z"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=31>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=31"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 60,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 99,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "In England the currency is made up of pound, £, and pence, p, and there are\neight coins in general circulation:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In England the currency is made up of pound, £, and pence, p, and there are\neight coins in general circulation:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 100,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 212,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 213,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 269,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "It is possible to make £2 in the following way:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It is possible to make £2 in the following way:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 270,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 318,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 319,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 365,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "How many different ways can £2 be made using any number of coins?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "How many different ways can £2 be made using any number of coins?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 366,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 432,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 442,
              "line": 23,
              "column": 1
            }
          },
          "id": "qnCC1HRmK8Ri47Wy01OZC"
        },
        {
          "text": "\nmy @coins = (1,2,5,10,20,50,100,200);\n\nmy @r_coins = @coins.reverse;\n\nmy %cache;\n\nsub calc(Int $max_idx, Int $sum) {\n    return %cache{\"$max_idx,$sum\"} //= do {\n        my Int $ret;\n        if ($max_idx == @r_coins.end) {\n            $ret = 1;\n        }\n        elsif ($sum < @r_coins[$max_idx]) {\n            $ret = calc($max_idx+1, $sum);\n        }\n        else {\n            $ret =\n            (\n                calc($max_idx+1, $sum)\n                + calc($max_idx, $sum-@r_coins[$max_idx])\n            );\n        }\n        $ret;\n    };\n}\n\nprint calc(0, 200), \"\\n\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 442,
              "line": 23,
              "column": 1
            },
            "end": {
              "offset": 1054,
              "line": 53,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Digit cancelling fractions\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob033-andreoss.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "7MR4AvQz9zVlfQld6L8DS",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Digit cancelling fractions\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Digit cancelling fractions\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 55,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 55,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "lUF3K4mDqM_XhXG32qaLx"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Andrei Osipov\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Andrei Osipov\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 56,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 78,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 56,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 78,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "RoPCCUw8vvRdQ4IzPUQy7"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=33>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=33"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 79,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 118,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The fraction 49/98 is a curious fraction, as an inexperienced\nmathematician in attempting to simplify it may incorrectly believe\nthat 49/98 = 4/8, which is correct, is obtained by cancelling the 9s.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The fraction 49/98 is a curious fraction, as an inexperienced\nmathematician in attempting to simplify it may incorrectly believe\nthat 49/98 = 4/8, which is correct, is obtained by cancelling the 9s.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 119,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 318,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "We shall consider fractions like, 30/50 = 3/5, to be trivial examples.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "We shall consider fractions like, 30/50 = 3/5, to be trivial examples.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 319,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 390,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "There are exactly four non-trivial examples of this type of fraction,\nless than one in value, and containing two digits in the numerator and\ndenominator.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "There are exactly four non-trivial examples of this type of fraction,\nless than one in value, and containing two digits in the numerator and\ndenominator.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 391,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 545,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If the product of these four fractions is given in its lowest common\nterms, find the value of the denominator.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If the product of these four fractions is given in its lowest common\nterms, find the value of the denominator.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 546,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 657,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 667,
              "line": 25,
              "column": 1
            }
          },
          "id": "aRORoOFfdIjz5trjc_GXm"
        },
        {
          "text": "\nsub is-curious($num, $den) {\n    my @d = $den.comb;\n    my @n = $num.comb;\n    @d[0] == @n[1] && @n[0]/@d[1] == $num/$den;\n}\n\nsay 1 / [*] gather for 10 ...^ 100 -> $den {\n    for 10 ...^ $den -> $num {\n        take $num/$den if is-curious $num, $den;\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 667,
              "line": 25,
              "column": 1
            },
            "end": {
              "offset": 967,
              "line": 39,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Digit factorials\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob034-quinny.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "PkMzC-FT0qHQ-UIPqUUbW",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Digit factorials\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Digit factorials\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 45,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 45,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "5gzBtKPTDDGZsgwhHg3Nj"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Quinn Perfetto\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Quinn Perfetto\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 46,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 69,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 46,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 69,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "B3yponBb2kjNGxyxRenon"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=34>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=34"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 70,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 109,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 110,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 173,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the sum of all numbers which are equal to the sum of the factorial of their digits.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the sum of all numbers which are equal to the sum of the factorial of their digits.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 174,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 263,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Note: as 1! = 1 and 2! = 2 are not sums they are not included.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Note: as 1! = 1 and 2! = 2 are not sums they are not included.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 264,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 327,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 337,
              "line": 18,
              "column": 1
            }
          },
          "id": "c6oJqt7ORO0LE0xMxCGob"
        },
        {
          "text": "\nsub fact ($n) {\n    [*] 1..$n;\n}\n\nsub factDigits ($n is copy) {\n    [+] gather while $n > 0 {\n        take fact $n % 10;\n        $n div= 10;\n    }\n}\n\nsay [+] gather for 3...40586 {\n    take $_ if factDigits($_) == $_\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 337,
              "line": 18,
              "column": 1
            },
            "end": {
              "offset": 597,
              "line": 35,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Double-base palindromes\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob036-xenu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "YtmQWUGaTWQhg1I0LGcE9",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Double-base palindromes\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Double-base palindromes\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 52,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 52,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "TnxMdL6Co3zgG0CFvvLPQ"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "xenu\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "xenu\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 53,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 66,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 53,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 66,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "YJQfDLrMF-hSfHgdh7zJf"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=36>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=36"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 67,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 106,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The decimal number, 585 = 1001001001_2 (binary), is palindromic in both\nbases.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The decimal number, 585 = 1001001001_2 (binary), is palindromic in both\nbases.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 107,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 186,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the sum of all numbers, less than one million, which are palindromic in\nbase 10 and base 2.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the sum of all numbers, less than one million, which are palindromic in\nbase 10 and base 2.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 187,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 284,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "(Please note that the palindromic number, in either base, may not include\nleading zeros.)\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "(Please note that the palindromic number, in either base, may not include\nleading zeros.)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 285,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 375,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 385,
              "line": 21,
              "column": 1
            }
          },
          "id": "VwtTUxZcYMPGiEHwYCCbk"
        },
        {
          "text": "\n#\n# DON'T TRY  EXECUTING THIS SCRIPT WITH RAKUDO 2010.08 OR OLDER!\n# Because of memory leak in these versions, this code eats tens of gigabytes of RAM\n#\n\nsub MAIN(Bool :$verbose = False) {\n    my $palindromNumbersSum = 0;\n    loop (my $i = 1; $i <= 999999; $i+=2) {\n        if ( ($i.flip == $i) && (sprintf('%b',$i).flip == sprintf('%b',$i)) ) {\n            $palindromNumbersSum += $i;\n        }\n        if $verbose {\n            say \"Checked $i of 999999 numbers\" unless $i % 99999;\n        }\n\n    }\n    if $verbose {\n        say \"Number of double-base palindromes: $palindromNumbersSum\";\n    }\n    else {\n        say $palindromNumbersSum;\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 385,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 1075,
              "line": 47,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Pandigital multiples\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob038-andreoss.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "iDEvGgS2TThUlISst2Noc",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Pandigital multiples\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Pandigital multiples\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "0uJgy0TkDe_RbPV1xNggr"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Andrei Osipov\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Andrei Osipov\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 72,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 72,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "AEGEptM9btlnSHqb9B6pc"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=38>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=38"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 73,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 112,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Take the number 192 and multiply it by each of 1, 2, and 3:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Take the number 192 and multiply it by each of 1, 2, and 3:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 113,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 173,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "192 × 1 = 192\n192 × 2 = 384\n192 × 3 = 576\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "192 × 1 = 192\n192 × 2 = 384\n192 × 3 = 576\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 174,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 216,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "By concatenating each product we get the 1 to 9 pandigital,\n192384576. We will call 192384576 the concatenated product of 192 and\n(1,2,3)\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "By concatenating each product we get the 1 to 9 pandigital,\n192384576. We will call 192384576 the concatenated product of 192 and\n(1,2,3)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 217,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 355,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The same can be achieved by starting with 9 and multiplying by 1, 2,\n3, 4, and 5, giving the pandigital, 918273645, which is the\nconcatenated product of 9 and (1,2,3,4,5).\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The same can be achieved by starting with 9 and multiplying by 1, 2,\n3, 4, and 5, giving the pandigital, 918273645, which is the\nconcatenated product of 9 and (1,2,3,4,5).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 356,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 528,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the largest 1 to 9 pandigital 9-digit number that can be\nformed as the concatenated product of an integer with (1,2, ... , n)\nwhere n > 1?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the largest 1 to 9 pandigital 9-digit number that can be\nformed as the concatenated product of an integer with (1,2, ... , n)\nwhere n "
                },
                {
                  "type": "text",
                  "value": ">"
                },
                {
                  "type": "text",
                  "value": " 1?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 529,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 676,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 686,
              "line": 30,
              "column": 1
            }
          },
          "id": "Hhqnahz4wiWOVndde72pH"
        },
        {
          "text": "\nsub concat-product($x, $n) {\n    + [~] do for 1...$n { $x * $_ }\n}\n\nsub is-pandigital(Int $n is copy) {\n    return unless 123456789 <= $n <= 987654321;\n    my $x = 0;\n    loop ( ; $n != 0 ; $n div=10) {\n        my $d = $n mod 10;\n        $x += $d * 10 ** (9 - $d);\n    }\n    $x == 123456789;\n}\n\nsay max gather for 1 .. 9999 -> $x {\n    next if $x !~~ /^^9/;\n    for 2 .. 5 -> $n {\n        my $l = concat-product $x, $n;\n        take $l if is-pandigital $l;\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 686,
              "line": 30,
              "column": 1
            },
            "end": {
              "offset": 1192,
              "line": 54,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Integer right triangles\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob039-quinny.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "IVZRrBRdgFh5XKCBoacQ1",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Integer right triangles\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Integer right triangles\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 52,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 52,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "0uaa0YvgxOGrJYrcW3g7A"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Quinn Perfetto\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Quinn Perfetto\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 53,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 76,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 53,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 76,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "c46MFNX_mZPfJLuBqKTRY"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=39>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=39"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 77,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 116,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 117,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 249,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "{20,48,52}, {24,45,51}, {30,40,50}\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "{20,48,52}, {24,45,51}, {30,40,50}\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 250,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 285,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For which value of p ≤ 1000, is the number of solutions maximised?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For which value of p ≤ 1000, is the number of solutions maximised?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 286,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 353,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 363,
              "line": 18,
              "column": 1
            }
          },
          "id": "a23PPtPGXFVqmxyrofJeV"
        },
        {
          "text": "\nsub isTriple($a, $b, $c) {\n    ($a * $a) + ($b * $b) == ($c * $c);\n}\n\nsub solutionsFor($p) {\n    [+] gather for 1 .. $p -> $i {\n        for ($i + 1) .. ($p - $i) -> $j {\n            my $k = $p - $i - $j;\n            take isTriple($i, $j, $k)\n        }\n    }\n}\n\nmy $max = 0;\nmy $perim = 0;\nfor 3 .. 1000 {\n    my $check = solutionsFor $_;\n    if $check > $max {\n        $max = $check;\n        $perim = $_;\n    }\n}\n\nsay $perim;\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 363,
              "line": 18,
              "column": 1
            },
            "end": {
              "offset": 790,
              "line": 43,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Pandigital Prime\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob041-heyajulia-alternative.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "qU_kaDMFAehl5-VzpuJcm",
      "margin": "",
      "name": "root",
      "content": [
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Pandigital Prime\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Pandigital Prime\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 12,
                      "line": 3,
                      "column": 1
                    },
                    "end": {
                      "offset": 36,
                      "line": 4,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 12,
                  "line": 3,
                  "column": 1
                },
                "end": {
                  "offset": 36,
                  "line": 4,
                  "column": 1
                }
              },
              "id": "EoxHXlSyV_stafdh_HmlC"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Julia (GitHub: heyajulia)\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Julia (GitHub: heyajulia)\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 37,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 37,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "nKu-vS7kRO_Un29pVA7HK"
            },
            {
              "type": "blankline"
            },
            {
              "text": "We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example,\n2143 is a 4-digit pandigital and is also prime. What is the largest n-digit pandigital prime that exists?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example,\n2143 is a 4-digit pandigital and is also prime. What is the largest n-digit pandigital prime that exists?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 72,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 296,
                  "line": 9,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "What's interesting here?\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "What's interesting here?\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 297,
                      "line": 10,
                      "column": 1
                    },
                    "end": {
                      "offset": 329,
                      "line": 11,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 297,
                  "line": 10,
                  "column": 1
                },
                "end": {
                  "offset": 329,
                  "line": 11,
                  "column": 1
                }
              },
              "level": "1",
              "id": "What's-interesting-here"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Note: This is a cleverer (and theoretically faster) solution than prob041-heyajulia.raku.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Note: This is a cleverer (and theoretically faster) solution than prob041-heyajulia.raku.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 330,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 420,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "This example showcases backwards C<Seq>s, the topic variable C<$_> and implicitly calling a method on it, blocks,\nbreaking out of a loop with C<last>, the fact that empty arrays are falsey, the topicalizer C<given>, and the hyper\nmethod call operator C<».>.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "This example showcases backwards "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "Seq"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": "s, the topic variable "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "$_"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " and implicitly calling a method on it, blocks,\nbreaking out of a loop with "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "last"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": ", the fact that empty arrays are falsey, the topicalizer "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "given"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": ", and the hyper\nmethod call operator "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "»."
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": ".\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 421,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 679,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "More\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "More\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 680,
                      "line": 18,
                      "column": 1
                    },
                    "end": {
                      "offset": 692,
                      "line": 19,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 680,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 692,
                  "line": 19,
                  "column": 1
                }
              },
              "level": "1",
              "id": "More"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=41>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=41"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 693,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 732,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Features used\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Features used\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 733,
                      "line": 22,
                      "column": 1
                    },
                    "end": {
                      "offset": 754,
                      "line": 23,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 733,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 754,
                  "line": 23,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Features-used"
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Backwards C<Seq>s - https://docs.raku.org/routine/%2E%2E%2E\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Backwards "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Seq"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": "s - https://docs.raku.org/routine/%2E%2E%2E\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 755,
                          "line": 24,
                          "column": 1
                        },
                        "end": {
                          "offset": 821,
                          "line": 25,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 755,
                      "line": 24,
                      "column": 1
                    },
                    "end": {
                      "offset": 821,
                      "line": 25,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "rMvLhWrzLhl4y5Ncg_MEi"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "C<$_> and implicitly calling a method on it - https://docs.raku.org/syntax/%24_\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "$_"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " and implicitly calling a method on it - https://docs.raku.org/syntax/%24_\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 821,
                          "line": 25,
                          "column": 1
                        },
                        "end": {
                          "offset": 907,
                          "line": 26,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 821,
                      "line": 25,
                      "column": 1
                    },
                    "end": {
                      "offset": 907,
                      "line": 26,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "mbDX5Ge31gwvvwFw7BNgr"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Blocks - https://docs.raku.org/syntax/blocks\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Blocks - https://docs.raku.org/syntax/blocks\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 907,
                          "line": 26,
                          "column": 1
                        },
                        "end": {
                          "offset": 958,
                          "line": 27,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 907,
                      "line": 26,
                      "column": 1
                    },
                    "end": {
                      "offset": 958,
                      "line": 27,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "YZiKVABvTvzr_tog44F78"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Breaking out of a loop with C<last> - https://docs.raku.org/syntax/last\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Breaking out of a loop with "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "last"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " - https://docs.raku.org/syntax/last\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 958,
                          "line": 27,
                          "column": 1
                        },
                        "end": {
                          "offset": 1036,
                          "line": 28,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 958,
                      "line": 27,
                      "column": 1
                    },
                    "end": {
                      "offset": 1036,
                      "line": 28,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "PEN7jyi8wjYHLipbDSV4q"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Empty arrays are falsey\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Empty arrays are falsey\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1036,
                          "line": 28,
                          "column": 1
                        },
                        "end": {
                          "offset": 1066,
                          "line": 29,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1036,
                      "line": 28,
                      "column": 1
                    },
                    "end": {
                      "offset": 1066,
                      "line": 29,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "ZNmOlqtK98l2FJ3TRkKYO"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "The topicalizer C<given> - https://docs.raku.org/syntax/given\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "The topicalizer "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "given"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " - https://docs.raku.org/syntax/given\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1066,
                          "line": 29,
                          "column": 1
                        },
                        "end": {
                          "offset": 1134,
                          "line": 30,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1066,
                      "line": 29,
                      "column": 1
                    },
                    "end": {
                      "offset": 1134,
                      "line": 30,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "sHlsWvPncJXzWa4tZjzsk"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Hyper method call operator C<».>. - https://docs.raku.org/language/operators#methodop_%C2%BB%2E_/_methodop_%3E%3E%2E\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Hyper method call operator "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "»."
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": ". - https://docs.raku.org/language/operators#methodop_%C2%BB%2E_/_methodop_%3E%3E%2E\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1134,
                          "line": 30,
                          "column": 1
                        },
                        "end": {
                          "offset": 1257,
                          "line": 31,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1134,
                      "line": 30,
                      "column": 1
                    },
                    "end": {
                      "offset": 1257,
                      "line": 31,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "V_hqnWpT9z6vREOt-Xzwz"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "The answer is 7652413.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The answer is 7652413.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1258,
                  "line": 32,
                  "column": 1
                },
                "end": {
                  "offset": 1281,
                  "line": 33,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 1291,
              "line": 35,
              "column": 1
            }
          },
          "id": "Mh1XixB_Rc4FS7dulCP-A"
        },
        {
          "text": "\nfor 9...1 {\n    { say .max; last; } if $_ given permutations(1..$_)».join.grep(*.is-prime);\n}\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1291,
              "line": 35,
              "column": 1
            },
            "end": {
              "offset": 1386,
              "line": 39,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Pandigital Prime\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob041-heyajulia.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "G9GotrHCdcFp1WabV9ISy",
      "margin": "",
      "name": "root",
      "content": [
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Pandigital Prime\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Pandigital Prime\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 12,
                      "line": 3,
                      "column": 1
                    },
                    "end": {
                      "offset": 36,
                      "line": 4,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 12,
                  "line": 3,
                  "column": 1
                },
                "end": {
                  "offset": 36,
                  "line": 4,
                  "column": 1
                }
              },
              "id": "MyJ_nepceig2iGzys46tA"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Julia (GitHub: heyajulia)\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Julia (GitHub: heyajulia)\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 37,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 37,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "4Th304mA38xsWzqOtKnWb"
            },
            {
              "type": "blankline"
            },
            {
              "text": "We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example,\n2143 is a 4-digit pandigital and is also prime. What is the largest n-digit pandigital prime that exists?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example,\n2143 is a 4-digit pandigital and is also prime. What is the largest n-digit pandigital prime that exists?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 72,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 296,
                  "line": 9,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "What's interesting here?\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "What's interesting here?\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 297,
                      "line": 10,
                      "column": 1
                    },
                    "end": {
                      "offset": 329,
                      "line": 11,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 297,
                  "line": 10,
                  "column": 1
                },
                "end": {
                  "offset": 329,
                  "line": 11,
                  "column": 1
                }
              },
              "level": "1",
              "id": "What's-interesting-here"
            },
            {
              "type": "blankline"
            },
            {
              "text": "This example showcases Raku's support for functional programming, handy built-in functions like C<permutations>,\neffortless parallelism with C<race>, and how flexible Raku is when it comes to type conversion. Notic how we join each\npermutation into a string and check if it's prime without having to convert it to a number ourselves.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "This example showcases Raku's support for functional programming, handy built-in functions like "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "permutations"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": ",\neffortless parallelism with "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "race"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": ", and how flexible Raku is when it comes to type conversion. Notic how we join each\npermutation into a string and check if it's prime without having to convert it to a number ourselves.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 330,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 664,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "More\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "More\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 665,
                      "line": 16,
                      "column": 1
                    },
                    "end": {
                      "offset": 677,
                      "line": 17,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 665,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 677,
                  "line": 17,
                  "column": 1
                }
              },
              "level": "1",
              "id": "More"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=41>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=41"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 678,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 717,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Features used\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Features used\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 718,
                      "line": 20,
                      "column": 1
                    },
                    "end": {
                      "offset": 739,
                      "line": 21,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 718,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 739,
                  "line": 21,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Features-used"
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Ranges - L<https://docs.raku.org/type/Range>\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Ranges - "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "https://docs.raku.org/type/Range"
                            }
                          ],
                          "type": "fcode",
                          "name": "L",
                          "meta": null
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 740,
                          "line": 22,
                          "column": 1
                        },
                        "end": {
                          "offset": 791,
                          "line": 23,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 740,
                      "line": 22,
                      "column": 1
                    },
                    "end": {
                      "offset": 791,
                      "line": 23,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "pS5jGREt2NFUIA1C7s3FV"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "C<permutations> - L<https://docs.raku.org/routine/permutations>\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "permutations"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " - "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "https://docs.raku.org/routine/permutations"
                            }
                          ],
                          "type": "fcode",
                          "name": "L",
                          "meta": null
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 791,
                          "line": 23,
                          "column": 1
                        },
                        "end": {
                          "offset": 861,
                          "line": 24,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 791,
                      "line": 23,
                      "column": 1
                    },
                    "end": {
                      "offset": 861,
                      "line": 24,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "HMqwl5rRb8rqIrWIsHrGm"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "C<Slip> - L<https://docs.raku.org/type/Slip>\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Slip"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " - "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "https://docs.raku.org/type/Slip"
                            }
                          ],
                          "type": "fcode",
                          "name": "L",
                          "meta": null
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 861,
                          "line": 24,
                          "column": 1
                        },
                        "end": {
                          "offset": 912,
                          "line": 25,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 861,
                      "line": 24,
                      "column": 1
                    },
                    "end": {
                      "offset": 912,
                      "line": 25,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "iFYAKJIoVQE1APg3_znmB"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "C<race> - L<https://docs.raku.org/routine/race>\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "race"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " - "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "https://docs.raku.org/routine/race"
                            }
                          ],
                          "type": "fcode",
                          "name": "L",
                          "meta": null
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 912,
                          "line": 25,
                          "column": 1
                        },
                        "end": {
                          "offset": 966,
                          "line": 26,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 912,
                      "line": 25,
                      "column": 1
                    },
                    "end": {
                      "offset": 966,
                      "line": 26,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "IwQVAUDArLBy039CsgOHs"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Terse syntax for a hash with numeric values: C<(:16degree, :2048batch) == {degree => 16, batch => 2048}>\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Terse syntax for a hash with numeric values: "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "(:16degree, :2048batch) == {degree ="
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " 16, batch ="
                        },
                        {
                          "type": "text",
                          "value": ">"
                        },
                        {
                          "type": "text",
                          "value": " 2048}"
                        },
                        {
                          "type": "text",
                          "value": ">"
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 966,
                          "line": 26,
                          "column": 1
                        },
                        "end": {
                          "offset": 1077,
                          "line": 27,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 966,
                      "line": 26,
                      "column": 1
                    },
                    "end": {
                      "offset": 1077,
                      "line": 27,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "RhbVS91ppK3S7YGPtiMQQ"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "C<grep> - L<https://docs.raku.org/routine/grep>\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "grep"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " - "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "https://docs.raku.org/routine/grep"
                            }
                          ],
                          "type": "fcode",
                          "name": "L",
                          "meta": null
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1077,
                          "line": 27,
                          "column": 1
                        },
                        "end": {
                          "offset": 1131,
                          "line": 28,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1077,
                      "line": 27,
                      "column": 1
                    },
                    "end": {
                      "offset": 1131,
                      "line": 28,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "NRkkr6PAFjrlA6YcUv6l7"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "C<say> - L<https://docs.raku.org/routine/say>\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "say"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " - "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "https://docs.raku.org/routine/say"
                            }
                          ],
                          "type": "fcode",
                          "name": "L",
                          "meta": null
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1131,
                          "line": 28,
                          "column": 1
                        },
                        "end": {
                          "offset": 1183,
                          "line": 29,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1131,
                      "line": 28,
                      "column": 1
                    },
                    "end": {
                      "offset": 1183,
                      "line": 29,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "8pcTi3tjVX6EEugRCvyMc"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "The answer is 7652413.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The answer is 7652413.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1184,
                  "line": 30,
                  "column": 1
                },
                "end": {
                  "offset": 1207,
                  "line": 31,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 1217,
              "line": 33,
              "column": 1
            }
          },
          "id": "zrC8WEOrubJHdSz3-4suf"
        },
        {
          "text": "\n(2..9)\n    .map({ permutations(1..$^end).Slip })\n    .race(:16degree, :2048batch)\n    .map(*.join)\n    .grep(*.is-prime)\n    .max\n    .say;\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1217,
              "line": 33,
              "column": 1
            },
            "end": {
              "offset": 1358,
              "line": 41,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Coded triangle numbers\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob042-shlomif.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "XE_EDaaji3xEr3v6hFh_3",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Coded triangle numbers\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Coded triangle numbers\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 51,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 51,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "e9MGULvL7JsVA4r1DYqby"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Shlomi Fish\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Shlomi Fish\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 52,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 72,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 52,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 72,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "RhQoOIi2r6ks3X_iSUZzz"
            },
            {
              "type": "blankline"
            },
            {
              "text": "The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten triangle numbers are:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten triangle numbers are:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 73,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 188,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 189,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 230,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value is a triangle number then we shall call the word a triangle word.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value is a triangle number then we shall call the word a triangle word.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 231,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 516,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Using words.txt (right click and 'Save Link/Target As...'), a 16K text file containing nearly two-thousand common English words, how many are triangle words?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Using words.txt (right click and 'Save Link/Target As...'), a 16K text file containing nearly two-thousand common English words, how many are triangle words?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 517,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 675,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 685,
              "line": 18,
              "column": 1
            }
          },
          "id": "sst_F7QoEc9PtPAQm4O54"
        },
        {
          "text": "\nsub is_triangle($half)\n{\n    my $n = $half +< 1;\n\n    my $i = Int( sqrt($n) );\n\n    if $i * $i == $n\n    {\n        return False;\n    }\n    return $n == $i * ( $i + 1 );\n}\n\nsub MAIN(:$verbose = False) {\n    my $total_sum = 0;\n\n    my $words-file = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, 'words.txt');\n    my $text = $words-file.IO.slurp;\n    my @words = $text ~~ m:global/<[A .. Z]>+/;\n    my $RESULT = +(@words.grep(sub ($_) { is_triangle( sum( map { $_.ord - 'A'.ord + 1 },$_.comb) ) }));\n    say $RESULT;\n}\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 685,
              "line": 18,
              "column": 1
            },
            "end": {
              "offset": 1197,
              "line": 41,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Distinct primes factors\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob047-gerdr.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "lpJH8mRPBWKdMNV_rQCW0",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Distinct primes factors\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Distinct primes factors\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 52,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 52,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "jZw_sQEpiIC0RAArAwHx2"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Gerhard R\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Gerhard R\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 53,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 53,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "qOcsmkqivwBLEpZ9wLQ7p"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=47>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=47"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 72,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 111,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The first two consecutive numbers to have two distinct prime factors are:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The first two consecutive numbers to have two distinct prime factors are:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 112,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 186,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "14 = 2 × 7\n15 = 3 × 5\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "14 = 2 × 7\n15 = 3 × 5\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 187,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 209,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The first three consecutive numbers to have three distinct prime factors\nare:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The first three consecutive numbers to have three distinct prime factors\nare:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 210,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 288,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "644 = 2² × 7 × 23\n645 = 3 × 5 × 43\n646 = 2 × 17 × 19.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "644 = 2² × 7 × 23\n645 = 3 × 5 × 43\n646 = 2 × 17 × 19.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 289,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 343,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the first four consecutive integers to have four distinct prime\nfactors. What is the first of these numbers?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the first four consecutive integers to have four distinct prime\nfactors. What is the first of these numbers?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 344,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 458,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "To run this example, the associated C file (prob047-gerdr.c) needs to be\ncompiled into a shared object library.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "To run this example, the associated C file (prob047-gerdr.c) needs to be\ncompiled into a shared object library.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 459,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 571,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "In GCC this is achieved like so:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In GCC this is achieved like so:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 572,
                  "line": 29,
                  "column": 1
                },
                "end": {
                  "offset": 605,
                  "line": 30,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "$ gcc --std=c99 -fPIC -c -o prob047-gerdr.o prob047-gerdr.c\n$ gcc -shared -o prob047-gerdr.so prob047-gerdr.o\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "$ gcc --std=c99 -fPIC -c -o prob047-gerdr.o prob047-gerdr.c\n    $ gcc -shared -o prob047-gerdr.so prob047-gerdr.o\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 606,
                  "line": 31,
                  "column": 1
                },
                "end": {
                  "offset": 724,
                  "line": 33,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "After which, the example can be run as expected:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "After which, the example can be run as expected:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 725,
                  "line": 34,
                  "column": 1
                },
                "end": {
                  "offset": 774,
                  "line": 35,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "$ perl6 prob047-gerdr.pl\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "$ perl6 prob047-gerdr.pl\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 775,
                  "line": 36,
                  "column": 1
                },
                "end": {
                  "offset": 804,
                  "line": 37,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 814,
              "line": 39,
              "column": 1
            }
          },
          "id": "1Kr4UAcAAlUIVibFXAztj"
        },
        {
          "text": "\nuse NativeCall;\n\nsub factors(int32 $n) returns int32 is native($*SPEC.catdir($*PROGRAM-NAME.IO.dirname, 'prob047-gerdr')) { * }\n\nsub MAIN(Int $N = 4) {\n    my int $n = 2;\n    my int $i = 0;\n\n    while $i != $N {\n        $i = factors($n) == $N ?? $i + 1 !! 0;\n        $n = $n + 1;\n    }\n\n    say $n - $N;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 814,
              "line": 39,
              "column": 1
            },
            "end": {
              "offset": 1161,
              "line": 57,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Permuted multiples\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob052-duff.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "1QjvwVwFeJHDp-I3dRX2_",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Permuted multiples\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Permuted multiples\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 47,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 47,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "BNVftifCBjdsPEy8j3xnF"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Jonathan Scott Duff\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Jonathan Scott Duff\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 48,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 76,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 48,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 76,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "rWNYt7m0zxmeS5fbbob9Q"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=52>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=52"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 77,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 116,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "It can be seen that the number, 125874, and its double, 251748, contain\nexactly the same digits, but in a different order.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It can be seen that the number, 125874, and its double, 251748, contain\nexactly the same digits, but in a different order.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 117,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 240,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x,\ncontain the same digits.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x,\ncontain the same digits.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 241,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 339,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 349,
              "line": 18,
              "column": 1
            }
          },
          "id": "Beo44iI1ZBeeyGuCGhtL0"
        },
        {
          "text": "\nmy $mag = 1;        # current power of 10\nmy $n = $mag;       # number to start searching from\nloop {\n    my $s = (2*$n).comb.sort;\n    last if\n    $s eq (3*$n).comb.sort &&\n    $s eq (4*$n).comb.sort &&\n    $s eq (5*$n).comb.sort &&\n    $s eq (6*$n).comb.sort;\n    $n++;\n    if log10(6*$n).Int > log10(2*$n).Int {\n        $mag *= 10;\n        $n = $mag;\n    }\n}\nsay $n;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 349,
              "line": 18,
              "column": 1
            },
            "end": {
              "offset": 760,
              "line": 37,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Combinatoric selections\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob053-duff.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "ZOubmdg1gcyT9VcxxzmNF",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Combinatoric selections\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Combinatoric selections\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 52,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 52,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "2znrQczAWq1L-Z2JOp29G"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Jonathan Scott Duff\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Jonathan Scott Duff\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 53,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 81,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 53,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 81,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "01A84lQFA7ha8Ygn2obgZ"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=53>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=53"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 82,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 121,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "There are exactly ten ways of selecting three from five, 12345:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "There are exactly ten ways of selecting three from five, 12345:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 122,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 186,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "123, 124, 125, 134, 135, 145, 234, 235, 245, and 345\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "123, 124, 125, 134, 135, 145, 234, 235, 245, and 345\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 187,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 240,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "In combinatorics, we use the notation, ⁵C₃ = 10.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In combinatorics, we use the notation, ⁵C₃ = 10.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 241,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 290,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "In general,\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In general,\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 291,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 303,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "ⁿCᵣ = n! / r!(n−r)! ,where r ≤ n, n! = n×(n−1)×...×3×2×1, and 0! = 1.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "ⁿCᵣ = n! / r!(n−r)! ,where r ≤ n, n! = n×(n−1)×...×3×2×1, and 0! = 1.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 304,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 378,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "It is not until n = 23, that a value exceeds one-million: ²³C₁₀ = 1144066.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It is not until n = 23, that a value exceeds one-million: ²³C₁₀ = 1144066.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 379,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 454,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "How many, not necessarily distinct, values of ⁿCᵣ, for 1 ≤ n ≤ 100, are\ngreater than one-million?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "How many, not necessarily distinct, values of ⁿCᵣ, for 1 ≤ n ≤ 100, are\ngreater than one-million?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 455,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 553,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 563,
              "line": 27,
              "column": 1
            }
          },
          "id": "yduU5tzuqf7GhKymf7CWa"
        },
        {
          "text": "\n# brute force\n\nsub postfix:<!>($n) { return [*] 1..$n }\n\nsub infix:<C>($n,$r)  { $n! / ($r! * ($n-$r)!); }\n\nmy $count = 0;\nfor 1..100 -> $n {\n    for 1..$n -> $r {\n        $count++  if $n C $r > 1_000_000;\n    }\n}\nsay $count;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 563,
              "line": 27,
              "column": 1
            },
            "end": {
              "offset": 830,
              "line": 43,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Combinatoric selections\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob053-gerdr.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "97mJvWq7_-RN6W_RmTraX",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Combinatoric selections\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Combinatoric selections\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 52,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 52,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "rwl_GHLKGd6dTqQVokvtG"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Gerhard R\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Gerhard R\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 53,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 53,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "VWR2yQEONRBk7NH5qxBgv"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=53>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=53"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 72,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 111,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "There are exactly ten ways of selecting three from five, 12345:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "There are exactly ten ways of selecting three from five, 12345:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 112,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 176,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "123, 124, 125, 134, 135, 145, 234, 235, 245, and 345\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "123, 124, 125, 134, 135, 145, 234, 235, 245, and 345\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 177,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 230,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "In combinatorics, we use the notation, ⁵C₃ = 10.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In combinatorics, we use the notation, ⁵C₃ = 10.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 231,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 280,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "In general,\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In general,\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 281,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 293,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "ⁿCᵣ = n! / r!(n−r)! ,where r ≤ n, n! = n×(n−1)×...×3×2×1, and 0! = 1.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "ⁿCᵣ = n! / r!(n−r)! ,where r ≤ n, n! = n×(n−1)×...×3×2×1, and 0! = 1.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 294,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 368,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "It is not until n = 23, that a value exceeds one-million: ²³C₁₀ = 1144066.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It is not until n = 23, that a value exceeds one-million: ²³C₁₀ = 1144066.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 369,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 444,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "How many, not necessarily distinct, values of ⁿCᵣ, for 1 ≤ n ≤ 100, are\ngreater than one-million?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "How many, not necessarily distinct, values of ⁿCᵣ, for 1 ≤ n ≤ 100, are\ngreater than one-million?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 445,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 543,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 553,
              "line": 27,
              "column": 1
            }
          },
          "id": "T-PXZV58CwJFjIrMO14G7"
        },
        {
          "text": "\n$[1], -> @p { $[0, |@p Z+ |@p, 0] } ... * \\ # generate Pascal's triangle\n==> (*[0..100])() \\\n==> map *.Slip \\\n==> grep * > 1_000_000 \\\n==> elems() \\\n==> (*.say)()\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 553,
              "line": 27,
              "column": 1
            },
            "end": {
              "offset": 757,
              "line": 36,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Poker hands\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob054-andreoss.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "VR3gjdMRIC_UJgDbdF8jY",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Poker hands\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Poker hands\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 40,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 40,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "wwybCrYyFkpQ4V7rezzsh"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Andrei Osipov\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Andrei Osipov\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 41,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 63,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 41,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 63,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "i7WlEYdPA1lso6YzX_67X"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=54>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=54"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 64,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 103,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The file, poker.txt, contains one-thousand random hands dealt to two\nplayers. Each line of the file contains ten cards (separated by a single\nspace): the first five are Player 1's cards and the last five are Player 2's\ncards. You can assume that all hands are valid (no invalid characters or\nrepeated cards), each player's hand is in no specific order, and in each\nhand there is a clear winner.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The file, poker.txt, contains one-thousand random hands dealt to two\nplayers. Each line of the file contains ten cards (separated by a single\nspace): the first five are Player 1's cards and the last five are Player 2's\ncards. You can assume that all hands are valid (no invalid characters or\nrepeated cards), each player's hand is in no specific order, and in each\nhand there is a clear winner.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 104,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 499,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "How many hands does Player 1 win?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "How many hands does Player 1 win?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 500,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 534,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 544,
              "line": 21,
              "column": 1
            }
          },
          "id": "cnoYNvmAtgZYkcRjfc8b2"
        },
        {
          "text": "\nenum Rank <\n    Two Three Four Five\n    Six Seven Eight Nine\n    Ten Jack Queen King Ace\n>;\n\nenum Suit <\n    Hearts Diamonds Clubs Spades\n>;\n\nenum Hand <\n        RoyalFlush StraightFlush FourOfKind\n        FullHouse Flush Straight ThreeOfKind\n        TwoPairs OnePair HighCard\n>;\n\nmulti counts(Positional $h) {\n    bag($h).invert\n}\n\nmulti strigify(Hash $x) {\n    join ' and ', do for $x.kv -> $k, $v {\n        \"$k of $v\"\n    }\n}\n\nclass Card {\n    has Rank  $.rank;\n    has Suit  $.suit;\n\n    method parse-rank(Str $r) returns Rank {\n        given $r {\n            when /\\d/ { Rank($r.Int - 2) }\n            when /T/  { Ten }\n            when /J/  { Jack }\n            when /Q/  { Queen }\n            when /K/  { King }\n            when /A/  { Ace }\n        }\n    }\n    method parse-suit(Str $s) returns Suit {\n        given $s {\n            when /H/ { Hearts }\n            when /D/ { Diamonds }\n            when /C/ { Clubs }\n            when /S/ { Spades }\n        }\n    }\n    multi method CALL-ME(Str $c where $c.chars == 2)  {\n        my ($r, $s) = $c.comb;\n        self.new(rank => Card.parse-rank($r),\n                 suit => Card.parse-suit($s));\n    }\n    multi method CALL-ME(Rank $v, Suit $s) {\n        self.new(rank => $v, suit => $s)\n    }\n}\n\nmulti infix:«<=>»(Card $a, Card $b) is export returns Order {\n    $a.rank <=> $b.rank\n}\n\n\nclass Deal {\n    subset Ranks where -> $r {\n        $r ~~ Rank || $r ~~ Array[Rank]\n    };\n\n    has Card   @.cards;\n    has Ranks  %.score{Hand};\n\n    method CALL-ME(Str $h) {\n        my $x = self.new(\n            cards => map { Card($_) } , $h.split: /\\s/\n        );\n        $x.score = $x!best-hand;\n        $x;\n    }\n    method ACCEPTS(Hand $h) {\n        so %.score{$h};\n    }\n    method !best-hand {\n        self!royal-flush\n        // self!straight-flush\n        // self!full-house\n        // self!flush\n        // self!straight\n        // self!four-of-kind\n        // self!three-of-kind\n        // self!two-pairs\n        // self!one-pair\n        // self!high-card\n    }\n\n    method !straight {\n        my @v = @.cards».rank.sort;\n        if @v eq (@v.min ... @v.max).map({Rank($_)}) {\n            (Straight) => @v.max\n        }\n    }\n\n    method !flush {\n        if [~~] @.cards».suit {\n            (Flush) => Array[Rank].new: |@.cards».rank;\n        }\n    }\n\n    method !royal-flush {\n        if self!flush && self!straight && @.cards».rank.max ~~ Ace {\n            (RoyalFlush) => Ace\n        }\n    }\n\n    method !straight-flush {\n        if self!flush && my $s = self!straight  {\n            (StraightFlush) => $s.value\n        }\n    };\n    method !four-of-kind {\n        # Four cards of the same value.\n        my @ranks = @.cards».rank;\n        my @four  = @ranks.&counts.grep(*.key == 4);\n        if so @four {\n            (FourOfKind) => my $x = @four[0].value,\n            (HighCard)   => max grep { $_ !~~ $x }, @ranks\n        }\n    }\n    method !full-house {\n        # Three of a kind and a pair.\n        my Ranks %x{Hand} = flat self!three-of-kind , self!one-pair;\n        if %x{ThreeOfKind}.defined && %x{OnePair}.defined {\n            (FullHouse) => Ace\n        }\n    }\n\n    method !three-of-kind {\n        my $rank = @.cards».rank.&counts.grep(*.key == 3)[0];\n\n        if $rank {\n            my Ranks %h{Hand} = (ThreeOfKind) =>  my $x = $rank.value;\n\n            if my $one-pair = @.cards».rank.&counts.grep(*.key == 2)[0] {\n                %h{OnePair}  =  $one-pair.value;\n            }\n            else {\n                %h{HighCard} = max grep { $_ !~~ $x }, @.cards».rank;\n            }\n            %h;\n        }\n    }\n\n    method !two-pairs {\n        my @pairs = @.cards»\\\n        .rank.&counts\\\n        .sort(*.key).grep(*.key == 2);\n        if +@pairs == 2 {\n            (OnePair)   => my $x= @pairs».value.min,\n            (TwoPairs)  => my $y= @pairs».value.max,\n            (HighCard)  => max grep { $_ !~~ $x | $y },@.cards».rank;\n        }\n    }\n\n    method !one-pair {\n        my $pair = @.cards»\\\n        .rank.&counts\\\n        .sort(*.key).grep(*.key == 2)[0];\n        if $pair {\n            (OnePair)  => my $x = $pair.value,\n            (HighCard) => max grep { $_ !~~ $x}, @.cards».rank;\n        }\n    }\n\n    method !high-card {\n        (HighCard) => @.cards».rank.max;\n    }\n}\n\nmulti infix:«<=>»(Deal $a, Deal $b) returns Order {\n    for Hand.enums.sort(*.value).keys.map({Hand($_)}) -> $h {\n        return More if $a.score{$h}.defined && !$b.score{$h}.defined;\n        return Less if $b.score{$h}.defined && !$a.score{$h}.defined;\n        next unless $a.score{$h}.defined & $b.score{$h}.defined;\n\n        if $a.score{$h} & $b.score{$h} ~~ List {\n            my $cmp = max $a.score{$h} Z<=> $b.score{$h};\n            return Less if $cmp ~~ Less;\n            return More if $cmp ~~ More;\n        }\n\n        my $cmp =  $a.score{$h} <=> $b.score{$h};\n\n        next if $cmp ~~ Same;\n        return $cmp;\n    }\n    Same;\n}\n\nsub MAIN(Bool :$verbose    = False,\n         Bool :$run-tests  = False,\n         :$file   = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, 'poker.txt'),\n         :$lines  = Inf, # read only X lines from file\n        ) {\n    die \"'$file' is missing\" unless $file.IO.e ;\n    return TEST if $run-tests;\n\n    say [+] gather for $file.IO.lines[^$lines] -> $line is copy {\n        $line ~~ s:nth(5)/\\s/;/;\n        my ($h1,$h2) = $line.split: /';'/;\n        my $d1 = Deal($h1);\n        my $d2 = Deal($h2);\n        if $d1 <=> $d2 ~~ More {\n            say \"player1 wins on $line \\n\\twith {$d1.score.&strigify} against {$d2.score.&strigify} \" if $verbose ;\n            take 1;\n        }\n    }\n\n}\n\nsub TEST {\n    use Test;\n    ok Card(\"TC\") <=> Card(\"TD\") ~~ Same, \"cards are equal if ranks are equal \";\n    ok Card(\"2C\") <=> Card(\"AC\") ~~ Less, \"2C < AC\";\n    ok (Straight ~~ Deal(\"5H 6C 7S 8D 9D\") )   &&\n    (Straight !~~ Deal(\"2H 6C 7S 8D 9D\"))  , \"Detects straight\";\n    ok (Flush ~~ Deal(\"5H 7H 8H AH TH\")) &&\n    (Flush !~~ Deal(\"5H 7H 8H AC TH\")), \"Detects flush \";\n    ok RoyalFlush ~~ Deal(\"TH JH QH KH AH\") , \"Detects royal flush \";\n    ok Deal(\"5H 5C 6S 7S KD\") <=> Deal(\"2C 3S 8S 8D TD\") ~~ Less,\"Player 2 wins [1]\";\n    ok Deal(\"5D 8C 9S JS AC\") <=> Deal(\"2C 5C 7D 8S QH\") ~~ More, \"Player 1 wins [2]\";\n    ok Deal(\"2D 9C AS AH AC\") <=> Deal(\"3D 6D 7D TD QD\") ~~ Less, \"Player 2 wins [3]\";\n    ok Deal(\"4D 6S 9H QH QC\") <=> Deal(\"3D 6D 7H QD QS\") ~~ More, \"Player 1 wins [4]\";\n    ok Deal(\"2H 2D 4C 4D 4S\") <=> Deal(\"3C 3D 3S 9S 9D\") ~~ Same, \"Nobody wins [5]\";\n    ok Deal(\"7C 5H KC QH JD\") <=> Deal(\"AS KH 4C AD 4S\") ~~ Less, \"Player 2 wins [6]\";\n    ok Deal(\"KS KC 9S 6D 2C\") <=> Deal(\"QH 9D 9H TS TC\") ~~ Less, \"Problem [1]\";\n    ok Deal(\"TS QH 6C 8H TH\") <=> Deal(\"5H 3C 3H 9C 9D\") ~~ Less, \"Problem [2]\";\n    ok Deal(\"AH QC JC 4C TC\") <=> Deal(\"8C 2H TS 2C 7D\") ~~ Less, \"Problem [3]\";\n    ok Deal(\"7C KS 6S 5S 2S\") <=> Deal(\"2D TC 2H 5H QS\") ~~ Less, \"Problem [4]\";\n    ok Deal(\"JC TH 4S 6S JD\") <=> Deal(\"2D 4D 6C 3D 4C\") ~~ More, \"Problem [5]\";\n    done;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 544,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 7552,
              "line": 264,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Lychrel numbers\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob055-shlomif.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "GI7uNu8DE0q56UkiGLuUF",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/raku\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 26,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Lychrel numbers\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Lychrel numbers\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 38,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 61,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 38,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 61,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "lGHQERDwRS4rF-pl2NlhN"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Shlomi Fish\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Shlomi Fish\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 62,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 82,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 62,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 82,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "g073tqsyLcjde6VmTvXA-"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=55>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=55"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 83,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 122,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 123,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 192,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Not all numbers produce palindromes so quickly. For example,\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Not all numbers produce palindromes so quickly. For example,\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 193,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 254,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "349 + 943 = 1292,\n1292 + 2921 = 4213\n4213 + 3124 = 7337\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "349 + 943 = 1292,\n1292 + 2921 = 4213\n4213 + 3124 = 7337\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 255,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 311,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "That is, 349 took three iterations to arrive at a palindrome.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "That is, 349 took three iterations to arrive at a palindrome.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 312,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 374,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 375,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 1145,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1146,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 1254,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "How many Lychrel numbers are there below ten-thousand?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "How many Lychrel numbers are there below ten-thousand?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1255,
                  "line": 27,
                  "column": 1
                },
                "end": {
                  "offset": 1310,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "NOTE: Wording was modified slightly on 24 April 2007 to emphasise the theoretical nature of Lychrel numbers.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "NOTE: Wording was modified slightly on 24 April 2007 to emphasise the theoretical nature of Lychrel numbers.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1311,
                  "line": 29,
                  "column": 1
                },
                "end": {
                  "offset": 1420,
                  "line": 30,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 26,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 1430,
              "line": 32,
              "column": 1
            }
          },
          "id": "9EXnhKV7qhaS0GPatB3Zj"
        },
        {
          "text": "\nsub rsum($x)\n{\n    return $x + Int($x.flip());\n}\n\nsub is_palindrome($int)\n{\n    my $s = Str($int);\n    return $s.flip eq $s;\n}\n\nsub is_lycherel($start)\n{\n    my $n = rsum($start);\n    for 1 .. 50 -> $i\n    {\n        return False if is_palindrome($n);\n        $n = rsum($n);\n    }\n    return True;\n}\n\nif (False)\n{\n    say is_palindrome(11);\n    say rsum(13);\n}\nsay +((1..10000).grep( { is_lycherel($_) }));\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1430,
              "line": 32,
              "column": 1
            },
            "end": {
              "offset": 1877,
              "line": 63,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "",
    "description": "",
    "footer": "",
    "file": "work_examples/categories/euler/prob056-shlomif.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "f5pqQLm4hG8YmC9H1tL64",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "# Copyright by Shlomi Fish, 2018 under the Expat licence\n# https://opensource.org/licenses/mit-license.php\n\nmy $max = 0;\nfor 2 .. 99 -> $base\n{\n    my $power-result = $base;\n    for 1 .. 99\n    {\n        my $digits-sum = [+] \"$power-result\".comb();\n        if $digits-sum > $max\n        {\n            $max = $digits-sum;\n        }\n        $power-result *= $base;\n    }\n}\nsay $max;\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 381,
              "line": 19,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "XOR decryption\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob059-andreoss.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "bvNNn7u4ZLh8T4gvXdswL",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "XOR decryption\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "XOR decryption\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 43,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 43,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "1111UONlt0DhL7vcLsBVx"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Andrei Osipov\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Andrei Osipov\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 44,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 66,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 44,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 66,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "M3K3wmGJeg1hRsSSRiXzN"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=59>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=59"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 67,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 106,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Each character on a computer is assigned a unique code and the preferred\nstandard is ASCII (American Standard Code for Information Interchange). For\nexample, uppercase A = 65, asterisk (*) = 42, and lowercase k = 107.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Each character on a computer is assigned a unique code and the preferred\nstandard is ASCII (American Standard Code for Information Interchange). For\nexample, uppercase A = 65, asterisk (*) = 42, and lowercase k = 107.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 107,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 325,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A modern encryption method is to take a text file, convert the bytes to\nASCII, then XOR each byte with a given value, taken from a secret key. The\nadvantage with the XOR function is that using the same encryption key on the\ncipher text, restores the plain text; for example, 65 XOR 42 = 107, then 107\nXOR 42 = 65.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A modern encryption method is to take a text file, convert the bytes to\nASCII, then XOR each byte with a given value, taken from a secret key. The\nadvantage with the XOR function is that using the same encryption key on the\ncipher text, restores the plain text; for example, 65 XOR 42 = 107, then 107\nXOR 42 = 65.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 326,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 640,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For unbreakable encryption, the key is the same length as the plain text\nmessage, and the key is made up of random bytes. The user would keep the\nencrypted message and the encryption key in different locations, and without\nboth \"halves\", it is impossible to decrypt the message.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For unbreakable encryption, the key is the same length as the plain text\nmessage, and the key is made up of random bytes. The user would keep the\nencrypted message and the encryption key in different locations, and without\nboth \"halves\", it is impossible to decrypt the message.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 641,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 920,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Unfortunately, this method is impractical for most users, so the modified\nmethod is to use a password as a key. If the password is shorter than the\nmessage, which is likely, the key is repeated cyclically throughout the\nmessage. The balance for this method is using a sufficiently long password\nkey for security, but short enough to be memorable.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Unfortunately, this method is impractical for most users, so the modified\nmethod is to use a password as a key. If the password is shorter than the\nmessage, which is likely, the key is repeated cyclically throughout the\nmessage. The balance for this method is using a sufficiently long password\nkey for security, but short enough to be memorable.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 921,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 1268,
                  "line": 31,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Your task has been made easy, as the encryption key consists of three lower\ncase characters. Using cipher.txt\nC<https://projecteuler.net/project/resources/p059_cipher.txt>, a file\ncontaining the encrypted ASCII codes, and the knowledge that the plain text\nmust contain common English words, decrypt the message and find the sum of\nthe ASCII values in the original text.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Your task has been made easy, as the encryption key consists of three lower\ncase characters. Using cipher.txt\n"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/project/resources/p059_cipher.txt"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": ", a file\ncontaining the encrypted ASCII codes, and the knowledge that the plain text\nmust contain common English words, decrypt the message and find the sum of\nthe ASCII values in the original text.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1269,
                  "line": 32,
                  "column": 1
                },
                "end": {
                  "offset": 1639,
                  "line": 38,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1649,
              "line": 40,
              "column": 1
            }
          },
          "id": "RKGH5oNnok51MUWQiCHD-"
        },
        {
          "text": "\n\nmy constant @common-words = <the was who not did with have does and one that>;\n\nsub infix:<XOR>(@cipher, @password) {\n    @cipher Z+^ flat (@password xx *);\n}\n\nsub as-code(Str $w) {\n    my @x = $w.comb.map(*.ord)\n}\n\nsub as-word(*@s) {\n    @s.map(*.chr).join\n}\n\nsub guess-password(Str $w, @cipher) {\n    my @word = as-code $w;\n\n    my @chunks = @cipher.rotor((@word.elems) => -(@word.elems - 1));\n    my %tries;\n    my $offset = 0;\n\n    for @chunks -> @chunk {\n        \n        my @password  = @chunk[^3] XOR @word;\n        \n        my $password  = as-word @password;\n        \n        next unless $password ~~ /^^ <[a..z]> ** 3 $$/ ;\n        my $decrypted = as-word @cipher[$offset .. *] XOR @password;\n        \n        my $count =  [+] do for @common-words.grep({$_ !~~ $w}) -> $word {\n            elems $decrypted ~~ m:g:i/$word/\n        }\n\n        %tries{$password} += $count if $count > 0;\n\n        return %tries if $count > @common-words.elems;\n\n        $offset   += 1;\n        $offset div= $w.chars;\n    }\n    %tries;\n}\n\nsub MAIN(Bool :$verbose = False,\n        :$file = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, 'cipher.txt'),\n        :$word = @common-words[0],\n        :$pass is copy,\n        Bool :$test = False) {\n    return TEST if $test;\n    die \"'$file' is missing\" unless $file.IO.e ;\n    my @cipher     = map *.Int, split /<[,]>/ , slurp $file;\n\n    unless $pass {\n        my %variants = guess-password $word, @cipher;\n        $pass  = %variants.pairs.max(*.value).key;\n        say \"The password is more likely to be '$pass'. \" if $verbose;\n    }\n\n    my $decrypted =  as-word @cipher XOR as-code($pass);\n    \n    say \"The message: {$decrypted.perl}\" if $verbose;\n    say [+] as-code $decrypted;\n    say \"Done in {now - BEGIN now}\" if $verbose;\n}\n\nsub TEST {\n    use Test;\n    is as-code(\"abc\"), [97,98,99], \"as-code works\";\n    is as-word(100,101,102), \"def\", \"as-word works\";\n    is as-word([79,59,12] XOR [103,111,100]), \"(Th\", \"XOR works\";\n    done;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1649,
              "line": 40,
              "column": 1
            },
            "end": {
              "offset": 3660,
              "line": 117,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Powerful digit counts\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob063-moritz.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Fw7roKRFEHWHAbBilqtGF",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Powerful digit counts\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Powerful digit counts\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 50,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 50,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "bp4GY2rcXQSpjenfle1DI"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Moritz Lenz\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Moritz Lenz\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 51,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 51,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "142wSoqOlfR1z0z6XHFSo"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=63>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=63"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 72,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 111,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The 5-digit number, 16807=7^5, is also a fifth power. Similarly, the 9-digit\nnumber, 134217728=8^9, is a ninth power.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The 5-digit number, 16807=7^5, is also a fifth power. Similarly, the 9-digit\nnumber, 134217728=8^9, is a ninth power.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 112,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 230,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "How many n-digit positive integers exist which are also an nth power?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "How many n-digit positive integers exist which are also an nth power?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 231,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 301,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 311,
              "line": 17,
              "column": 1
            }
          },
          "id": "D3rQ11K6d9R527ttlRXKx"
        },
        {
          "text": "\nsub MAIN(Bool :$verbose = False) {\n    my $count = 0;\n    for 1..9 -> $x {\n        for 1..200 -> $y {\n            if ($x**$y).chars == $y {\n                say \"$x**$y\" if $verbose;\n                $count++;\n            }\n        }\n    }\n    say $count;\n    say \"missing bigint support: answer should be 49\" if $verbose;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 311,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 675,
              "line": 33,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Powerful digit counts\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob063-polettix.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "VBL808vDW4sM-8jZh6y7r",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Powerful digit counts\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Powerful digit counts\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 50,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 50,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "Bc_MiRWfOLQGh_2SJDVSR"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "polettix\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "polettix\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 51,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 51,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "C2OXQZXHWdVCO3cLEqoEs"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=63>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=63"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 69,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 108,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The 5-digit number, 16807=7^5, is also a fifth power. Similarly, the 9-digit\nnumber, 134217728=8^9, is a ninth power.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The 5-digit number, 16807=7^5, is also a fifth power. Similarly, the 9-digit\nnumber, 134217728=8^9, is a ninth power.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 109,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 227,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "How many n-digit positive integers exist which are also an nth power?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "How many n-digit positive integers exist which are also an nth power?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 228,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 298,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 308,
              "line": 17,
              "column": 1
            }
          },
          "id": "ES5qlA3IZe6-hurFoTqvT"
        },
        {
          "text": "\n# As of August 24th, 2009 we don't have big integers, so we'll have\n# to conjure up something. We'll represent each number with an\n# array of digits, base 10-exp for ease of length computation. The most\n# significant part is at the end of the array, i.e. the array should\n# be read in reverse.\n# Setting '1' for the number of digits means representing the base-10\n# system with one digit in each array position.\nmy $digits = 5;\nmy $limit = 10 ** $digits;\n\nmy $count = 0;\n\n# 9 is the maximum possible base for this problem. 9**22 has 21 digits\nsub MAIN(Bool :$verbose = False) {\n    for 1 .. 9 -> $x {\n        my @x = (1);\n        for 1 .. * -> $y {\n            @x = multby(@x, $x);\n            my $px = printable(@x);\n            if ($px.encode('utf-8').bytes == $y) {\n                say \"$x ** $y = $px (\", $px.encode('utf-8').bytes, ')'\n                    if $verbose;\n                $count++;\n            }\n            elsif ($px.encode('utf-8').bytes < $y) {\n                last;\n            }\n        }\n    }\n    say $count;\n}\n\nsub printable (@x is copy) {\n    my $msb = pop @x;\n    return $msb ~ @x.reverse.map({sprintf '%0'~$digits~'d', $_ }).join('');\n}\n\n# Add a \"number\" to another, modifies first parameter in place.\n# This assumes that length(@y) <= length(@x), which will be true in\n# our program because @y is lower than @x\nsub add (@x is copy, @y) {\n    my $rest = 0;\n    return add(@y, @x) if +@x < +@y;\n    for @x Z (@y, 0, *) -> $x is rw, $y {\n        $x += $y + $rest;\n        $rest = int($x / $limit);\n        $x %= $limit;\n    }\n    push @x, $rest if $rest;\n    return @x;\n}\n\nsub multby (@x is copy, $y) {\n    my $rest = 0;\n    for @x -> $x is rw {\n        $x = $x * $y + $rest;\n        $rest = $x div $limit;\n        $x %= $limit;\n    }\n    push @x, $rest if $rest;\n    return @x;\n}\n\n# Not really needed...\nsub mult (@x is copy, @y) {\n    my @result = (0);\n    for @y -> $y {\n        my @addend = multby(@x, $y);\n        @result = add(@result, @addend);\n        @x.unshift(0);\n    }\n    return @result;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 308,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 2379,
              "line": 93,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Convergents of e\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob065-andreoss.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "8S6xhcvO6fHQKgEWpaIwT",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Convergents of e\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Convergents of e\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 45,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 45,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "oAt1_hC505pC7fhNjo-f8"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Andrei Osipov\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Andrei Osipov\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 46,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 46,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "STeIGPDZKwaPng1hWmV8F"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=65>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=65"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 69,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 108,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The square root of 2 can be written as an infinite continued fraction.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The square root of 2 can be written as an infinite continued fraction.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 109,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 180,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "√2 = 1 +  1\n        ______\n        2 +  1\n           ______\n           2 +  1\n              ______\n              2 +  1\n                 ______\n                 2 + ...\n",
              "margin": "        ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "√2 = 1 +  1\n                ______\n                2 +  1\n                   ______\n                   2 +  1\n                      ______\n                      2 +  1\n                         ______\n                         2 + ...\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 181,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 422,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The infinite continued fraction can be written, √2 = [1;(2)], (2) indicates\nthat 2 repeats ad infinitum. In a similar way, √23 = [4;(1,3,1,8)].\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The infinite continued fraction can be written, √2 = [1;(2)], (2) indicates\nthat 2 repeats ad infinitum. In a similar way, √23 = [4;(1,3,1,8)].\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 423,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 567,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "It turns out that the sequence of partial values of continued fractions for\nsquare roots provide the best rational approximations. Let us consider the\nconvergents for √2.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It turns out that the sequence of partial values of continued fractions for\nsquare roots provide the best rational approximations. Let us consider the\nconvergents for √2.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 568,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 739,
                  "line": 29,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1 + 1\n ___              = 3/2\n  2\n",
              "margin": "          ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "1 + 1\n           ___              = 3/2\n            2\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 740,
                  "line": 30,
                  "column": 1
                },
                "end": {
                  "offset": 804,
                  "line": 33,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1 + 1\n_________       = 7/5\n2 + 1 / 2\n",
              "margin": "              ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "1 + 1\n            _________       = 7/5\n            2 + 1 / 2\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 805,
                  "line": 34,
                  "column": 1
                },
                "end": {
                  "offset": 881,
                  "line": 37,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "....\n",
              "margin": "        ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "....\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 882,
                  "line": 38,
                  "column": 1
                },
                "end": {
                  "offset": 895,
                  "line": 39,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Hence the sequence of the first ten convergents for √2 are: 1, 3/2, 7/5,\n17/12, 41/29, 99/70, 239/169, 577/408, 1393/985, 3363/2378, ...\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Hence the sequence of the first ten convergents for √2 are: 1, 3/2, 7/5,\n17/12, 41/29, 99/70, 239/169, 577/408, 1393/985, 3363/2378, ...\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 896,
                  "line": 40,
                  "column": 1
                },
                "end": {
                  "offset": 1033,
                  "line": 42,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is most surprising is that the important mathematical constant,\ne = [2; 1,2,1, 1,4,1, 1,6,1 , ... , 1,2k,1, ...].\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is most surprising is that the important mathematical constant,\ne = [2; 1,2,1, 1,4,1, 1,6,1 , ... , 1,2k,1, ...].\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1034,
                  "line": 43,
                  "column": 1
                },
                "end": {
                  "offset": 1153,
                  "line": 45,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The first ten terms in the sequence of convergents for e are:\n2, 3, 8/3, 11/4, 19/7, 87/32, 106/39, 193/71, 1264/465, 1457/536, ...\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The first ten terms in the sequence of convergents for e are:\n2, 3, 8/3, 11/4, 19/7, 87/32, 106/39, 193/71, 1264/465, 1457/536, ...\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1154,
                  "line": 46,
                  "column": 1
                },
                "end": {
                  "offset": 1286,
                  "line": 48,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The sum of digits in the numerator of the 10th convergent is 1+4+5+7=17.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The sum of digits in the numerator of the 10th convergent is 1+4+5+7=17.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1287,
                  "line": 49,
                  "column": 1
                },
                "end": {
                  "offset": 1360,
                  "line": 50,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the sum of digits in the numerator of the 100th convergent of the\ncontinued fraction for e.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the sum of digits in the numerator of the 100th convergent of the\ncontinued fraction for e.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1361,
                  "line": 51,
                  "column": 1
                },
                "end": {
                  "offset": 1458,
                  "line": 53,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1468,
              "line": 55,
              "column": 1
            }
          },
          "id": "Osi1NI4JmRjLas0xt8AJ4"
        },
        {
          "text": "\nsub continued-fraction(@sequence, :$depth)  {\n    my $x = @sequence.shift;\n    return 1 if $depth == 1;\n    $x + 1.FatRat /\n        continued-fraction :depth($depth - 1), @sequence\n}\n\nmy @e = lazy gather { take 2;  (1, $_, 1)».&take for 2,4 ... * };\n\nsay [+] continued-fraction(@e, depth => 100).numerator.comb;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1468,
              "line": 55,
              "column": 1
            },
            "end": {
              "offset": 1821,
              "line": 68,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "",
    "description": "",
    "footer": "",
    "file": "work_examples/categories/euler/prob065-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "xTZDQ8ezlC0UBScypJX49",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "say (^100)\n.map({ $_ == 0 ?? 2 !! $_ % 3 == 2 ?? 2*($_ div 3 + 1) !! 1 })\n.reverse\n.reduce( 1.FatRat / * + * )\n.numerator\n.comb\n.sum;\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 134,
              "line": 8,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Diophantine equation\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob066-andreoss.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "y5PYgbz5aH4aVkhK45RGf",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Diophantine equation\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Diophantine equation\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "CG7_zLSHYtC4xbV6kewQd"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Andrei Osipov\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Andrei Osipov\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 72,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 72,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "jlIncTAgZ30_ahti_ZsKX"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=66>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=66"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 73,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 112,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Consider quadratic Diophantine equations of the form: x² – D×y² = 1\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Consider quadratic Diophantine equations of the form: x² – D×y² = 1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 113,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 181,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For example, when D=13, the minimal solution in x is 649² – 13×180² = 1.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For example, when D=13, the minimal solution in x is 649² – 13×180² = 1.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 182,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 255,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "It can be assumed that there are no solutions in positive integers when D is\nsquare.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It can be assumed that there are no solutions in positive integers when D is\nsquare.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 256,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 341,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "By finding minimal solutions in x for D = {2, 3, 5, 6, 7}, we obtain the\nfollowing:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "By finding minimal solutions in x for D = {2, 3, 5, 6, 7}, we obtain the\nfollowing:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 342,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 426,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "3² – 2×2²= 1\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "3² – 2×2²= 1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 427,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 440,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "2² – 3×1²= 1\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "2² – 3×1²= 1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 441,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 454,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "9² – 5×4²= 1\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "9² – 5×4²= 1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 455,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 468,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "5² – 6×2²= 1\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "5² – 6×2²= 1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 469,
                  "line": 27,
                  "column": 1
                },
                "end": {
                  "offset": 482,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "8² – 7×3²= 1\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "8² – 7×3²= 1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 483,
                  "line": 29,
                  "column": 1
                },
                "end": {
                  "offset": 496,
                  "line": 30,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Hence, by considering minimal solutions in x for D ≤ 7, the largest x is\nobtained when D=5.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Hence, by considering minimal solutions in x for D ≤ 7, the largest x is\nobtained when D=5.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 497,
                  "line": 31,
                  "column": 1
                },
                "end": {
                  "offset": 589,
                  "line": 33,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the value of D ≤ 1000 in minimal solutions of x for which the largest\nvalue of x is obtained.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the value of D ≤ 1000 in minimal solutions of x for which the largest\nvalue of x is obtained.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 590,
                  "line": 34,
                  "column": 1
                },
                "end": {
                  "offset": 689,
                  "line": 36,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The following algorithm was used for the solution:\nL<https://en.wikipedia.org/wiki/Chakravala_method>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The following algorithm was used for the solution:\n"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://en.wikipedia.org/wiki/Chakravala_method"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 690,
                  "line": 37,
                  "column": 1
                },
                "end": {
                  "offset": 792,
                  "line": 39,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 802,
              "line": 41,
              "column": 1
            }
          },
          "id": "Fy9intZj8zZSkdOIlkmYz"
        },
        {
          "text": "\nsubset NonSquarable where *.sqrt !%% 1;\n\nsub next-triplet([\\a,\\b,\\k], \\N) {\n\n    # finding minimal l\n    1 .. N.sqrt.floor\n        ==> grep  -> \\l { (a + b * l) %% k } \\\n        ==> sort  -> \\l { abs(l ** 2 - N)  } \\\n        ==> my @r;\n\n    my \\l = @r.shift;\n\n      (a * l + N * b) / abs(k)\n    , (a + b * l)     / abs(k)\n    , (l ** 2 - N )   / k\n}\n\nsub simple-solution(NonSquarable \\N) {\n\n    my $a = N.sqrt.floor;\n    my $b = 1;\n    my $k = $a ** 2 - N;\n\n    $a, $b, $k;\n}\n\nsub chakravala(NonSquarable \\N) {\n    # Start with a solution for a² - N b² = k\n\n    my ($a, $b, $k) = simple-solution N;\n\n    ($a,$b,$k) = next-triplet [$a,$b,$k], N\n        while $k != 1;\n\n    $a, $b, $k;\n}\n\n\n1 .. 1000\n    ==> grep NonSquarable                \\\n    ==> map -> \\D { [D, chakravala D] }  \\\n    ==> sort *[2] ==> my @x;\n\nsay @x.pop[0];\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 802,
              "line": 41,
              "column": 1
            },
            "end": {
              "offset": 1672,
              "line": 88,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Maximum path sum II\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob067-felher.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "me9Xhfz8xI26UDaGEBB25",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Maximum path sum II\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Maximum path sum II\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 48,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 48,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "9Bd7sU1kkg2wyxEziE47w"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Felix Herrmann\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Felix Herrmann\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 49,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 72,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 49,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 72,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "2PGYJ9o9Vj3WL7savdzsy"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=67>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=67"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 73,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 112,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "By starting at the top of the triangle below and moving to adjacent numbers\non the row below, the maximum total from top to bottom is 23.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "By starting at the top of the triangle below and moving to adjacent numbers\non the row below, the maximum total from top to bottom is 23.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 113,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 251,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "block",
              "content": [
                {
                  "type": "text",
                  "value": "   "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "3"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": "\n  "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "7"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " 4\n 2 "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "4"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " 6\n8 5 "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "9"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " 3\n"
                }
              ],
              "name": "code",
              "margin": "",
              "text": "=begin code :allow<B>\n   B<3>\n  B<7> 4\n 2 B<4> 6\n8 5 B<9> 3\n=end code\n",
              "config": [
                {
                  "name": "allow",
                  "value": [
                    "B"
                  ],
                  "type": "array"
                }
              ],
              "location": {
                "start": {
                  "offset": 252,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 322,
                  "line": 20,
                  "column": 1
                }
              },
              "id": "14t02vrs-XOB0YNEdQsfL"
            },
            {
              "type": "blankline"
            },
            {
              "text": "That is, 3 + 7 + 4 + 9 = 23.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "That is, 3 + 7 + 4 + 9 = 23.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 323,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 352,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the maximum total from top to bottom in triangle.txt, a 15K text file\ncontaining a triangle with one-hundred rows.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the maximum total from top to bottom in triangle.txt, a 15K text file\ncontaining a triangle with one-hundred rows.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 353,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 473,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "NOTE: This is a much more difficult version of Problem 18. It is not\npossible to try every route to solve this problem, as there are 299\naltogether! If you could check one trillion (1012) routes every second it\nwould take over twenty billion years to check them all. There is an\nefficient algorithm to solve it. ;o)\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "NOTE: This is a much more difficult version of Problem 18. It is not\npossible to try every route to solve this problem, as there are 299\naltogether! If you could check one trillion (1012) routes every second it\nwould take over twenty billion years to check them all. There is an\nefficient algorithm to solve it. ;o)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 474,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 790,
                  "line": 31,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 800,
              "line": 33,
              "column": 1
            }
          },
          "id": "1iY8UO03lDqFrZJtajn7q"
        },
        {
          "text": "\nmy $triangle = slurp($*SPEC.catdir($*PROGRAM-NAME.IO.dirname, '/triangle.txt'));\nmy @lines = string-to-array($triangle).reverse;\n\n# reduce the triangle by adding up the lines until only one line with one\n# element is left; then print it.\nsay \"{@lines.reduce: &add-maxima}\";\n\n# this function assumes the shorter and longer array to be consecutive lines\n# in an reversed triangle. It then adds each of the maxima of consecutive fields\n# of the longer array to their shared diagonal neighbour in the shorter array.\nsub add-maxima(@longer, @shorter is copy) {\n    for 0 .. @longer - 2 -> $i {\n        @shorter[$i] += max @longer[$i], @longer[$i + 1];\n    }\n    return @shorter;\n}\n\nsub string-to-array($string) {\n    my @lines = $string.lines;\n    @lines .= map(-> $line { $line.comb(/\\d+/).item });\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 800,
              "line": 33,
              "column": 1
            },
            "end": {
              "offset": 1638,
              "line": 57,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Square root digital expansion\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob080-andreoss.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "s97SzKe_WXWlVoZP_vLqD",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Square root digital expansion\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Square root digital expansion\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 58,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 58,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "pt6G5FkNif44T4JepqVwN"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Andrei Osipov\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Andrei Osipov\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 59,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 81,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 59,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 81,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "qGI23tN_Sa8pkqg-X6QBo"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=80>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=80"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 82,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 121,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "It is well known that if the square root of a natural number is not an\ninteger, then it is irrational.  The decimal expansion of such square roots\nis infinite without any repeating pattern at all.  The square root of two is\n1.41421356237309504880..., and the digital sum of the first one hundred\ndecimal digits is 475.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It is well known that if the square root of a natural number is not an\ninteger, then it is irrational.  The decimal expansion of such square roots\nis infinite without any repeating pattern at all.  The square root of two is\n1.41421356237309504880..., and the digital sum of the first one hundred\ndecimal digits is 475.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 122,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 441,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For the first one hundred natural numbers, find the total of the digital\nsums of the first one hundred decimal digits for all the irrational square\nroots.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For the first one hundred natural numbers, find the total of the digital\nsums of the first one hundred decimal digits for all the irrational square\nroots.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 442,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 597,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The following algorithm was used for the solution:\nL<http://www.afjarvis.staff.shef.ac.uk/maths/jarvisspec02.pdf>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The following algorithm was used for the solution:\n"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://www.afjarvis.staff.shef.ac.uk/maths/jarvisspec02.pdf"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 598,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 712,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 722,
              "line": 25,
              "column": 1
            }
          },
          "id": "Szumv-xJe3a0KUtes9Y0_"
        },
        {
          "text": "\nmy constant $limit = 100;\n\nsub sqrt-subtraction($n) {\n    my Int $a = $n * 5 ;\n    my Int $b = 5;\n    while $b < 10 * 10 ** $limit {\n        given $a <=> $b {\n            when More | Same {\n                # replace a with a − b, and add 10 to b.\n                $a -=  $b;\n                $b += 10;\n            }\n            when Less {\n                # add two zeros to a\n                $a *= 100;\n                # add a zero to b just before the final digit (which will always be ‘5’).\n                $b = ($b - (my $x = $b % 10)) * 10 + $x;\n            }\n        }\n    }\n    $b;\n}\n\nsub MAIN(Bool :$verbose = False) {\n    say [+] do for 1 ... 100 -> $n {\n        next if $n.sqrt.floor ** 2 == $n;\n        my $x = [+] $n.&sqrt-subtraction.comb[^$limit];\n        say \"$n $x\"  if $verbose;\n        $x;\n    }\n    say \"Done in {now - INIT now}\" if $verbose;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 722,
              "line": 25,
              "column": 1
            },
            "end": {
              "offset": 1625,
              "line": 60,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Path sum: two ways\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob081-moritz.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "vPQR3CmBisEfXfuU1FBXw",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Path sum: two ways\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Path sum: two ways\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 47,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 47,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "FYGiAPGdHFPuBLAqXMKy-"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Moritz Lenz\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Moritz Lenz\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 48,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 48,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "JOAzqkL1pKPUzSKXmFs0o"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=81>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=81"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 69,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 108,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "In the 5 by 5 matrix below, the minimal path sum from the top left to the\nbottom right, by only moving to the right and down, is indicated in bold\nand is equal to 2427.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In the 5 by 5 matrix below, the minimal path sum from the top left to the\nbottom right, by only moving to the right and down, is indicated in bold\nand is equal to 2427.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 109,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 278,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "⎛B<131> 673    234    103    18⎞\n⎜B<201> B<96>  B<342> 965    150⎟\n⎜630    803    B<746> B<422> 111⎟\n⎜537    699    497    B<121> 956⎟\n⎝805    732    524    B<37>  B<331>⎠\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "⎛"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "131"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " 673    234    103    18⎞\n⎜"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "201"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "96"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": "  "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "342"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " 965    150⎟\n⎜630    803    "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "746"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "422"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " 111⎟\n⎜537    699    497    "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "121"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " 956⎟\n⎝805    732    524    "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "37"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": "  "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "331"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": "⎠\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 279,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 451,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the minimal path sum, in matrix.txt, a 31K text file containing a 80 by\n80 matrix, from the top left to the bottom right by only moving right and\ndown.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the minimal path sum, in matrix.txt, a 31K text file containing a 80 by\n80 matrix, from the top left to the bottom right by only moving right and\ndown.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 452,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 609,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 619,
              "line": 26,
              "column": 1
            }
          },
          "id": "YtpcHFHNJSfyJH7rlnIFI"
        },
        {
          "text": "\nmy @m;\n\nmy $matrix-file = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, 'matrix.txt');\nmy $f = open $matrix-file or die \"Can't open file for reading: $!\";\nfor $f.lines -> $line {\n    @m.push: $line.comb(/\\d+/).Array.item;\n}\n$f.close;\n\nmy ($max-x, $max-y) = +@m[0], +@m;\n\n@m[0][$_] += @m[0][$_-1] for 1..$max-x-1;\n@m[$_][0] += @m[$_-1][0] for 1..$max-y-1;\n\nfor 1..$max-y-1 -> $y {\n    for 1..$max-x-1 -> $x {\n        @m[$y][$x] += @m[$y-1][$x] min @m[$y][$x-1];\n    }\n}\n\nsay @m[*-1][*-1];\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 619,
              "line": 26,
              "column": 1
            },
            "end": {
              "offset": 1143,
              "line": 50,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Roman numerals\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob089-andreoss.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "IYB0518RN_Jt2jY5aTCqp",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Roman numerals\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Roman numerals\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 43,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 43,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "YcxPwwhhNvecR2TifDcUd"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Andrei Osipov\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Andrei Osipov\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 44,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 66,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 44,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 66,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "uiizympJIdMC-PlMyCSbf"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=89>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=89"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 67,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 106,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For a number written in Roman numerals to be considered valid there\nare basic rules which must be followed. Even though the rules allow\nsome numbers to be expressed in more than one way there is always a\n\"best\" way of writing a particular number.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For a number written in Roman numerals to be considered valid there\nare basic rules which must be followed. Even though the rules allow\nsome numbers to be expressed in more than one way there is always a\n\"best\" way of writing a particular number.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 107,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 354,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For example, it would appear that there are at least six ways of\nwriting the number sixteen:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For example, it would appear that there are at least six ways of\nwriting the number sixteen:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 355,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 448,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "IIIIIIIIIIIIIIII\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "IIIIIIIIIIIIIIII\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 449,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 466,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "VIIIIIIIIIII\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "VIIIIIIIIIII\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 467,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 480,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "VVIIIIII\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "VVIIIIII\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 481,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 490,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "XIIIIII\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "XIIIIII\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 491,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 499,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "VVVI\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "VVVI\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 500,
                  "line": 27,
                  "column": 1
                },
                "end": {
                  "offset": 505,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "XVI\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "XVI\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 506,
                  "line": 29,
                  "column": 1
                },
                "end": {
                  "offset": 510,
                  "line": 30,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "However, according to the rules only XIIIIII and XVI are valid, and\nthe last example is considered to be the most efficient, as it uses\nthe least number of numerals.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "However, according to the rules only XIIIIII and XVI are valid, and\nthe last example is considered to be the most efficient, as it uses\nthe least number of numerals.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 511,
                  "line": 31,
                  "column": 1
                },
                "end": {
                  "offset": 677,
                  "line": 34,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The 11K text file roman.txt contains one thousand numbers written in\nvalid, but not necessarily minimal, Roman numerals; see About... Roman\nNumerals for the definitive rules for this problem.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The 11K text file roman.txt contains one thousand numbers written in\nvalid, but not necessarily minimal, Roman numerals; see About... Roman\nNumerals for the definitive rules for this problem.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 678,
                  "line": 35,
                  "column": 1
                },
                "end": {
                  "offset": 870,
                  "line": 38,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the number of characters saved by writing each of these in their\nminimal form.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the number of characters saved by writing each of these in their\nminimal form.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 871,
                  "line": 39,
                  "column": 1
                },
                "end": {
                  "offset": 955,
                  "line": 41,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Note: You can assume that all the Roman numerals in the file contain\nno more than four consecutive identical units.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Note: You can assume that all the Roman numerals in the file contain\nno more than four consecutive identical units.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 956,
                  "line": 42,
                  "column": 1
                },
                "end": {
                  "offset": 1072,
                  "line": 44,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1082,
              "line": 46,
              "column": 1
            }
          },
          "id": "BkLN_k34pzFQBGtWOfC_B"
        },
        {
          "text": "\nuse experimental :cached;\n\nmulti roman-to-int() { 0 }\nmulti roman-to-int(Str $r where $r.chars > 1 ) {\n    roman-to-int(| $r.comb)\n}\n\nmulti roman-to-int('I', 'X', |a) { 9   + roman-to-int |a }\nmulti roman-to-int('I', 'V', |a) { 4   + roman-to-int |a }\nmulti roman-to-int('I',      |a) { 1   + roman-to-int |a }\n\nmulti roman-to-int('X', 'L', |a) { 40  + roman-to-int |a }\nmulti roman-to-int('X', 'C', |a) { 90  + roman-to-int |a }\nmulti roman-to-int('X',      |a) { 10  + roman-to-int |a }\n\nmulti roman-to-int('C', 'M', |a) { 900 + roman-to-int |a }\nmulti roman-to-int('C', 'D', |a) { 400 + roman-to-int |a }\nmulti roman-to-int('C',      |a) { 100 + roman-to-int |a }\n\nmulti roman-to-int($v,       |a) {\n    roman-to-int(|a) + do given $v {\n        when 'I' { 1 }\n        when 'V' { 5 }\n        when 'X' { 10 }\n        when 'L' { 50 }\n        when 'C' { 100 }\n        when 'D' { 500 }\n        when 'M' { 1000 }\n    }\n}\n\n\nsub int-to-roman(Int \\n) returns Str is cached {\n    given n {\n        when * >= 1000 { 'M'  ~ int-to-roman(n - 1000) }\n        when * >= 900  { 'CM' ~ int-to-roman(n - 900) }\n        when * >= 500  { 'D'  ~ int-to-roman(n - 500) }\n        when * >= 400  { 'CD' ~ int-to-roman(n - 400) }\n        when * >= 100  { 'C'  ~ int-to-roman(n - 100) }\n        when * >= 90   { 'XC' ~ int-to-roman(n - 90) }\n        when * >= 50   { 'L'  ~ int-to-roman(n - 50) }\n        when * >= 40   { 'XL' ~ int-to-roman(n - 40) }\n        when * >= 10   { 'X'  ~ int-to-roman(n - 10) }\n        when * >= 9    { 'IX' ~ int-to-roman(n - 9) }\n        when * >= 5    { 'V'  ~ int-to-roman(n - 5) }\n        when * >= 4    { 'IV' ~ int-to-roman(n - 4) }\n        when * >= 1    { 'I'  ~ int-to-roman(n - 1) }\n        default        { '' }\n    }\n}\n\n\nsub MAIN(Bool :$run-tests = False,\n         Str  :$file      = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, 'roman.txt')) {\n\n    return TEST if $run-tests;\n    die \"$file is missing\" unless $file.IO.e;\n    say [+] do for $file.IO.lines -> $line {\n        $line.chars - (int-to-roman roman-to-int $line).chars;\n    }\n}\n\nsub TEST {\n    use Test;\n\n    {\n        my $i = roman-to-int(\"XXXXVIIII\");\n        ok roman-to-int(int-to-roman $i) == $i, \"sanity test\";\n    }\n    {\n        my $i = (^1000).pick;\n        ok roman-to-int(int-to-roman $i) == $i, \"sanity test\";\n    }\n\n    ok (roman-to-int(\"IIIIIIIIIIIIIIII\") ==\n        roman-to-int(\"VIIIIIIIIIII\") ==\n        roman-to-int(\"VVIIIIII\") ==\n        roman-to-int(\"XIIIIII\") ==\n        roman-to-int(\"VVVI\") ==\n        roman-to-int(\"XVI\")), 'roman-to-int works';\n    is int-to-roman(6666) , \"MMMMMMDCLXVI\", 'int-to-roman works';\n    done;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1082,
              "line": 46,
              "column": 1
            },
            "end": {
              "offset": 3745,
              "line": 132,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Square digit chains\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob092-moritz.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "HRE25T-HtvW4CIXLMtaPC",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Square digit chains\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Square digit chains\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 48,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 48,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "LGbsxkjlPvynQr83z5Xe1"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Moritz Lenz\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Moritz Lenz\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 49,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 69,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 49,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 69,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "MKOnrk-qfmofd-sm62vfy"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=92>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=92"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 70,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 109,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A number chain is created by continuously adding the square of the digits in\na number to form a new number until it has been seen before.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A number chain is created by continuously adding the square of the digits in\na number to form a new number until it has been seen before.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 110,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 248,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For example,\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For example,\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 249,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 262,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "block",
              "content": [
                {
                  "type": "text",
                  "value": "44 → 32 → 13 → 10 → "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "1"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " → "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "1"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": "\n85 → "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "89"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": " → 145 → 42 → 20 → 4 → 16 → 37 → 58 → "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "89"
                    }
                  ],
                  "type": "fcode",
                  "name": "B"
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "name": "code",
              "margin": "",
              "text": "=begin code :allow<B>\n44 → 32 → 13 → 10 → B<1> → B<1>\n85 → B<89> → 145 → 42 → 20 → 4 → 16 → 37 → 58 → B<89>\n=end code\n",
              "config": [
                {
                  "name": "allow",
                  "value": [
                    "B"
                  ],
                  "type": "array"
                }
              ],
              "location": {
                "start": {
                  "offset": 263,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 381,
                  "line": 20,
                  "column": 1
                }
              },
              "id": "07LyFuUNapfQXhdnK3MW1"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Therefore any chain that arrives at 1 or 89 will become stuck in an endless\nloop. What is most amazing is that EVERY starting number will eventually\narrive at 1 or 89.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Therefore any chain that arrives at 1 or 89 will become stuck in an endless\nloop. What is most amazing is that EVERY starting number will eventually\narrive at 1 or 89.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 382,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 550,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "How many starting numbers below ten million will arrive at 89?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "How many starting numbers below ten million will arrive at 89?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 551,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 614,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 624,
              "line": 28,
              "column": 1
            }
          },
          "id": "85NQ1mGPqohX-hlSoddao"
        },
        {
          "text": "\nunless @*ARGS {\n    say 'WARNING';\n    say 'This is going to take *really* long (order of magnitude: 30 h) with';\n    say 'the default number (1e7)';\n    say 'To run it for a small number, simply supply that number';\n    say 'on the command line.';\n}\n\nmy %ser;\n%ser{1}  = 1;\n%ser{89} = 89;\n\nmy @squares = map { $_ * $_ }, 0..9;\n\nsub ser($i is copy) {\n    return %ser{$i} if %ser{$i}:exists;\n    my @to_update;\n    while !(%ser{$i}:exists) {\n        @to_update.push($i);\n        $i = [+] $i.split('').map: { $_ * $_ };\n    }\n    my $s = %ser{$i};\n    %ser{$_} = $s for @to_update;\n    return $s;\n}\n\nmy $c = 0;\nmy $target = @*ARGS[0] // 1e7;\nsay \"running up to $target\";\nfor 1..($target-1) {\n    .say if $_ % ($target / 10).Int == 0;\n    ++$c if ser($_) == 89;\n}\nsay \"Result: $c\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 624,
              "line": 28,
              "column": 1
            },
            "end": {
              "offset": 1444,
              "line": 65,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Large non-Mersenne prime\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob097-andreoss.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "rL-Lb1fqGZRM1oIYGbfAV",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Large non-Mersenne prime\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Large non-Mersenne prime\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 53,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 53,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "2UjSfWesdpINKfnwWYeRM"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Andrei Osipov\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Andrei Osipov\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 54,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 76,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 54,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 76,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "uZnmZk-vWT6kmoWYG6wfT"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=97>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=97"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 77,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 116,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The first known prime found to exceed one million digits was\ndiscovered in 1999, and is a Mersenne prime of the form 26972593−1; it\ncontains exactly 2,098,960 digits. Subsequently other Mersenne primes,\nof the form 2p−1, have been found which contain more digits.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The first known prime found to exceed one million digits was\ndiscovered in 1999, and is a Mersenne prime of the form 26972593−1; it\ncontains exactly 2,098,960 digits. Subsequently other Mersenne primes,\nof the form 2p−1, have been found which contain more digits.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 117,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 381,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "However, in 2004 there was found a massive non-Mersenne prime which\ncontains 2,357,207 digits: 28433×2**7830457+1.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "However, in 2004 there was found a massive non-Mersenne prime which\ncontains 2,357,207 digits: 28433×2**7830457+1.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 382,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 497,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Find the last ten digits of this prime number.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find the last ten digits of this prime number.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 498,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 545,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 555,
              "line": 22,
              "column": 1
            }
          },
          "id": "9bTL352zqWYwkME4TkQ1r"
        },
        {
          "text": "\nsub power-mod($b is copy, $e is copy, $m is copy\n                                       where $b & $e & $m > 0)  {\n    my $r = 1;\n    while $e != 0 {\n        $r = $r * $b mod $m if $e !%% 2;\n        $e = floor $e/2;\n        $b = $b ** 2 mod $m\n    }\n    $r;\n}\n\nsay (power-mod(2, 7830457, 10**10) * 28433 + 1) mod 10**10 ;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 555,
              "line": 22,
              "column": 1
            },
            "end": {
              "offset": 918,
              "line": 37,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Anagramic squares\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob098-andreoss.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "-SPCtqjJr2BRkiNbbrOKa",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Anagramic squares\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Anagramic squares\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 46,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 46,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "g44U5bFgtrD_qhXLuqPSP"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Andrei Osipov\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Andrei Osipov\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 47,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 69,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 47,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 69,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "hMjyoVMB2soccBHXuYsk2"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=98>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=98"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 70,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 109,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "By replacing each of the letters in the word CARE with 1, 2, 9, and 6\nrespectively, we form a square number: 1296 = 36². What is remarkable is\nthat, by using the same digital substitutions, the anagram, RACE, also forms\na square number: 9216 = 96². We shall call CARE (and RACE) a square anagram\nword pair and specify further that leading zeroes are not permitted, neither\nmay a different letter have the same digital value as another letter.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "By replacing each of the letters in the word CARE with 1, 2, 9, and 6\nrespectively, we form a square number: 1296 = 36². What is remarkable is\nthat, by using the same digital substitutions, the anagram, RACE, also forms\na square number: 9216 = 96². We shall call CARE (and RACE) a square anagram\nword pair and specify further that leading zeroes are not permitted, neither\nmay a different letter have the same digital value as another letter.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 110,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 553,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Using words.txt\nL<https://projecteuler.net/project/resources/p098_words.txt>, a 16K text\nfile containing nearly two-thousand common English words, find all the\nsquare anagram word pairs (a palindromic word is NOT considered to be an\nanagram of itself).\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Using words.txt\n"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/project/resources/p098_words.txt"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": ", a 16K text\nfile containing nearly two-thousand common English words, find all the\nsquare anagram word pairs (a palindromic word is NOT considered to be an\nanagram of itself).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 554,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 807,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What is the largest square number formed by any member of such a pair?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What is the largest square number formed by any member of such a pair?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 808,
                  "line": 24,
                  "column": 1
                },
                "end": {
                  "offset": 879,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "NOTE: All anagrams formed must be contained in the given text file.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "NOTE: All anagrams formed must be contained in the given text file.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 880,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 948,
                  "line": 27,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 958,
              "line": 29,
              "column": 1
            }
          },
          "id": "HMRFGU2SVK_nc868h2z1E"
        },
        {
          "text": "\nsub correspond([$word1, $word2], [$num1, $num2]) {\n    $word2.trans($word1 => ~$num1) eq $num2   &&\n    $num2.trans( ~$num1 => $word1) eq $word2;\n\n}\n\nsub anagrams(@x) {\n    my %aux;\n    my %result;\n\n    %aux{$_.comb.sort.join}.push: $_\n        for @x;\n\n    for %aux.kv -> $k, @v {\n        next if +@v < 2; ;\n        %result{@v[0].chars}.push:\n                +@v == 2\n                  ?? @v.item\n                  !! |@v.combinations(2).map(*.item);\n    }\n\n    %result;\n}\n\n\nsub MAIN(Bool :$verbose = False,\n         Str  :$file    = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, 'words.txt')) {\n\n    die \"$file is missing\" unless $file.IO.e;\n\n    my @words = sort unique $file.IO.slurp.split: / <[,\"]>+ /;\n\n    my %words   =  anagrams(@words);\n    my $longest-word = %words.keys.max;\n\n    my %squares =  anagrams(\n        (1 ... (10**($longest-word + 1).sqrt)) »**» 2\n    );\n\n    say max do for 3 ... $longest-word -> \\size {\n        next unless %words{size};\n        |do for @(%words{size}) -> @pair {\n            next unless %squares{size};\n            |do for @(%squares{size}) -> @nums {\n                if correspond(@pair, @nums) {\n                    $verbose and say \"@pair[] => @nums[]\" ;\n                    max @nums;\n                }\n            }\n        }\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 958,
              "line": 29,
              "column": 1
            },
            "end": {
              "offset": 2274,
              "line": 84,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Largest exponential\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/euler/prob099-andreoss.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "IfIrXbNzlxJOd1WDMotCd",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Largest exponential\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Largest exponential\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 48,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 48,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "hwftWMhI8morzLqTCkXos"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Andrei Osipov\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Andrei Osipov\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 49,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 49,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "FLZKCk_Ds7t2tOWoCDtC5"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://projecteuler.net/problem=99>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/problem=99"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 72,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 111,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Comparing two numbers written in index form like 2^11 and 3^7 is not\ndifficult, as any calculator would confirm that 2^11 = 2048 < 3^7 = 2187.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Comparing two numbers written in index form like 2^11 and 3^7 is not\ndifficult, as any calculator would confirm that 2^11 = 2048 < 3^7 = 2187.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 112,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 255,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "However, confirming that 632382^518061 > 519432^525806 would be much more\ndifficult, as both numbers contain over three million digits.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "However, confirming that 632382^518061 "
                },
                {
                  "type": "text",
                  "value": ">"
                },
                {
                  "type": "text",
                  "value": " 519432^525806 would be much more\ndifficult, as both numbers contain over three million digits.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 256,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 392,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Using base_exp.txt\nL<https://projecteuler.net/project/resources/p099_base_exp.txt>, a 22K text\nfile containing one thousand lines with a base/exponent pair on each line,\ndetermine which line number has the greatest numerical value.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Using base_exp.txt\n"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://projecteuler.net/project/resources/p099_base_exp.txt"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": ", a 22K text\nfile containing one thousand lines with a base/exponent pair on each line,\ndetermine which line number has the greatest numerical value.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 393,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 625,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "NOTE: The first two lines in the file represent the numbers in the example\ngiven above.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "NOTE: The first two lines in the file represent the numbers in the example\ngiven above.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 626,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 714,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 724,
              "line": 26,
              "column": 1
            }
          },
          "id": "euMvPOh8cNnE7ZQ-T348E"
        },
        {
          "text": "\nclass BaseExp {\n    has $.base;\n    has $.exp;\n    has $.line;\n    method comparable {\n        $.exp * $.base.log;\n    }\n}\n\nmulti infix:«cmp»(BaseExp $a, BaseExp $b) {\n    $a.comparable <=> $b.comparable;\n}\n\nmulti my-max($a, $b where $a cmp $b ~~ More) { $a }\nmulti my-max($a, $b) { $b }\n\nsub MAIN(:$file  = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, 'base_exp.txt'),\n        ) {\n    die \"'$file' is missing\" unless $file.IO.e ;\n    my $n = 1 ;\n    say .line for [[&my-max]] do for $file.IO.lines -> $l {\n        my ($base, $exp) = $l.split: /','/;\n        BaseExp.new(base => $base,\n                    exp  => $exp,\n                    line => $n++);\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 724,
              "line": 26,
              "column": 1
            },
            "end": {
              "offset": 1424,
              "line": 56,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "file": "work_examples/categories/euler/README.md",
    "sources": [],
    "node": {
      "type": "block",
      "id": "RcU0JmgDWABeiavNxFDWz",
      "margin": "",
      "name": "root",
      "content": [
        {
          "type": "block",
          "id": "E5qSaaOQiVLFx_p-8cdj_",
          "margin": "",
          "level": 1,
          "name": "head",
          "location": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 16,
              "offset": 15
            }
          },
          "content": [
            "Project Euler"
          ]
        },
        {
          "type": "para",
          "id": "-F7q3q7Eyp4bCw_X01eGn",
          "margin": "",
          "location": {
            "start": {
              "line": 3,
              "column": 1,
              "offset": 17
            },
            "end": {
              "line": 3,
              "column": 25,
              "offset": 41
            }
          },
          "text": "text",
          "content": [
            {
              "meta": "http://projecteuler.net/",
              "type": "fcode",
              "name": "L",
              "content": [
                "http://projecteuler.net/"
              ]
            }
          ]
        },
        {
          "type": "para",
          "id": "F_kMoViQp-wnKI5Ok7ScP",
          "margin": "",
          "location": {
            "start": {
              "line": 5,
              "column": 1,
              "offset": 43
            },
            "end": {
              "line": 5,
              "column": 64,
              "offset": 106
            }
          },
          "text": "text",
          "content": [
            "This is a directory to post answers to Project Euler questions."
          ]
        },
        {
          "type": "para",
          "id": "xh4Rt0RdGQ5rT30tj7cTx",
          "margin": "",
          "location": {
            "start": {
              "line": 7,
              "column": 1,
              "offset": 108
            },
            "end": {
              "line": 7,
              "column": 55,
              "offset": 162
            }
          },
          "text": "text",
          "content": [
            "Please only post solutions for the first 100 problems."
          ]
        },
        {
          "type": "block",
          "id": "D-o2faz5_5k2edWGasNht",
          "margin": "",
          "level": 2,
          "name": "head",
          "location": {
            "start": {
              "line": 9,
              "column": 1,
              "offset": 164
            },
            "end": {
              "line": 9,
              "column": 33,
              "offset": 196
            }
          },
          "content": [
            "Adding a new example solution"
          ]
        },
        {
          "type": "para",
          "id": "NWV9FEkS79H2Fk0bDAETy",
          "margin": "",
          "location": {
            "start": {
              "line": 11,
              "column": 1,
              "offset": 198
            },
            "end": {
              "line": 13,
              "column": 76,
              "offset": 417
            }
          },
          "text": "text",
          "content": [
            "Use the file format ",
            {
              "type": "fcode",
              "name": "C",
              "content": [
                "prob000-author.pl"
              ]
            },
            ", replacing \"000\" with the problem\nnumber and \"author\" with your name or your nick.  For example if I am\neric256 and I answer problem No. 1, I will save it as ",
            {
              "type": "fcode",
              "name": "C",
              "content": [
                "prob001-eric256.pl"
              ]
            },
            "."
          ]
        },
        {
          "type": "para",
          "id": "WVQJLrFAk-rE6-to_jgK8",
          "margin": "",
          "location": {
            "start": {
              "line": 15,
              "column": 1,
              "offset": 419
            },
            "end": {
              "line": 15,
              "column": 20,
              "offset": 438
            }
          },
          "text": "text",
          "content": [
            "Thanks for playing!"
          ]
        },
        {
          "type": "block",
          "id": "OTN2JCaTLxYCZ6IfUV06O",
          "margin": "",
          "level": 3,
          "name": "head",
          "location": {
            "start": {
              "line": 17,
              "column": 1,
              "offset": 440
            },
            "end": {
              "line": 17,
              "column": 28,
              "offset": 467
            }
          },
          "content": [
            "Example solution layout"
          ]
        },
        {
          "type": "para",
          "id": "vxfM0HG5RiWRR2sIuWKxh",
          "margin": "",
          "location": {
            "start": {
              "line": 19,
              "column": 1,
              "offset": 469
            },
            "end": {
              "line": 19,
              "column": 63,
              "offset": 531
            }
          },
          "text": "text",
          "content": [
            "Please follow the layout of the other example solutions, e.g.:"
          ]
        },
        {
          "type": "block",
          "id": "Wz3CVqyRuMND4f39esvwV",
          "margin": "",
          "name": "code",
          "config": [],
          "location": {
            "start": {
              "line": 21,
              "column": 1,
              "offset": 533
            },
            "end": {
              "line": 37,
              "column": 43,
              "offset": 916
            }
          },
          "content": [
            {
              "type": "verbatim",
              "value": "use v6;\n\n=begin pod\n\n=TITLE Title of example from Project Euler website\n\n=AUTHOR Your name (or nick, if you want)\n\nL<https://projecteuler.net/problem=XXX> # where XXX is the problem number\n\nDescription of the problem as per the Project Euler website\n\nExpected result:  XXXX   # the expected output\n\n=end pod\n\n# perl6 code solving the given problem"
            }
          ]
        },
        {
          "type": "block",
          "id": "R4gGd7A5Sldz9-JuQAlXb",
          "margin": "",
          "level": 3,
          "name": "head",
          "location": {
            "start": {
              "line": 39,
              "column": 1,
              "offset": 918
            },
            "end": {
              "line": 39,
              "column": 41,
              "offset": 958
            }
          },
          "content": [
            "Add a test for your example solution"
          ]
        },
        {
          "type": "para",
          "id": "VeezYCS2EmERRv1UpcxRb",
          "margin": "",
          "location": {
            "start": {
              "line": 41,
              "column": 1,
              "offset": 960
            },
            "end": {
              "line": 42,
              "column": 58,
              "offset": 1092
            }
          },
          "text": "text",
          "content": [
            "The solutions are tested in ",
            {
              "type": "fcode",
              "name": "C",
              "content": [
                "t/categories/euler.t"
              ]
            },
            ".  If you add a solution\nto an as yet unsolved problem, add a new subtest like so:"
          ]
        },
        {
          "type": "block",
          "id": "LsBKlfWkIxPBY1KIJ6m-Z",
          "margin": "",
          "name": "code",
          "config": [],
          "location": {
            "start": {
              "line": 44,
              "column": 1,
              "offset": 1094
            },
            "end": {
              "line": 52,
              "column": 18,
              "offset": 1318
            }
          },
          "content": [
            {
              "type": "verbatim",
              "value": "subtest {\n    plan 1;\n\n    my $problem = \"probXXX\";\n    my @authors = <your-nick>;\n    my $expected-output = XXXXX;\n\n    check-example-solutions($problem, $expected-output, @authors)\n}, \"probXXX\";"
            }
          ]
        },
        {
          "type": "para",
          "id": "MvcQYLXPIVXPM2OKOv0Sq",
          "margin": "",
          "location": {
            "start": {
              "line": 54,
              "column": 1,
              "offset": 1320
            },
            "end": {
              "line": 54,
              "column": 50,
              "offset": 1369
            }
          },
          "text": "text",
          "content": [
            "Don't forget to increment the plan for all tests!"
          ]
        },
        {
          "type": "para",
          "id": "Ex1C9TKFLmyyGaxzIcafk",
          "margin": "",
          "location": {
            "start": {
              "line": 56,
              "column": 1,
              "offset": 1371
            },
            "end": {
              "line": 58,
              "column": 43,
              "offset": 1557
            }
          },
          "text": "text",
          "content": [
            "Or if you add a new, alternative solution to a previously solved problem,\nmerely add your name/nick to the list of authors for that problem and\nincrement the plan for that subtest, e.g.:"
          ]
        },
        {
          "type": "block",
          "id": "Y-ArM8MtoA_VPkkOTMLRU",
          "margin": "",
          "name": "code",
          "config": [],
          "location": {
            "start": {
              "line": 60,
              "column": 1,
              "offset": 1559
            },
            "end": {
              "line": 69,
              "column": 18,
              "offset": 1893
            }
          },
          "content": [
            {
              "type": "verbatim",
              "value": "subtest {\n    plan 6;  # bumped from 5 to 6\n\n    my $problem = \"prob001\";\n    # \"your-nick\" added to list of authors\n    my @authors = <cspencer eric256 grondilu hexmode unobe your-nick>;\n    my $expected-output = 233168;\n\n    check-example-solutions($problem, $expected-output, @authors)\n}, \"prob001\";"
            }
          ]
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Blackjack\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/games/blackjack.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "9LqbB7St9FbQdjraW0E40",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env perl6\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 31,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Blackjack\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Blackjack\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 43,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 60,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 43,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 60,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "pB5yg6nyv6aVRgTYb6Cqo"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Whipp\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Whipp\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 61,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 81,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 61,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 81,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "Ygr8XjiaBBw3rVCYv_Cff"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Play Blackjack (a.k.a. 21) just like in a casino.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Play Blackjack (a.k.a. 21) just like in a casino.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 82,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 132,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "USAGE\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "USAGE\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 133,
                      "line": 13,
                      "column": 1
                    },
                    "end": {
                      "offset": 146,
                      "line": 14,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 133,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 146,
                  "line": 14,
                  "column": 1
                }
              },
              "level": "1",
              "id": "USAGE"
            },
            {
              "type": "blankline"
            },
            {
              "text": "perl6 blackjack.p6\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "perl6 blackjack.p6\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 147,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 170,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 31,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 180,
              "line": 18,
              "column": 1
            }
          },
          "id": "55_L-WG6wrZhP47-Uu7DS"
        },
        {
          "text": "\nmy $player_is_human = 1;\n\nmy @values = (\n    ace => 1|11,\n    two => 2,\n    three => 3,\n    four => 4,\n    five => 5,\n    six => 6,\n    seven => 7,\n    eight => 8,\n    nine => 9,\n    ten => 10,\n    jack => 10,\n    queen => 10,\n    king => 10,\n);\n\nmy @suites = < spades clubs diamonds hearts >;\n\nmy @deck = flat( @values X @suites ).map: { my ($name, $value) = $^a.kv; $name ~= \" of $^b\"; $name => $value };\n\nmy @cards = @deck.pick( @deck.elems );\n\nmy @dealer;\nmy @player;\n\n@dealer.push( @cards.shift );\n@player.push( @cards.shift );\n@dealer.push( @cards.shift );\n\nsay \"DEALER:\";\nsay @dealer[0].key;\nsay \"\";\n\nsay \"PLAYER:\";\n.key.say for @player;\n\nmy $player_value = [+] @player.map: { .value };\n\nloop {\n    my $card = @cards.shift;\n\n    @player.push( $card );\n    say $card.key;\n\n    $player_value += $card.value;\n\n    say \"current value is { $player_value.perl }\";\n\n    if $player_value == 21 {\n        say \"congradulations, you win!\";\n        exit 0;\n    }\n    elsif $player_value < 21 {\n        say \"hit (h) or stay (s)\";\n        my $choice;\n        if ($player_is_human) {\n            loop {\n                $choice = lc $*IN.get;\n                last if $choice eq \"h\" | \"s\";\n                #last if $choice ~~ /h|s/;\n                say \"invalid entry: 'h' or 's'\";\n            }\n        }\n        else {\n            $choice = \"stay\" unless $player_value < 16;\n        }\n        say $choice;\n        last if $choice ~~ /s/;\n    }\n    else {\n        say \"Sorry, you bust!\";\n        exit 0;\n    }\n}\n\nsay \"\";\n\n$player_value = [max] (4 .. 21).grep: { $_ == $player_value };\n\nsay \"DEALER:\";\n.key.say for @dealer;\n\nmy $dealer_value = [+] @dealer.map: { .value };\n\nloop {\n    say \"dealer value: {$dealer_value.perl}\";\n\n    if $dealer_value == any( $player_value ^.. 21) {\n        say \"you loose!\";\n        exit 0;\n    }\n    elsif $dealer_value < 21 {\n        my $card = @cards.shift;\n        @dealer.push( $card );\n        say $card.key;\n        $dealer_value += $card.value;\n    }\n    else {\n        say \"dealer bust: you win!\";\n        exit 0;\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 180,
              "line": 18,
              "column": 1
            },
            "end": {
              "offset": 2274,
              "line": 125,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Connect4\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/games/connect4.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Fb7xtjPW03SfgY6bTf7iz",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env perl6\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 31,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Connect4\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Connect4\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 43,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 59,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 43,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 59,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "gHr0sWUG4BDYsX9rM90Dy"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Whipp\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Whipp\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 60,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 80,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 60,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 80,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "vuwhKq8tlXICsvv8NWUHU"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Play the L<Connect4|http://en.wikipedia.org/wiki/Connect_Four> game.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Play the "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "Connect4"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": "http://en.wikipedia.org/wiki/Connect_Four"
                },
                {
                  "type": "text",
                  "value": " game.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 81,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 150,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 31,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 160,
              "line": 14,
              "column": 1
            }
          },
          "id": "1SKy2fmSxiZ3noNi8jPLi"
        },
        {
          "text": "\n# pre-declare types\nclass Game { ... };\nclass Move { ... };\n\nclass Player {\n    has Str $.token;\n    has Str $.highlighter_token;\n\n    method get_move( Game $game ) { ... };\n}\n\nclass HumanPlayer is Player {\n    has Str $.token;\n    has Str $.highlighter_token;\n\n    method get_move( Game $game ) {\n\n        my @legal_moves = $game.legal_moves( self );\n\n        loop {\n            my $user_input =\n                prompt(\"Enter column number for {$.token} to play: \");\n            if @legal_moves.first: { .column == $user_input-1 } -> $move {\n                return $move;\n            }\n            else {\n                say \"move must be a legal (not full) column number\";\n            }\n        }\n\n    }\n}\n\nclass ComputerPlayer is Player {\n\n    has Str $.token;\n    has Str $.highlighter_token;\n\n    has Int $.look_ahead;\n\n    method get_move_choices ( Game $game, $debug = 1 ) {\n        my @legal_moves = $game.legal_moves( self );\n\n        if $.look_ahead > 0 && @legal_moves.grep: { .is_winning_move } -> @winning_moves {\n            say \"'$.token' has winning moves: {@winning_moves.map({.column + 1})}\" if $debug > 0;\n            return @winning_moves;\n        }\n        elsif $.look_ahead > 1 && @legal_moves.grep: { ! .gives_opponent_a_winning_move } -> @ok_moves {\n            if $.look_ahead > 2 && @ok_moves.grep: { .gives_opponent_only_losing_moves } -> @better_moves {\n                say \"'$.token' likes to play one of {@better_moves.map({.column + 1})}\" if $debug > 0;\n                return @better_moves;\n            }\n            else {\n                say \"'$.token' should play one of {@ok_moves.map({.column + 1})}\" if $debug > 0;\n                return @ok_moves;\n            }\n        }\n        else {\n            say \"'$.token' has no move preference\" if $debug > 0;\n            return @legal_moves;\n        }\n    }\n\n    method get_move( Game $game ) {\n        my Move $where = $.get_move_choices($game).pick();\n    }\n}\n\nclass Game {\n    has @!board;\n    has Int @!current_levels;\n\n    has @.player_types;\n\n    has Player @!players;\n\n    method clear_board() {\n        if @.player_types.elems != 2 {\n            die \"invalid game spec: {@.player_types} -- expencted list of two elems, each is either strength or 'H' for human\";\n        }\n        @!players = ();\n\n        if @.player_types[0] eq \"H\" {\n            @!players.push: HumanPlayer.new( token => \"X\", highlighter_token => \"*\" )\n        }\n        else {\n            @!players.push: ComputerPlayer.new( token => \"X\", highlighter_token => \"*\", look_ahead => @.player_types[0] )\n        }\n\n        if @.player_types[1] eq \"H\" {\n            @!players.push: HumanPlayer.new( token => \"O\", highlighter_token => \"@\" )\n        }\n        else {\n            @!players.push: ComputerPlayer.new( token => \"O\", highlighter_token => \"@\", look_ahead => @.player_types[1] )\n        }\n\n        @!board = (^7).map({[ \"\" xx 7 ]});\n        @!current_levels = 0 xx 7;\n    }\n\n    method other_player( Player $who ) {\n        @!players.first: { $_ !=== $who };\n    }\n\n    method next_available_row_of_column( Int $column ) {\n        if (@!board[6][$column]) {\n            die \"illegal move: $column\";\n        }\n        return @!current_levels[$column];\n    }\n\n    multi method set_board_state( Move $move ;; $value = $move.who.token ) {\n        @!board[$move.row][$move.column] = $value;\n    }\n\n    multi method set_board_state( Int $row, Int $column ;; $value ) {\n        @!board[$row][$column] = $value\n    }\n\n    method play_move( Move $move ) {\n        self.set_board_state: $move;\n        ++@!current_levels[$move.column];\n    }\n\n    method undo_move( Move $move ) {\n        self.set_board_state: $move, \"\";\n        --@!current_levels[$move.column];\n    }\n\n    method scan_for_win( Move $move, $fn ) {\n\n        my $token = $move.who.token;\n        my $column = $move.column;\n        my $row = $move.row;\n\n        for -1, 0, +1 -> $diag {\n            my @winning_points;\n            for -1, +1 -> $left_right {\n                for 1 .. 3 -> $delta_x {\n                    my $x = $column + ( $delta_x * $left_right );\n                    my $y = $row + ( $delta_x * $left_right * $diag );\n                    last unless 0 <= $x <= 6;\n                    last unless 0 <= $y <= 6;\n                    last unless @!board[$y][$x] eq $token;\n                    push @winning_points, [$y, $x];\n                }\n            }\n            $fn( @winning_points ) if @winning_points >= 3;\n        }\n\n        if $row > 2 {\n            my @winning_points = (1..3).map: -> $delta_y { [$row - $delta_y, $column] };\n            for @winning_points -> @p {\n                # TODO: @!board[ [;] @p ] eq $token\n                my ($y, $x);\n                ($y, $x) = @p;\n                return unless @!board[$y][$x] eq $token;\n            }\n            $fn( @winning_points );\n        }\n    }\n\n    method highlight_position( Move $move, *@points ) {\n        self.set_board_state: $move, \"#\";\n        my $token = $move.who.highlighter_token;\n        for @points -> @p { self.set_board_state: |@p, $token }\n    }\n\n    method display {\n        say (1..7).join(\"   \");\n        .map({ $_ || \"-\" }).join(\" | \").say for reverse @!board;\n    }\n\n\n    method legal_moves (Player $who) {\n        my @moves;\n        for ^7 -> $column {\n            push @moves, Move.new( game => self, who => $who, column => $column) unless @!board[6][$column];\n        }\n        return @moves;\n    }\n\n    method play_game {\n        self.clear_board;\n        self.display;\n\n        for ^49 -> $move_num {\n            my $who = @!players[ Int($move_num % 2) ];\n            my Move $where = $who.get_move( self );\n            my $win = $where.is_winning_move;\n            say \"\";\n            $where.play;\n            self.display;\n            if $win {\n                say \"{$who.token} WINS on move { Int($move_num/2) + 1 }!\";\n                return;\n            }\n        }\n        say \"DRAW\"\n    }\n}\n\nclass Move {\n    has Game $.game;\n\n    has Player $.who;\n    has Int $.column;\n    has Int $!row;\n    has Player $!other;\n\n    method row () {\n        $!row = $.game.next_available_row_of_column( $.column ) unless defined $!row;\n        return $!row\n    };\n\n    method perl () { \"Move( :who<{$.who.token}> :col<$.column> :row<$.row> )\" };\n\n    method opponent() {\n        unless defined $!other {\n            $!other = $.game.other_player( $.who );\n        }\n        return $!other;\n    }\n\n    method is_winning_move() {\n        my $win = False;\n        $.game.scan_for_win: self, { $win = True };\n        return $win;\n    }\n\n    method mark_winning_move( ) {\n        $.game.scan_for_win: self, -> @points {\n            $.game.highlight_position( self, @points );\n        }\n    }\n\n    method play() {\n        say \"play '{$.who.token}' -> {$.column+1}\";\n        self.game.play_move( self );\n        self.mark_winning_move;\n    }\n\n    method play_hypothetical() {\n        self.game.play_move( self )\n    }\n\n    method undo() {\n        self.game.undo_move( self )\n    }\n\n    method gives_opponent_a_winning_move() {\n        self.play_hypothetical;\n\n        my @legal_moves = self.game.legal_moves( $.opponent );\n        my $other_wins = ? @legal_moves.grep: { .is_winning_move };\n\n        self.undo;\n\n        return $other_wins;\n    }\n\n    method gives_opponent_only_losing_moves() {\n\n        self.play_hypothetical;\n\n        my @legal_moves = self.game.legal_moves( $.opponent );\n        my @other_losing_moves = @legal_moves.grep: { .gives_opponent_a_winning_move };\n\n        self.undo;\n\n        return @other_losing_moves == @legal_moves;\n    }\n}\n\nmy Game $game.=new( player_types => ( \"H\", 2 ) );\n$game.play_game;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 160,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 7842,
              "line": 293,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Flashcard\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/games/flashcard.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "JAlsQtZ9JqeHwS-C-4IQT",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env perl6\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 31,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Flashcard\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Flashcard\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 43,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 60,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 43,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 60,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "S7lD9e-TteuHtcETdK1xY"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Romano\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Romano\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 61,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 82,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 61,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 82,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "VHSQKCL4wPj8HQ6O42qHP"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Learn foreign language vocabulary using flashcards.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Learn foreign language vocabulary using flashcards.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 83,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 135,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 31,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 145,
              "line": 14,
              "column": 1
            }
          },
          "id": "_kYlwBi5oTCQqSih4LWv6"
        },
        {
          "text": "\nmy %table = (:context => (), :text => (), :link => (), :item => (), :group => ());\n# item => ({ text => @text[0], context => %table{'context'}[0], score => 0 # },...)\n# group = ({ 'link' => 1, itemA =>  item[0], itemB => item[1] } );\n\nsub add-to-array ( $name, *@values, :$debug = 1) {\n    %table{$name}.push(@values);\n    if $debug {\n        say \"$name is now <{%table{$name}.[]}>\";\n    }\n}\n\nmy $name = 'context';\nadd-to-array(<context>, <English French Latin> );\nadd-to-array(<text>, <hello bonjour salve> );\nadd-to-array(<link>, <idiom translation> );\n\nsub list-context {\n    for %table<context>.[] {\n        .say;\n    }\n}\n\nlist-context;\n# add-item: text_id-text_id context_id-context_id\nsub add-item () {\n\n}\n\n# add-group item_id-item_id link_id\nsub add-group () {\n\n}\n\n# question: can there be multiple links between the same two items? multiple\n# contexts for an item? The reason I'm pondering this is that for the example\n# above, it might make sense to have the link be a list (idiom, translation)\n# rather than just simply 'idiom'. The ordering of the list should count, so\n# that it's a 'translation' _of_ 'idiom', but I dunno. Are links and contexts\n# really just the same? No, that's a good separation. Well, for now I can keep\n# them as scalars and make them lists if I want to later.\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 145,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 1482,
              "line": 57,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Hangman\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/games/hangman.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Ijpx4ff0V6zIgQQlart0F",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env perl6\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 31,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Hangman\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Hangman\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 43,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 58,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 43,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 58,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "qRkmHpVSLBNewyWP29xv-"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Sterling Hanenkamp\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Sterling Hanenkamp\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 59,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 86,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 59,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 86,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "rgSduv9t21QCc15WetR6P"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Play Hangman from a word list of your choice. It will attempt to use the\nwordlist in the Unix dictionary file at F</usr/share/dict/words> if you do not\nname a different list of words.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Play Hangman from a word list of your choice. It will attempt to use the\nwordlist in the Unix dictionary file at "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "/usr/share/dict/words"
                    }
                  ],
                  "type": "fcode",
                  "name": "F"
                },
                {
                  "type": "text",
                  "value": " if you do not\nname a different list of words.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 87,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 271,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "USAGE\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "USAGE\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 272,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 285,
                      "line": 16,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 272,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 285,
                  "line": 16,
                  "column": 1
                }
              },
              "level": "1",
              "id": "USAGE"
            },
            {
              "type": "blankline"
            },
            {
              "text": "perl6 hangman.p6\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "perl6 hangman.p6\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 286,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 307,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 31,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 317,
              "line": 20,
              "column": 1
            }
          },
          "id": "QUQEKKHCB9NQ6yAgNbgmG"
        },
        {
          "text": "\nclass HangingMan {\n    enum DeathStage <NotHanging Head Body LeftLeg RightLeg LeftArm RightArm DeadDeadDead>;\n\n    constant @STAGES =\n        q:to/END_OF_NOT_HANGING/,\n        /----|\n        |\n        |\n        |\n        |\n        |\n        ==========\n        ||      ||\n        END_OF_NOT_HANGING\n        q:to/END_OF_HEAD/,\n        /----|\n        |   😶\n        |\n        |\n        |\n        |\n        ==========\n        ||      ||\n        END_OF_HEAD\n        q:to/END_OF_BODY/,\n        /----|\n        |   😐\n        |    |\n        |    |\n        |\n        |\n        ==========\n        ||      ||\n        END_OF_BODY\n        q:to/END_OF_LEFT_LEG/,\n        /----|\n        |   😑\n        |    |\n        |    |\n        |     \\\n        |\n        ==========\n        ||      ||\n        END_OF_LEFT_LEG\n        q:to/END_OF_RIGHT_LEG/,\n        /----|\n        |   😟\n        |    |\n        |    |\n        |   / \\\n        |\n        ==========\n        ||      ||\n        END_OF_RIGHT_LEG\n        q:to/END_OF_LEFT_ARM/,\n        /----|\n        |   😧\n        |    |\\\n        |    |\n        |   / \\\n        |\n        ==========\n        ||      ||\n        END_OF_LEFT_ARM\n        q:to/END_OF_RIGHT_ARM/,\n        /----|\n        |   😫\n        |   /|\\\n        |    |\n        |   / \\\n        |\n        ==========\n        ||      ||\n        END_OF_RIGHT_ARM\n        q:to/END_OF_DEAD_DEAD_DEAD/,\n        /----|\n        |   😵\n        |   /|\\\n        |    |\n        |   / \\\n        |\n        ==========\n        ||      ||\n        END_OF_DEAD_DEAD_DEAD\n        ;\n\n    has $.death-stage = NotHanging;\n\n    method worsen() { $!death-stage = DeathStage($!death-stage + 1) }\n    method is-dead-dead-dead { $!death-stage eqv DeadDeadDead }\n\n    method gist() { @STAGES[ $!death-stage ] }\n    method Str() { @STAGES[ $!death-stage ] }\n}\n\nclass X::GameException is Exception { }\n\nclass X::AlreadyGuessed is X::GameException {\n    has $.letter;\n    method message { \"You already guessed $.letter.\" }\n}\n\nclass X::BadLetter is X::GameException {\n    has $.letter;\n    method message { \"You said $.letter, but that is not a letter.\" }\n}\n\nclass GuessState {\n    has Str $.original;\n    has Str @!word;\n    has Str @!correct;\n    has Str @!remaining = 'A' .. 'Z';\n\n    submethod BUILD(:$!original) {\n        $!original .= uc;\n        @!word    = $!original.comb;\n        @!correct = $!original.comb.map(-> $l { $l ~~ /<[A..Z]>/ ?? \"_\" !! $l });\n    }\n\n    method letters-left { @!correct.grep(\"_\").elems }\n    method is-winner { $.letters-left == 0 }\n\n    method render-remaining { @!remaining.join(\" \") };\n    method render-word { @!correct.join(\" \") };\n\n    method guess($letter is copy) {\n        $letter .= uc;\n\n        X::BadLetter.new(:$letter).throw\n            unless $letter ~~ /<[A..Z]>/;\n\n        X::AlreadyGuessed.new(:$letter).throw\n            if $letter !~~ any(|@!remaining);\n\n        @!remaining .= grep({ $_ !~~ $letter });\n\n        my $success = False;\n        for @!word.kv -> $i, $l {\n            if $l eq $letter {\n                @!correct[$i] = $l;\n                $success = True;\n            }\n        }\n\n        return $success;\n    }\n\n    method gist { \"$.render-word\\n\\nLetters Left:\\n$.render-remaining\" }\n    method Str { $.gist }\n}\n\nsub MAIN($word-file-name = \"/usr/share/dict/words\") {\n    my $word-file = $word-file-name.IO;\n    unless $word-file ~~ :f {\n        note \"usage: $*PROGRAM-NAME wordfile\";\n        note \"Unable to read words from $word-file-name\";\n        exit 1;\n    }\n\n    my $word = $word-file.slurp.lines.pick;\n    my $win-state = GuessState.new(original => $word);\n    my $lose-state = HangingMan.new;\n\n    loop {\n        say $lose-state;\n\n        if $lose-state.is-dead-dead-dead {\n            say \"Sorry, you lose.\";\n            say \"The word was $win-state.original().\";\n            return;\n        }\n\n        say $win-state;\n        my $letter = prompt \"Pick a letter: \";\n\n        $lose-state.worsen unless $win-state.guess($letter);\n\n        if $win-state.is-winner {\n            say q:to/END_OF_WIN/;\n                /----|\n                |\n                |  \\😅/\n                |    |\n                |    |\n                |   / \\\n                ==========\n                ||      ||\n\n                You win! The word was $win-state.original().\n                END_OF_WIN\n            return;\n        }\n\n        CATCH {\n            when X::GameException { .message.say }\n        }\n    }\n}\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 317,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 4736,
              "line": 219,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Tic Tac Toe\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/games/tictactoe.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "cgVRfU57Pplim7rjlRoFZ",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env perl6\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 31,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Tic Tac Toe\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Tic Tac Toe\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 43,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 62,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 43,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 62,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "wmT6jOpoOzy8a_lgqadi_"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Philip Potter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Philip Potter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 63,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 63,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "eqFt34PWJ-2nBaTVWiEI5"
            },
            {
              "type": "blankline"
            },
            {
              "text": "From a silly discussion in #perl6...\nSee L<http://rhebus.posterous.com/learning-perl-6-by-playing-silly-games>\nand feel free to add a further golfed refinement to the end\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "From a silly discussion in #perl6...\nSee "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rhebus.posterous.com/learning-perl-6-by-playing-silly-games"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\nand feel free to add a further golfed refinement to the end\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 86,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 257,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Specification:\nFind out who won, if anyone, in a game of tic-tac-toe.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Specification:\nFind out who won, if anyone, in a game of tic-tac-toe.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 258,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 328,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 31,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 338,
              "line": 19,
              "column": 1
            }
          },
          "id": "QlG-HfaNtkfB3z204vZ9u"
        },
        {
          "text": "\nsub tictactoe-masak (**@b) {\n    my @lines = [0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6];\n    for @lines {\n        if ([==] (my @l = slicel(@b, $_))) && all @l {\n            say \"Someone won: @l[0]\"\n        }\n    }\n}\n\nsub slicel(@a, @s) {\n    map { @a[$_ div 3][$_ % 3] }, @s\n}\n\ntictactoe-masak([-1, 0, 0],\n                [ 0,-1, 0],\n                [ 0, 0,-1],\n            );\n\nsub tictactoe-rhebus (*@b) {\n    my @lines = flat (0,3,6 X+ 0,1,2),(0,1,2 X+ 0,3,6),0,4,8,2,4,6;\n    for @lines -> $a,$b,$c {\n        if @b[$a] && [==] @b[$a,$b,$c] {\n            say \"@b[$a] won\"\n        }\n    }\n}\n\ntictactoe-rhebus( 1, 1,-1,\n                 -1,-1, 1,\n                 -1, 0, 0);\n\nsub tictactoe-moritz (*@b) {\n    my @lines = flat (0,3,6 X+ ^3), (^3 X+ 0,3,6), 0,4,8,2,4,6;\n    for @lines -> $a, $b, $c {\n        if @b[$a] && [==] @b[$a,$b,$c] {\n            say \"@b[$a] won\"\n        }\n    }\n}\n\ntictactoe-moritz( 1, 1, 1,\n                  0,-1,-1,\n                 -1,-1, 0);\n\nsub tictactoe-rhebus2 (*@b) {\n    my @lines = flat ^9,(^3 X+ 0,3,6),8,4,(^4 Z+ ^4);\n    say ~@lines;\n    for @lines -> $a, $b, $c {\n        if @b[$a] && [==] @b[$a,$b,$c] {\n            say \"@b[$a] won\"\n        }\n    }\n}\n\ntictactoe-rhebus2( 1, 1, 1,\n                   0,-1,-1,\n                  -1,-1, 0);\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 338,
              "line": 19,
              "column": 1
            },
            "end": {
              "offset": 1678,
              "line": 79,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Yahtzee\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/games/yahtzee.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "RW0Z8OKbeE6DFaEyBobSU",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env perl6\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 31,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Yahtzee\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Yahtzee\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 43,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 58,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 43,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 58,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "bB3W34D1rrDHd0bX5gDai"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Romano\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Romano\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 59,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 80,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 59,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 80,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "9b3LzCcZ9lzba7hd3aZ35"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Simulate rolling dice for the game of\nL<Yahtzee|http://en.wikipedia.org/wiki/Yahtzee>.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Simulate rolling dice for the game of\n"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "Yahtzee"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": "http://en.wikipedia.org/wiki/Yahtzee"
                },
                {
                  "type": "text",
                  "value": ".\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 81,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 168,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 31,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 178,
              "line": 15,
              "column": 1
            }
          },
          "id": "MnluPTluDB4VcGL1ak-b2"
        },
        {
          "text": "\nsub roll-dice { (1..6).roll($^rolls) };\n\nsub round {\n    my @roll = roll-dice(5);\n    my $rolls = 1;\n    repeat {\n        say \"Dice: { @roll }\";\n        my @dice = prompt(\"Which dice do you want to roll again (1-5)? \").split(/\\s+/);\n        if @dice[0] eq \"\" {\n            $rolls = 3;\n        }\n        else {\n            @roll[map { $^index - 1 }, @dice] = roll-dice(@dice.elems);\n            $rolls++;\n        }\n\n    } until $rolls == 3;\n    say \"Which box?\";\n    map { say $^a.key ~ \".\\t\" ~ $^a.value }, (1 => 'Aces'), (2 => 'Twos');\n    return @roll;\n}\n\nmy @round = round;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 178,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 796,
              "line": 41,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Brainfuck Interpreter\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/interpreters/brainfuck.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "h7ozBx3jgNyVJLPy75JrE",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Brainfuck Interpreter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Brainfuck Interpreter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 50,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 50,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "Y4Acf0LbAEBUuWx7uIr-T"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Daniel Carrera\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Daniel Carrera\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 51,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 74,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 51,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 74,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "NdCnRd0PLDc7_kKlh-tqb"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Inspired by C<Acme::Brainfuck>.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Inspired by "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "Acme::Brainfuck"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": ".\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 75,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 107,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "USAGE\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "USAGE\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 108,
                      "line": 11,
                      "column": 1
                    },
                    "end": {
                      "offset": 121,
                      "line": 12,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 108,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 121,
                  "line": 12,
                  "column": 1
                }
              },
              "level": "1",
              "id": "USAGE"
            },
            {
              "type": "blankline"
            },
            {
              "text": "perl6 brainfuck.p6.pl myprog.bf\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "perl6 brainfuck.p6.pl myprog.bf\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 122,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 158,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Below is \"Hello world\" in Brainfuck:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Below is \"Hello world\" in Brainfuck:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 159,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 196,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "block",
              "content": [
                {
                  "type": "verbatim",
                  "value": "++++++++++    initializes cell zero to 10\n[\n   >+++++++>++++++++++>+++>+<<<<-\n]             loop sets the next four cells to 70/100/30/10\n>++.          print   'H'\n>+.           print   'e'\n+++++++.              'l'\n.                     'l'\n+++.                  'o'\n>++.                  space\n<<+++++++++++++++.    'W'\n>.                    'o'\n+++.                  'r'\n------.               'l'\n--------.             'd'\n>+.                   '!'\n>.                    newline\n"
                }
              ],
              "name": "code",
              "margin": "",
              "text": "=begin code\n++++++++++    initializes cell zero to 10\n[\n   >+++++++>++++++++++>+++>+<<<<-\n]             loop sets the next four cells to 70/100/30/10\n>++.          print   'H'\n>+.           print   'e'\n+++++++.              'l'\n.                     'l'\n+++.                  'o'\n>++.                  space\n<<+++++++++++++++.    'W'\n>.                    'o'\n+++.                  'r'\n------.               'l'\n--------.             'd'\n>+.                   '!'\n>.                    newline\n=end code\n",
              "config": [],
              "location": {
                "start": {
                  "offset": 197,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 701,
                  "line": 36,
                  "column": 1
                }
              },
              "id": "oLBiUZyL8O4IkZAy9n6AZ"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 711,
              "line": 38,
              "column": 1
            }
          },
          "id": "TgTHTx5X-xmnisoiyteVZ"
        },
        {
          "text": "\nuse MONKEY-SEE-NO-EVAL;  # we need to parse user input\n\nmy $hello-bf = \"\n++++++++++    initializes cell zero to 10\n[\n   >+++++++>++++++++++>+++>+<<<<-\n]             loop sets the next four cells to 70/100/30/10\n>++.          print   'H'\n>+.           print   'e'\n+++++++.              'l'\n.                     'l'\n+++.                  'o'\n>++.                  space\n<<+++++++++++++++.    'W'\n>.                    'o'\n+++.                  'r'\n------.               'l'\n--------.             'd'\n>+.                   '!'\n>.                    newline\n\";\n\nsub MAIN($input = \"\") {\n    # Read the program.\n    my $program = $input eq \"\" ?? $hello-bf !! $input.IO.slurp;\n\n    # Compile to Perl 6.\n    $program .= subst(/ <-[+\\-<>,.\\[\\]]> /, '', :g);\n    $program .= subst(/(\\++)/, { 'P += ' ~ $0.chars ~ \";\" }, :g);\n    $program .= subst(/(\\-+)/, { 'P -= ' ~ $0.chars ~ \";\" }, :g);\n    $program .= subst(/(\\>+)/, { '$ptr += ' ~ $0.chars ~ \";\" }, :g);\n    $program .= subst(/(\\<+)/, { '$ptr -= ' ~ $0.chars ~ \";\" }, :g);\n    $program .= subst(/\\./, \"print chr P;\", :g);\n    $program .= subst(/\\,/, \"P = ord getc;\", :g);\n    $program .= subst(/\\[/, 'while (P) {', :g);\n    $program .= subst(/\\]/, '};', :g);\n    $program .= subst(/P/, '@P[$ptr]', :g);\n    $program  = 'my @P = (); my $ptr = 0;' ~ $program;\n\n    # Run\n    EVAL $program;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 711,
              "line": 38,
              "column": 1
            },
            "end": {
              "offset": 2089,
              "line": 83,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Simple Infix Arithmetic Calculator\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/interpreters/calc.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "PjsxK_w6PW9pBbawTDuWb",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Simple Infix Arithmetic Calculator\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Simple Infix Arithmetic Calculator\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 63,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 63,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "meBEpHtDaNb2Hkcqvx6Ad"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Yichun Zhang\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Yichun Zhang\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 64,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 64,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "S5L8TGzuIThzVusOymSR9"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Operators supported: +, -, *, /, and ^.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Operators supported: +, -, *, /, and ^.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 86,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 126,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Usage:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Usage:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 127,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 134,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "block",
              "content": [
                {
                  "type": "verbatim",
                  "value": "\n    ./calc.p6 '(3-(2-1))*8^2/4'\n\n    ./calc.p6 < expression.txt\n\n"
                }
              ],
              "name": "code",
              "margin": "",
              "text": "=begin code\n\n    ./calc.p6 '(3-(2-1))*8^2/4'\n\n    ./calc.p6 < expression.txt\n\n=end code\n",
              "config": [],
              "location": {
                "start": {
                  "offset": 135,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 223,
                  "line": 20,
                  "column": 1
                }
              },
              "id": "Jr6b8M0ACKaocbvipunXl"
            },
            {
              "type": "blankline"
            },
            {
              "text": "For benchmark results as compared to equivalent calculators\nimplemented atop Perl 5's Parse::RecDescent and\nRegexp::Grammars, please check out the following page for details:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For benchmark results as compared to equivalent calculators\nimplemented atop Perl 5's Parse::RecDescent and\nRegexp::Grammars, please check out the following page for details:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 224,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 399,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://gist.github.com/agentzh/c5108a959309f015c4f6>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://gist.github.com/agentzh/c5108a959309f015c4f6"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 400,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 456,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "FIXME: error reporting on invalid inputs still needs love.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "FIXME: error reporting on invalid inputs still needs love.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 457,
                  "line": 27,
                  "column": 1
                },
                "end": {
                  "offset": 516,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Contributed by Yichun Zhang, inspired by the calc demo in bison's user manual.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Contributed by Yichun Zhang, inspired by the calc demo in bison's user manual.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 517,
                  "line": 29,
                  "column": 1
                },
                "end": {
                  "offset": 596,
                  "line": 30,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 606,
              "line": 32,
              "column": 1
            }
          },
          "id": "3uPKOjligC43Ngm7g0-xn"
        },
        {
          "text": "\nmy grammar Arith {\n    rule TOP {\n        | <.ws> <expr> { make $<expr>.made }\n        | { self.panic(\"Bad expression\") }\n    }\n\n    rule expr {\n        | <term> + % <add-op>   { self.do_calc($/, $<term>, $<add-op>) }\n        | { self.panic(\"Bad expression\") }\n    }\n\n    token add-op {\n        | < + - >\n    }\n\n    rule term {\n        | <factor> + % <mul-op>  { make self.do_calc($/, $<factor>, $<mul-op>) }\n        | { self.panic($/, \"Bad term\") }\n    }\n\n    token mul-op {\n        | < * / >\n    }\n\n    rule factor {\n        | <atom> + % '^'\n            {\n                make [**] map { $_.made }, @<atom>;\n            }\n        | { self.panic($/, \"Bad factor\") }\n    }\n\n    rule atom {\n        | <number> { make +$<number> }\n        | '(' ~ ')' <expr> { make $<expr>.made }\n        | { self.panic($/, \"Bad atom\") }\n    }\n\n    rule number {\n        <.sign> ? <.pos-num>\n        | { self.panic($/, \"Bad number\") }\n    }\n\n    token sign { < + - > }\n    token pos-num {\n        | <.digit>+ [ \\. <digit>+ ]?\n        | \\. <.digit>+\n        | { self.panic($/, \"Bad number\") }\n    }\n\n    method do_calc($/, $operands, $operators) {\n        my $res = $operands[0].made;\n        my $n = $operands.elems;\n        loop (my $i = 1; $i < $n; $i++) {\n            my $op = $operators[$i - 1];\n            my $num = $operands[$i].made;\n\n            given $op {\n                when '+' { $res += $num; }\n                when '-' { $res -= $num; }\n                when '*' { $res *= $num; }\n                default {  # when '/'\n                    $res /= $num;\n                }\n            }\n        }\n        make $res;\n    }\n\n    method panic($/, $msg) {\n        my $c = $/.CURSOR;\n        my $pos := $c.pos;\n        die \"$msg found at pos $pos\";\n    }\n}\n\nsub MAIN($input = (@*ARGS[0] // slurp)) {\n    try Arith.parse($input);\n    if $! {\n        say \"Parse failed: \", $!.message;\n\n    }\n    elsif $/ {\n        say $();\n\n    }\n    else {\n        say \"Parse failed.\";\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 606,
              "line": 32,
              "column": 1
            },
            "end": {
              "offset": 2613,
              "line": 125,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Simple Lisp Interpreter\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/interpreters/lisp.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Pzc_soGTNJCa_B05-0x32",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Simple Lisp Interpreter\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Simple Lisp Interpreter\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 52,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 52,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "Mitd9nbMRaIC0kb39AiT6"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Andrei Osipov\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Andrei Osipov\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 53,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 53,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "TXipPzrYOQP6IV2SbIRW0"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Inspired by L<http://www.norvig.com/lispy.html>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Inspired by "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://www.norvig.com/lispy.html"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 76,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 124,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 134,
              "line": 12,
              "column": 1
            }
          },
          "id": "AwQuXPXEetXGIP4FUvdk7"
        },
        {
          "text": "\nclass Symbol {\n    has $.name;\n\n    method CALL-ME($x) {\n        Symbol.new(name => $x);\n    }\n\n    method gist { \"#<symbol:{$.name}>\" }\n    method Str  { $.name }\n}\n\nclass Literal {\n    has $.value;\n    method CALL-ME($x) {\n        Literal.new(value => $x)\n    }\n\n    method gist { '\"' ~ $.value ~ '\"' }\n    method Str  {     ~ $.value       }\n}\n\ngrammar Lisp::Grammar  {\n    rule TOP {\n       ^^ <statement>+ $$\n    }\n\n    rule statement {\n        [ <sexp> |  <atom> ]\n    }\n\n    proto token bool { * }\n    token bool:sym<true>    {  '#t'  }\n    token bool:sym<false>   {  '#f'  }\n\n    proto token number { * }\n    token number:sym<integer> { <[-+]>?   \\d+            }\n    token number:sym<float>   { <[-+]>? [ \\d+ ]? '.' \\d+ }\n\n    # TODO more number types\n\n    proto token atom { * }\n\n    token atom:sym<bool>   { <bool>   }\n    token atom:sym<number> { <number> }\n    token atom:sym<string> { <string> }\n    token atom:sym<quote>  { <quote>  }\n    token atom:sym<symbol> { <symbol> }\n\n    token quote {\n        \\c[APOSTROPHE] <statement>\n    }\n    token symbol {\n        <-[\\c[APOSTROPHE]()\\s]>+\n    }\n    rule sexp {\n        '('  ~ ')' <statement>*\n    }\n    token string {\n        \\c[QUOTATION MARK] ~ \\c[QUOTATION MARK]\n        [ <str> | \\\\ <str=.str_escape> ]*\n    }\n    token str {\n        <-[\\c[QUOTATION MARK]\\\\\\t\\n]>+\n    }\n\n    token str_escape {\n        <[\\c[QUOTATION MARK]\\\\/bfnrt]>\n    }\n}\n\nclass List::Actons {\n    method TOP($/) {\n        make $<statement>».made\n    }\n\n    method statement($/) {\n        make $/.caps».values.flat».made[0]\n    }\n\n    method bool:sym<true>($/)  { make Symbol(~$/) }\n    method bool:sym<false>($/) { make Symbol(~$/) }\n\n    method number:sym<integer>($/) { make $/.Int }\n    method number:sym<float>($/) { make $/.Rat }\n\n    method atom:sym<bool>($/)   { make $<bool>.made   }\n    method atom:sym<number>($/) { make $<number>.made }\n    method atom:sym<string>($/) { make $<string>.made }\n    method atom:sym<quote>($/)  { make $<quote>.made  }\n    method atom:sym<symbol>($/) { make Symbol($<symbol>.made) }\n\n    method atom($/) {\n        make $/.caps».values.flat».made[0];\n    }\n    method quote($/) {\n        make [ Symbol('quote'), $<statement>.made.Array ];\n    }\n\n    method symbol($/) {  make ~$/ }\n\n    method sexp($/)    {\n        make $/.caps».values.flat».made.Array;\n    }\n\n    method string($/) {\n        my $str =  +@$<str> == 1\n        ?? $<str>[0].made\n        !! $<str>».made.join ;\n\n        make Literal($str);\n    }\n\n    method str($/) { make $/.Str }\n\n    method str_escape($/) { make $/.Str }\n}\n\n\nsub parse-sexp(Str $str) {\n    state $a = List::Actons.new();\n    my $parse = Lisp::Grammar.parse($str,  :actions($a));\n\n    return fail \"syntax error\" unless $parse;\n\n    return $parse.ast[0];\n}\n\n\nclass Func {\n    has Callable $.code;\n    has Str      $.desc;\n    method eval(@a) { $.code.(|@a)   }\n    method gist     { \"#<{$.desc}>\" }\n}\n\nclass Env {\n    has       %.scope is rw;\n    has  Env  $.outer;\n\n    method resolve($key) is rw {\n\n        if %.scope{$key}:exists {\n             %.scope{$key}\n        }\n        else {\n            fail \"unbound symbol '$key'\" unless $.outer;\n             $.outer.resolve($key);\n        }\n    }\n    method merge(*@env) {\n        %.scope = %.scope, %(@env)\n    }\n    multi method evaluate-tokens(Int $x) {\n        $x\n    }\n    multi method evaluate-tokens(Rat $x) {\n        $x\n    }\n    multi method evaluate-tokens(Symbol $x) {\n        self.resolve($x)\n    }\n    multi method evaluate-tokens(Positional $x) {\n        my @x = @($x);\n        fail \"Syntax error\" if +@x == 0;\n        my $verb = @x.shift;\n        given $verb {\n            when 'quote'   {\n                fail \"syntax error\" if +@x > 1;\n                @x[0];\n            }\n            when 'if'      {\n                my ($test,\n                    $conseq,\n                    $alt) = @x;\n\n                self.evaluate-tokens(\n                    self.evaluate-tokens($test)\n                    ?? $conseq\n                    !! $alt\n                )\n            }\n            when 'set!'    {\n                my ($var, $exp) = @x;\n                self.resolve($var) = self.evaluate-tokens($exp);\n                #return $var;\n\n            }\n            when 'eval' {\n                my ($quoted-sexp) = @x;\n                self.evaluate-tokens($quoted-sexp[1]);\n            }\n            when 'define'  {\n                my ($var, $exp) = @x;\n                if $var ~~ Positional {\n                    $.scope{$var[0]} =\n                    self.evaluate-tokens([ Symbol('λ'), [ $var[1..*] ], $exp]);\n                }\n                else { $.scope{$var}  =self.evaluate-tokens($exp); }\n            }\n            when 'lambda' | 'λ' {\n                my ($vars, $exp) = @x;\n                Func.new( code => -> *@argv {\n                    my %x = flat ($vars.list Z @argv);\n                    my $new-env = Env.new(scope => %x , outer => self);\n                    $new-env.evaluate-tokens($exp)\n                },\n                desc => \"closure:arity:{$vars.elems}\" );\n            }\n            when 'begin'   {\n                my $val;\n                fail \"syntax error\" unless +@x;\n                for @x -> $exp {\n                    $val = self.evaluate-tokens($exp);\n                }\n                $val;\n            }\n            default {\n                my $func = self.evaluate-tokens($verb);\n                my @args = map {\n                    self.evaluate-tokens($^x)\n                }, @x;\n                fail \"$verb is not a function\" unless $func ~~ Func;\n                $func.eval(@args)\n            }\n\n        }\n\n    }\n    multi method evaluate-tokens(Literal $x) {\n        $x\n    }\n    multi method evaluate-tokens(Any $x) {\n        fail $x.^name ~ \" is NYI\"\n    }\n    multi method add-builtin(*@x, *%x) {\n        for |@x,|%x -> $p {\n            $.scope{$p.key} = Func.new:\n                            code => $p.value,\n                            desc => \"builtin:{$p.key}\"\n        }\n    }\n    method add-constant(*@x, *%x) {\n        for |@x,|%x -> $p {\n            $.scope{$p.key} = $p.value\n        }\n    }\n}\n\nour %*LISP-GLOBAL;\n\nour $*LISP-ENV = Env.new(scope => %*LISP-GLOBAL);\n\n\n$*LISP-ENV.add-constant:\n    '#t' => True,\n    '#f' => False\n;\n\n$*LISP-ENV.add-builtin:\n     '>'       =>-> *@a { [>] @a },\n     '<'       =>-> *@a { [<] @a },\n     '>='      =>-> *@a { [>=] @a },\n     '<='      =>-> *@a { [<=] @a },\n     '='       =>-> *@a { [==] @a },\n;\n\n# ariphmetic ops\n$*LISP-ENV.add-builtin:\n     '+'       =>-> *@a { [+] @a },\n     '-'       =>-> *@a { +@a > 1 ?? [-] @a !! - @a[0] },\n     '*'       =>-> *@a { [*] @a },\n     '/'       =>-> *@a { [/] @a },\n     abs       =>   &abs,\n;\n\n# lisp ops\n$*LISP-ENV.add-builtin:\n     list    =>-> *@a { @a.item  },\n     length  =>->  $a { $a.elems  },\n     cons    =>-> *@a { @a.item   },\n     car     =>->  @a { @a[0]     },\n     cdr     =>->  @a { @a[1...*] },\n     append  =>-> *@a {\n         my @x =  @a[0][0..*];\n         @x.push: @a[1];\n         @x;\n     },\n     'list?'   =>-> *@a  { so @a[0] ~~ Positional },\n     'null?'   =>-> *@a  { fail \"too many arguments\" unless +@a == 1 ;  @a[0].elems == 0 },\n;\n\n$*LISP-ENV.add-builtin:\n  not     => -> $a { not $a },\n  so      => -> $a { so  $a },\n  'equal?'  => -> *@a { [~~] @a },\n  'symbol?' => -> *@a {\n    fail \"NYI\"\n  },\n  display => -> *@a {\n    say join ', ', @a.map(*.Str);\n  },\n  exit    => -> $a { exit $a };\n\n\nsub eval(Str $sexp) {\n    $*LISP-ENV.evaluate-tokens(parse-sexp $sexp)\n}\n\nsub balanced($s) {\n    my $l = 0;\n    for $s.comb {\n        when \")\" {\n            --$l;\n            #return False if $l < 0;\n        }\n        when \"(\" {\n            ++$l;\n        }\n    }\n    $l ;\n}\n\nmulti lispify(Positional $x) {\n    '\\'(' ~ @$x.map(*.&lispify).join(' ') ~ ')'\n}\nmulti lispify(Bool $x where so * )  { '#t' }\nmulti lispify(Bool $x where not so * )  { '#f' }\nmulti lispify(Any $x) { $x.gist }\n\nsub REPL {\n    my Str $exp = '';\n    my Int $balance = 0;\n    loop {\n        try {\n            my $p =  prompt(\n                $exp eq ''\n                    ?? '> '\n                    !! ('--' xx $balance) ~ '> '\n            );\n            exit unless defined $p;\n            $exp ~= \"$p \";\n            $exp ~~ s:i/ ';' ** 1..* .*? $$//;\n            $balance = balanced $exp;\n            fail \"unexpected bracket\" if $balance < 0;\n            next if $balance != 0 || $exp !~~ /\\S+/;\n\n            my $result = eval $exp;\n\n            say \";; \" ~ $result.&lispify;\n\n            CATCH {\n                default {\n                    say \"error: $_\";\n                }\n            }\n        }\n        $exp = '';\n    }\n}\n\nsub MAIN(Bool :$test     = False,\n         Bool :$debug    = False,\n         Str  :$file            ,\n         Str  :$command         ,\n         ) {\n    if $command {\n        return eval $command\n    }\n\n    if $file {\n        die \"Can't open '$file'\" unless $file.IO.f;\n        my $exp;\n        for $file.IO.lines {\n            my $line = $_;\n            $line ~~ s:i/ ';' * 1..*  .*? $$ //;\n            $exp ~= $line;\n            if balanced($exp) == 0 {\n                eval $exp;\n                $exp = '';\n            }\n        }\n        return;\n    }\n\n    return TEST  if $test;\n    return DEBUG if $debug;\n\n    REPL\n}\n\nsub DEBUG {\n    ...\n}\n\nsub TEST {\n    use Test;\n\n    ok so parse-sexp(\"1\"), \"number\";\n\n    ok so parse-sexp(\"#t\"), \"true\";\n    ok so parse-sexp(\"#f\"), \"false\";\n    ok so parse-sexp(\"(- 1 2 3)\"), \"simple s-exp\";\n    ok so parse-sexp(\"(+ 1 2 3 (* 1 2 3))\"), \"nested s-exps\";\n\n    is-deeply parse-sexp('1'), 1, \"parse atom (numeric)\";\n\n    is-deeply parse-sexp('#f'), Symbol('#f'),  \"parse atom (boolean)\";\n    is-deeply parse-sexp('var'), Symbol('var'),  \"parse atom (variable)\";\n\n    ok parse-sexp(\"(1 2 3 4 5)\") == [\"1\", \"2\",\"3\",\"4\",\"5\"], \"sexp\";\n    ok parse-sexp(\"(1 2 3 (4 5 6))\")  == [\"1\", \"2\", \"3\", [\"4\", \"5\", \"6\"]], \"nested sexps\";\n\n    {\n        my $y =  [Symbol('+'), 1, 2, 3];\n        is-deeply parse-sexp('(+ 1 2 3)'), $y , \"s-exp\";\n        is-deeply parse-sexp('   (+    1   2    3 )'), $y, \"spaces are irrelevant\";\n    }\n\n    {\n        my $y = [Symbol('foo'), 1, [Symbol('quote'), [1, 2, 3]]];\n        is-deeply parse-sexp(\"(foo 1 '(1 2 3))\"),\n        $y,\n        \"quote by symbol\";\n        is-deeply parse-sexp(\"(foo 1 (quote (1 2 3)))\"), $y, \"quote by word\";\n    }\n    #\n\n    ok !eval(\"(not #t)\"), \"booleans\";\n    ok eval(\"(not #f)\") , \"booleans\";\n    ok !eval(\"(so #f)\") , \"booleans\";\n    ok  eval(\"(so #t)\") , \"booleans\";\n\n    ok eval(\"(+ 1 2 3)\") == 6, 'sum';\n    ok eval(\"(* 1 2 5)\") == 10, 'product';\n    ok eval(\"(cons 1 2)\") == ['1','2'], 'cons';\n    ok eval(\"(append (cons 1 2) 1)\") == [<1 2 1>], 'append';\n    ok eval(\"(list 1 2 3 4)\") == [1,2,3,4], \"list\";\n    ok eval(\"(car (list 1 2 3 4))\") == 1 ,\"car\";\n    ok eval(\"(cdr (list 1 2 3 4))\") == [2,3,4] ,\"cdr\";\n    ok eval(\"(list? (list 1 2 3 4))\") ,\"list?\";\n    ok !eval(\"(list? #f)\") ,\"list?\";\n    ok eval(\"(null? (list))\") ,\"null? on empty list\";\n    ok eval(\"(null? '())\") , 'null? on `() ';\n    ok !eval(\"(null? '(1 2 3))\") , 'null?';\n    ok eval(\"(equal? 1 1)\") ,\"equal?\";\n    ok !eval(\"(equal? 1 0)\") ,\"equal?\";\n\n    {\n        ok eval(\"(define xxx 1)\") == 1 ,\"define\";\n         eval(\"(set! xxx 2)\");\n        ok eval(\"xxx\") == 2, 'set!';\n    }\n\n    ok eval(\"(define xs (list 1 2 3 4))\") == [[1,2,3,4]] ,\"define\";\n    ok eval(\"(define sqr (lambda (x) (* x x)))\") , 'define'; ;\n    is eval(\"(length xs)\"), 4, 'length';\n    is eval(\"((lambda (x) (* x x)) 13)\"), 169, 'lambda';\n    is eval(\"(sqr 10)\"), 100, 'lambda';\n    ok eval(\"(define plus (lambda (x y) (+ x y)))\") && eval(\"(plus 1 2)\") == 3, \"lambda\";\n    ok eval(\"(if (> 1 2) 3 4)\") == 4, 'if';\n    ok eval(\"(if (< 1 2) 3 4)\") == 3, 'if';\n    ok eval(\"(abs 3)\") == 3, 'abs';\n    ok eval(\"(abs (- 3))\") == 3, 'abs';\n\n    ok eval(\"(begin 1 2 3 4 5)\") == 5, 'begin';\n    ok eval(\"(quote (1 2 3 4 5))\") == [<1 2 3 4 5>], 'quote';\n    ok eval(\"(quote (1))\") == ['1',], 'quote';\n\n    ok eval(\"(eval (quote 1))\") == 1 , 'eval';\n    ok eval(\"(eval '(+ 1 2 3))\") == 6 , 'eval';\n    ok (\n        eval \"(list 1 (list 2 (list 3 (list 3 5))))\" ) ==\n                [[\"1\", [\"2\", [\"3\", [\"3\", \"5\"]]]]], 'nested list';\n    ok eval(qq{ (define fib (lambda (n)  (if (< n 2)  1  (+ (fib (- n 1)) (fib (- n 2)))))) })  &&\n    eval(\"(fib 10)\") == 89, 'fib(10)';\n    eval '\n         (define (sqrt x)\n           (begin\n            (define (square x) (* x x))\n            (define (average x y) (/ (+ x y) 2))\n            (define (good-enough? guess x)\n              (< (abs (- (square guess) x)) 0.001))\n            (define (improve guess)\n              (average guess (/ x guess)))\n            (define (sqrt-iter guess)\n              (if (good-enough? guess)\n                  guess\n                (sqrt-iter (improve guess))))\n            (sqrt-iter 1.0)))\n    ';\n    ok eval(\"(sqrt 4)\").Int == 2, 'sqrt example';\n\n    done-testing;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 134,
              "line": 12,
              "column": 1
            },
            "end": {
              "offset": 13087,
              "line": 509,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Reverse Polish Notation Calculator\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/interpreters/RPN.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Zxakf9oCvPTEhGtmzHlNb",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Reverse Polish Notation Calculator\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Reverse Polish Notation Calculator\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 63,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 63,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "LyrbzIJcnfyjZRIdZ8Dbl"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Daniel Carrera\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Daniel Carrera\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 64,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 87,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 64,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 87,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "4C_LkLO9S-C4meaJe2azW"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "USAGE\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "USAGE\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 88,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 101,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 88,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 101,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "USAGE"
            },
            {
              "type": "blankline"
            },
            {
              "text": "perl6 RPN.pl  \"5 4 + 3 / 5 3 - *\"\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "perl6 RPN.pl  \"5 4 + 3 / 5 3 - *\"\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 102,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 140,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 150,
              "line": 14,
              "column": 1
            }
          },
          "id": "StzVGEwXtKcrWZacnA2Ei"
        },
        {
          "text": "\nmy token Op { '+' || '-' || '*' || '/' };\nmy token Value { \\d+[\\.\\d+]? };\nmy token  Item { <Value> || <Op> };\nmy token  Expr { [<Item> <ws>]+ };\n\nsub MAIN(Str $expression = \"5 4 + 3 / 5 3 - *\") {\n    calculate($expression);\n}\n\nsub calculate(Str $str) {\n    if $str ~~ /^ <Expr> $/ {\n        my @stack;\n\n        for $/<Expr><Item>.list -> $item {\n            if $item<Value> {\n                @stack.push($item<Value>);\n            }\n            else {\n                my $v1 = @stack.pop;\n                my $v0 = @stack.pop;\n                @stack.push(do_op($v0,$v1,$item<Op>));\n            }\n        }\n        say @stack[0];\n    }\n    else {\n        say \"This is not an RPN expression.\";\n    }\n}\n\nsub do_op($lhs, $rhs, $op) {\n    given $op {\n        when '*' { $lhs * $rhs }\n        when '+' { $lhs + $rhs }\n        when '-' { $lhs - $rhs }\n        when '/' { $lhs / $rhs }\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 150,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 1076,
              "line": 55,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Unique module names with the Fletcher-16 hash\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/module-management/Fletcher.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "eAyuXBZsuVPt-GmwUtq_G",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Unique module names with the Fletcher-16 hash\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Unique module names with the Fletcher-16 hash\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 74,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 74,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "8jXsO9AUaNJ6suP95jrVk"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Daniel Carrera\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Daniel Carrera\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 75,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 98,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 75,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 98,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "9v7OLbkSPuWkgv1Z7XYC9"
            },
            {
              "type": "blankline"
            },
            {
              "text": "A sketch program to compute unique file names for Perl modules based\non the Fletcher-16 hash.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A sketch program to compute unique file names for Perl modules based\non the Fletcher-16 hash.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 99,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 193,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "License: Public Domain\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "License: Public Domain\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 194,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 217,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Example: Foo::Bar-auth:92de-ver:1.2.0--0\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Example: Foo::Bar-auth:92de-ver:1.2.0--0\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 218,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 259,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Explanation:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Explanation:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 260,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 273,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The module name (Foo::Bar) is URL-encoded. After that, we add all metadata\nsorted by key. Version numbers are left intact. Other metadata is hashed\nwith Fletcher-16.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The module name (Foo::Bar) is URL-encoded. After that, we add all metadata\nsorted by key. Version numbers are left intact. Other metadata is hashed\nwith Fletcher-16.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 274,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 440,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Lastly, a counter is added at the end. If two different modules get the\nexact same name (extremely unlikely) we use a counter to distinguish them.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Lastly, a counter is added at the end. If two different modules get the\nexact same name (extremely unlikely) we use a counter to distinguish them.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 441,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 588,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 598,
              "line": 26,
              "column": 1
            }
          },
          "id": "1PrMwvYzA1Z0LJkegc4HO"
        },
        {
          "text": "\nmy @modules = (\n    {name => \"Foo::Bar\", meta => {auth=>'mailto:dave@example.com', ver=>'1.2.0'}},\n    {name => \"Foo::動\", meta => {auth=>'mailto:chang@example.com', ver=>'2.1.3'}}\n);\n\nsay filename(@modules[0]<name>,@modules[0]<meta>);\nsay filename(@modules[1]<name>,@modules[1]<meta>);\n\nsub filename($module,%meta) {\n    my $filename = strencode($module);\n    for %meta.sort {\n        my $v = .value ~~ m/[\\D & <-[.]>]/ ?? fletcher16(.value) !! .value;\n        $filename ~= \"-\" ~ .key ~ \":$v\";\n    }\n    return $filename ~ \"--0\";\n}\n\nsub strencode($str) {\n    return $str.subst(/(<-alpha -[:]>)/,{ charencode($0) },:g);\n}\n\nsub charencode($char) {\n    my ($url,$hex) = ('',$char.fmt(\"%02x\"));\n\n    while $hex.chars {\n        $url ~= '%' ~ $hex.substr(0,2);\n        $hex = $hex.substr(2);\n    }\n    return $url;\n}\n\nsub fletcher16($str) {\n    my ($A,$B) = (0,0);\n    for map { .ord }, $str.comb -> $val {\n        if $val > 255 {\n            $A = ($A + $val div 255) % 255;\n            $B = ($B + $A) % 255;\n        }\n        $A = ($A + $val % 255) % 255;\n        $B = ($B + $A) % 255;\n    }\n    return ($A*256 + $B).fmt(\"%04x\");\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 598,
              "line": 26,
              "column": 1
            },
            "end": {
              "offset": 1766,
              "line": 72,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Determine whether an array contains a value\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/other/array-contains-a-value.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "4skKmfEu88T43nFoh63N9",
      "margin": "",
      "name": "root",
      "content": [
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Determine whether an array contains a value\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Determine whether an array contains a value\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 12,
                      "line": 3,
                      "column": 1
                    },
                    "end": {
                      "offset": 63,
                      "line": 4,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 12,
                  "line": 3,
                  "column": 1
                },
                "end": {
                  "offset": 63,
                  "line": 4,
                  "column": 1
                }
              },
              "id": "KvdPE1NjC6uXHK0R3q2rC"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Fyodor Sizov\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Fyodor Sizov\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 64,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 64,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "FmOWISu_xvXcx1G5f54gF"
            },
            {
              "type": "blankline"
            },
            {
              "text": "DESCRIPTION\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "DESCRIPTION\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 86,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 98,
                  "line": 8,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "What's interesting here?\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "What's interesting here?\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 99,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 131,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 99,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 131,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "What's-interesting-here"
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Use of \"eq\" operator and any(@array)\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Use of \"eq\" operator and any(@array)\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 132,
                          "line": 11,
                          "column": 1
                        },
                        "end": {
                          "offset": 175,
                          "line": 12,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 132,
                      "line": 11,
                      "column": 1
                    },
                    "end": {
                      "offset": 175,
                      "line": 12,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "5eyJqDPxnkWVsPFf0B5ee"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "eq any(@arr) can be used both for strings and integers\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "eq any(@arr) can be used both for strings and integers\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 175,
                          "line": 12,
                          "column": 1
                        },
                        "end": {
                          "offset": 236,
                          "line": 13,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 175,
                      "line": 12,
                      "column": 1
                    },
                    "end": {
                      "offset": 236,
                      "line": 13,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "Bq5bvLzJeYZ5y7M9i8ox0"
                },
                {
                  "type": "blankline"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 247,
              "line": 16,
              "column": 1
            }
          },
          "id": "iAlpbg_crMme89TuqglpH"
        },
        {
          "text": "\nuse v6;\n\nmy @arr = <the quick brown fox 5 2 9>;\nsay 'fox' eq any(@arr) ?? 'YES' !! 'NO'; # YES\nsay 'dog' eq any(@arr) ?? 'YES' !! 'NO'; # NO\nsay 3 eq any(@arr) ?? 'YES' !! 'NO'; # NO\nsay 2 eq any(@arr) ?? 'YES' !! 'NO'; # YES\n\n# Local Variables:\n# mode: perl6\n# indent-tabs-mode: nil\n# perl6-indent-offset: 4\n# End:\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 247,
              "line": 16,
              "column": 1
            },
            "end": {
              "offset": 603,
              "line": 31,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "99 bottles of beer\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/other/bottles.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "NbS5IqqiWghajAGr7QB8E",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "99 bottles of beer\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "99 bottles of beer\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 47,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 47,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "lDCE6nHpysItz8dH-CTX8"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Gerhard R\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Gerhard R\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 48,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 66,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 48,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 66,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "xx9TlXEKcXBg5YiQX1Fdv"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Print the lyrics to the\nL<99 bottles of beer|http://en.wikipedia.org/wiki/99_Bottles_of_Beer>\nsong.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Print the lyrics to the\n"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "99 bottles of beer"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": "http://en.wikipedia.org/wiki/99_Bottles_of_Beer"
                },
                {
                  "type": "text",
                  "value": "\nsong.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 67,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 167,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 177,
              "line": 14,
              "column": 1
            }
          },
          "id": "LOUysK0IOHoWUfydbiWLT"
        },
        {
          "text": "\nmy @bottles = (flat ((99...2) X~ ' bottles'),\n              '1 bottle',\n              'no more bottles',\n              '99 bottles');\n\nmy @actions = (flat 'Take one down and pass it around' xx 99,\n              'Go to the store and buy some more');\n\nfor flat @bottles Z @actions Z @bottles[1..*] {\n    say \"$^a of beer on the wall, $^a of beer.\n$^b, $^c of beer on the wall.\\n\".tc;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 177,
              "line": 14,
              "column": 1
            },
            "end": {
              "offset": 602,
              "line": 29,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Combinations\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/other/combinations.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "WvFUroK6p0vcXhfFzsenW",
      "margin": "",
      "name": "root",
      "content": [
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Combinations\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Combinations\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 12,
                      "line": 3,
                      "column": 1
                    },
                    "end": {
                      "offset": 32,
                      "line": 4,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 12,
                  "line": 3,
                  "column": 1
                },
                "end": {
                  "offset": 32,
                  "line": 4,
                  "column": 1
                }
              },
              "id": "wNv_bGRS94Th_Wz4Ror16"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Filip Sergot\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Filip Sergot\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 33,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 54,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 33,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 54,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "uZrUFolVZU1MCmRODvBRn"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Prints all the combinations of items from the given array.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Prints all the combinations of items from the given array.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 55,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 114,
                  "line": 8,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "What's interesting here?\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "What's interesting here?\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 115,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 147,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 115,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 147,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "1",
              "id": "What's-interesting-here"
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "multi subroutines\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "multi subroutines\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 148,
                          "line": 11,
                          "column": 1
                        },
                        "end": {
                          "offset": 172,
                          "line": 12,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 148,
                      "line": 11,
                      "column": 1
                    },
                    "end": {
                      "offset": 172,
                      "line": 12,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "HpiBmx58x8UNI5ue-tmNe"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "shortened use of $_ variable\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "shortened use of $_ variable\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 172,
                          "line": 12,
                          "column": 1
                        },
                        "end": {
                          "offset": 207,
                          "line": 13,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 172,
                      "line": 12,
                      "column": 1
                    },
                    "end": {
                      "offset": 207,
                      "line": 13,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "HlUOhK0d1YZKJpLrMjOO4"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "placeholder variables\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "placeholder variables\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 207,
                          "line": 13,
                          "column": 1
                        },
                        "end": {
                          "offset": 235,
                          "line": 14,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 207,
                      "line": 13,
                      "column": 1
                    },
                    "end": {
                      "offset": 235,
                      "line": 14,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "u0YncRv1IA9re2ZO4fJga"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Features used\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Features used\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 236,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 257,
                      "line": 16,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 236,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 257,
                  "line": 16,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Features-used"
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "C<Placeholder variables> - L<https://doc.perl6.org/language/variables>\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Placeholder variables"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": " - "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "https://doc.perl6.org/language/variables"
                            }
                          ],
                          "type": "fcode",
                          "name": "L",
                          "meta": null
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 258,
                          "line": 17,
                          "column": 1
                        },
                        "end": {
                          "offset": 335,
                          "line": 18,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 258,
                      "line": 17,
                      "column": 1
                    },
                    "end": {
                      "offset": 335,
                      "line": 18,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "HnXoxrMbBsVTBlGJKZESC"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 345,
              "line": 20,
              "column": 1
            }
          },
          "id": "H1Qg4qz6gzB3Ft_6Xk7Ur"
        },
        {
          "text": "\nuse v6;\n\nmulti combs(@, 0) { \"\" };\nmulti combs { combs(@^dict, $^n - 1) X~ @dict };\n\n(.say for combs(<a b c>, $_)) for 1..4;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 345,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 511,
              "line": 29,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "",
    "description": "",
    "footer": "",
    "file": "work_examples/categories/other/malware_analysis.raku",
    "sources": [],
    "node": {
      "type": "block",
      "id": "zQeSV77dzmJ1iA0ILTLJ0",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "# configuring the genes and the virus (some virus share genes)\n\nmy token gene {'this is a malware gene'}\nmy rule virusx {<gene>.*}\n\n# reading the sample line by line from a binary file\n\nfor '/script/mysample'.IO.lines -> $line {\n        # If the line contains the gene, print it\n    if $line ~~ &virusx {say \"Genes from virus X were found: \"; say $line; }\n\n}\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 359,
              "line": 13,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "CSS2.1 Grammar\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/parsers/CSSGrammar.pm",
    "sources": [],
    "node": {
      "type": "block",
      "id": "jatr2MjE3JvXoePOOctC4",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "CSS2.1 Grammar\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "CSS2.1 Grammar\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 43,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 43,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "gVl4zeEwGgXUO6hMEO8_M"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "wayland76, David Warring\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "wayland76, David Warring\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 44,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 77,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 44,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 77,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "DDCm7swSq5CtRJLEuGtO1"
            },
            {
              "type": "blankline"
            },
            {
              "text": "This should be doing CSS2.1; hopefully CSS3 when that's ready (but that may\nbe a while).\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "This should be doing CSS2.1; hopefully CSS3 when that's ready (but that may\nbe a while).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 78,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 167,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 177,
              "line": 13,
              "column": 1
            }
          },
          "id": "OT7F1ohNf9Ydjri3JbKCY"
        },
        {
          "text": "\ngrammar CSSGrammar {\n        # builtin: ident (we use cssident), alpha\n\n        token TOP         { ^ <import>* <css>* $ || <.panic: \"CSS parsing failed\"> }\n        token css         { <ruleset> | <media> | <page> }\n        rule ruleset      { <selector> +% ',' '{' ~ '}' <declarations> }\n        rule declarations { <declaration> +%% ';' }\n        rule selector     { <simple_selector> +% <combinator>? }\n        rule simple_selector   { <element_name> [ <hcap> ]* | <hcap>+ }\n        token hcap        { '#' | <class> | '[' ~ ']' <attrib> | <pseudo> }\n        token class       { '.' <cssident> }\n        token element_name { <cssident> | '*' }\n        token attrib      { <cssident> [ [ '=' | <INCLUDES> | <DASHMATCH> ] [ <cssident> | <string> ] ]? }\n        token pseudo      { ':' [ <FUNCTION> ~ ')' <cssident>? | <cssident> ] }\n        token combinator  { '+' | '>' }\n\n        rule declaration  { <property> ':' <expr> <prio>? }\n        token property    { <cssident> }\n        token prio        { <important_sym> }\n        token expr        { <term> +% <operator>? }\n        token cssident    { '-'?<namestart><namechar>* }\n        rule term         { <unary_operator>?\n                [ <percentage> | <length> | <ems> | <exs> | <angle> | <time> | <freq> | <number> ]\n                | <string> | <uri> | <function> | <cssident> | <hexcolor>\n        }\n        token operator    { '/' | ',' }\n        token function    { <FUNCTION> ~ ')' <expr> }\n        token hexcolor    { '#' }\n        token namestart   { <alpha> | _ }\n        token namechar    { \\w | '-' }\n        token unary_operator { '-' | '+' }\n        token number      { \\d+ | \\d* '.' \\d+ }\n        token percentage  {   <number> '%' }\n        token length      {:i <number> [ px | cm | mm | in | pt | pc ] }\n        token ems         {:i <number>? em }\n        token exs         {:i <number>? ex }\n        token angle       {:i <number> [ deg | rad | grad ] }\n        token time        {:i <number> [ ms | s ] }\n        token freq        {:i <number> k?hz }\n        token string      { ('\"' | \\') (<- nl>|\\\\ \\n)*? $0 }\n        token uri         {:i url '(' ~ ')' [ <string> | <url>] }\n        token url         { ( <- [\\( \\) \\' \\\" \\\\]> )* }\n        token FUNCTION    { <cssident> '(' }\n        token INCLUDES    { '~=' }\n        token DASHMATCH   { '|=' }\n\n        token important_sym {:i '!'important }\n\n        rule import       {:i'@import' [<string>|<uri>] <media_list>? ';' }\n\n        rule media        {:i'@media' <media_list> <media_rules> }\n        rule media_list   {<media_type> +%','}\n        rule media_type   { <cssident> }\n        rule media_rules  { '{' ~ '}' <ruleset>* }\n\n        rule page         {:i'@page' [':'<cssident>]? '{' ~ '}' <declarations> }\n\n        # Comments and whitespace.\n        token comment {'<!--' .*? '-->' | '/*' .*? '*/'}\n        token nl {\\xA|\"\\r\"\\xA|\"\\r\"|\"\\f\"}\n        token ws { <!ww> [ nl | \"\\t\" | \" \" | <comment> ]* }\n\n        method panic($e)  {die $e;}\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 177,
              "line": 13,
              "column": 1
            },
            "end": {
              "offset": 3191,
              "line": 80,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Newick tree format\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/parsers/Newick.pm",
    "sources": [],
    "node": {
      "type": "block",
      "id": "2HWoA-Olv7jgjnWyDqJyS",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Newick tree format\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Newick tree format\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 47,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 47,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "OGE18xwcFPe2ce3golfus"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Lucien Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Lucien Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 48,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 48,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "B1H_Rhav7UDDvT-4ZfV-u"
            },
            {
              "type": "blankline"
            },
            {
              "text": "See L<https://en.wikipedia.org/wiki/Newick_format>.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "See "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://en.wikipedia.org/wiki/Newick_format"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": ".\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 72,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 124,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 134,
              "line": 12,
              "column": 1
            }
          },
          "id": "IxcwYXZ_uH_yQX2x2lXgL"
        },
        {
          "text": "\ngrammar Newick {\n    rule TOP { '(' <subtree>** 2..3 % \\, ');' }\n    rule subtree { <species> | '(' <subtree>** 2 % \\, ')' }\n    token species { <.ident>+ }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 134,
              "line": 12,
              "column": 1
            },
            "end": {
              "offset": 334,
              "line": 20,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Simple strings\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/parsers/SimpleStrings.pm",
    "sources": [],
    "node": {
      "type": "block",
      "id": "rbt2siR84rMHx4gnMyQkk",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Simple strings\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Simple strings\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 43,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 43,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "kfOkiw-R78P-tJUPP9drL"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Aaron Sherman\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Aaron Sherman\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 44,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 66,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 44,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 66,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Q8gKRkSSP86gLAj8mdpLb"
            },
            {
              "type": "blankline"
            },
            {
              "text": "A trivial parser that handles quoted strings with backslash-escaped\nquotes and either single or double quotes used to delimit.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A trivial parser that handles quoted strings with backslash-escaped\nquotes and either single or double quotes used to delimit.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 67,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 194,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 204,
              "line": 13,
              "column": 1
            }
          },
          "id": "amqmUETKQSWMkIJkPvXJZ"
        },
        {
          "text": "\ngrammar String::Simple::Grammar {\n    rule TOP {^ <string> $}\n    # Note for now, {} gets around a rakudo binding issue\n    token string { <quote> {} <quotebody($<quote>)> $<quote> }\n    token quote { '\"' | \"'\" }\n    token quotebody($quote) { ( <escaped($quote)> | <!before $quote> . )* }\n    token escaped($quote) { '\\\\' ( $quote | '\\\\' ) }\n}\n\n# The parse-tree builder ultimately returns the string itself.\nclass String::Simple::Actions {\n    method TOP($/) { make $<string>.made }\n    method string($/) { make $<quotebody>.made }\n    method quotebody($/) { make [~] $0.map: {.<escaped>.made or ~$_} }\n    method escaped($/) { make ~$0 }\n}\n\n# vim: sw=4 softtabstop=4 ai expandtab filetype=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 204,
              "line": 13,
              "column": 1
            },
            "end": {
              "offset": 901,
              "line": 32,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Combinations\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/perlmonks/combinations-731808.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Bd12QMTz1eGa8_dSnXvJC",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Combinations\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Combinations\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 41,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 41,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "TimSP0oko8D7eddS6xvEo"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Eric Hodges\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Eric Hodges\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 62,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 62,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "kZdB8Yj78hLs1K0wGFKiD"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Specification:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Specification:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 63,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 78,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "From L<http://www.perlmonks.org/?node_id=731808>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "From "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://www.perlmonks.org/?node_id=731808"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 79,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 128,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Given a list of URL prefixes, and a list of product IDs, make a list\nconsisting of each URL prefix concatenated with each product ID.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Given a list of URL prefixes, and a list of product IDs, make a list\nconsisting of each URL prefix concatenated with each product ID.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 129,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 263,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 273,
              "line": 17,
              "column": 1
            }
          },
          "id": "IX-fk3vbhy-IPnVxV5vGD"
        },
        {
          "text": "\nmy @urls = ('http://www.something.com/blah.aspx?code=',\n            'http://www.somethingelse.com/stuff.aspx?thing=');\n\nmy @ids = <375035304 564564774 346464646>;\n\n# 1. Cross then map\n# We use the cross operator X to make every combination of pairs from @urls\n# and @ids. We then use map to stringify each pair. $^a is a \"placeholder\n# argument\" - in this case, it refers to the only argument to the block.\nmy @combined = (@urls X @ids).map: { ~$^a };\n\n.say for @combined;\n\n\n# 2. cross hyperoperator\n# We use the cross hyperoperator X~\n# This combines each element from list1 with each element from list2 using ~\n#    You can use any infix operator.\n#    Try (1,2,3) X* (1,2,3) to generate a multiplication table.\n\n.say for @urls X~ @ids;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 273,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 1053,
              "line": 41,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "file": "work_examples/categories/perlmonks/README.md",
    "sources": [],
    "node": {
      "type": "block",
      "id": "K6REr7shwPmwTQKFay4_t",
      "margin": "",
      "name": "root",
      "content": [
        {
          "type": "block",
          "id": "bDAERryQb3BMYBZDDarCL",
          "margin": "",
          "level": 1,
          "name": "head",
          "location": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 12,
              "offset": 11
            }
          },
          "content": [
            "Perlmonks"
          ]
        },
        {
          "type": "para",
          "id": "7kwWuHNX61WS7IDfyUdNT",
          "margin": "",
          "location": {
            "start": {
              "line": 3,
              "column": 1,
              "offset": 13
            },
            "end": {
              "line": 3,
              "column": 21,
              "offset": 33
            }
          },
          "text": "text",
          "content": [
            {
              "meta": "http://perlmonks.org",
              "type": "fcode",
              "name": "L",
              "content": [
                "http://perlmonks.org"
              ]
            }
          ]
        },
        {
          "type": "para",
          "id": "FoF94j-923en74TieFHWL",
          "margin": "",
          "location": {
            "start": {
              "line": 5,
              "column": 1,
              "offset": 35
            },
            "end": {
              "line": 5,
              "column": 50,
              "offset": 84
            }
          },
          "text": "text",
          "content": [
            "These are answers to various perlmonks questions."
          ]
        },
        {
          "type": "block",
          "id": "gxTG42J3D4RJjrn6qjHBu",
          "margin": "",
          "level": 2,
          "name": "head",
          "location": {
            "start": {
              "line": 7,
              "column": 1,
              "offset": 86
            },
            "end": {
              "line": 7,
              "column": 15,
              "offset": 100
            }
          },
          "content": [
            "File Naming"
          ]
        },
        {
          "type": "para",
          "id": "LyuJGjybgeESEa2Rohs-C",
          "margin": "",
          "location": {
            "start": {
              "line": 9,
              "column": 1,
              "offset": 102
            },
            "end": {
              "line": 9,
              "column": 48,
              "offset": 149
            }
          },
          "text": "text",
          "content": [
            "Please names files like ",
            {
              "type": "fcode",
              "name": "C",
              "content": [
                "description-nodeid.pl"
              ]
            }
          ]
        },
        {
          "type": "para",
          "id": "mCcrbaLXOfW4vF9mB44LJ",
          "margin": "",
          "location": {
            "start": {
              "line": 11,
              "column": 1,
              "offset": 151
            },
            "end": {
              "line": 12,
              "column": 25,
              "offset": 249
            }
          },
          "text": "text",
          "content": [
            "Replacing description with a description ;) and nodeid with the node that\nthe code is in reply to."
          ]
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Weighted roll\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/perlmonks/weighted-roll-731696.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "QTgHEHaNYTkT5q3DPCs3T",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Weighted roll\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Weighted roll\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 42,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 42,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "nPwDJWbhAfDxBfI8zSOUn"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Eric Hodges\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Eric Hodges\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 43,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 63,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 43,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 63,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Nf1WSTS88UPiP5jSqche-"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Specification:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Specification:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 64,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 79,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "From L<http://www.perlmonks.org/?node_id=731443>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "From "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://www.perlmonks.org/?node_id=731443"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 80,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 129,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "This is part of a strategy game. There are a number of ships in combat,\nand you must determine which order they get to take their actions.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "This is part of a strategy game. There are a number of ships in combat,\nand you must determine which order they get to take their actions.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 130,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 269,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Each ship has an initiative value.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Each ship has an initiative value.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 270,
                          "line": 16,
                          "column": 1
                        },
                        "end": {
                          "offset": 311,
                          "line": 17,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 270,
                      "line": 16,
                      "column": 1
                    },
                    "end": {
                      "offset": 311,
                      "line": 17,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "v8kghTRBSZBCOmRH91Eej"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "At the start of the turn, each ship gets a number of ballots equal to\n      their initiative. The ballots are drawn out randomly. The first time a\n      ship's ballot gets drawn, it takes its turn. The rest of its ballots\n      are wasted.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "At the start of the turn, each ship gets a number of ballots equal to\n      their initiative. The ballots are drawn out randomly. The first time a\n      ship's ballot gets drawn, it takes its turn. The rest of its ballots\n      are wasted.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 311,
                          "line": 17,
                          "column": 1
                        },
                        "end": {
                          "offset": 557,
                          "line": 21,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 311,
                      "line": 17,
                      "column": 1
                    },
                    "end": {
                      "offset": 557,
                      "line": 21,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "VMTNa7Eka_Xcgmhfw9dDa"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "Worked example:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Worked example:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 558,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 574,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "3 ships <A B C> with initiative (1,2,4).\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "3 ships <A B C> with initiative (1,2,4).\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 575,
                          "line": 24,
                          "column": 1
                        },
                        "end": {
                          "offset": 622,
                          "line": 25,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 575,
                      "line": 24,
                      "column": 1
                    },
                    "end": {
                      "offset": 622,
                      "line": 25,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "2zI-KylJsBnlTxmM5tg5H"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "We put ballots into an array: <A B B C C C C>\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "We put ballots into an array: <A B B C C C C>\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 622,
                          "line": 25,
                          "column": 1
                        },
                        "end": {
                          "offset": 674,
                          "line": 26,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 622,
                      "line": 25,
                      "column": 1
                    },
                    "end": {
                      "offset": 674,
                      "line": 26,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "dKeQCQRyDFwFXKHhO_eX7"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "We draw a ballot out at random: C. C takes its turn.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "We draw a ballot out at random: C. C takes its turn.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 674,
                          "line": 26,
                          "column": 1
                        },
                        "end": {
                          "offset": 733,
                          "line": 27,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 674,
                      "line": 26,
                      "column": 1
                    },
                    "end": {
                      "offset": 733,
                      "line": 27,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "GSpGZD9dmeleXds9QTaC-"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "We draw another ballot:  C. do nothing.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "We draw another ballot:  C. do nothing.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 733,
                          "line": 27,
                          "column": 1
                        },
                        "end": {
                          "offset": 779,
                          "line": 28,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 733,
                      "line": 27,
                      "column": 1
                    },
                    "end": {
                      "offset": 779,
                      "line": 28,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "IZJx4sspGsH9tqNdmky_V"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "We draw another ballot:  C. do nothing.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "We draw another ballot:  C. do nothing.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 779,
                          "line": 28,
                          "column": 1
                        },
                        "end": {
                          "offset": 825,
                          "line": 29,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 779,
                      "line": 28,
                      "column": 1
                    },
                    "end": {
                      "offset": 825,
                      "line": 29,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "5dfb5B9fLEON_XbQUfc9r"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "We draw another ballot:  B. B takes its turn.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "We draw another ballot:  B. B takes its turn.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 825,
                          "line": 29,
                          "column": 1
                        },
                        "end": {
                          "offset": 877,
                          "line": 30,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 825,
                      "line": 29,
                      "column": 1
                    },
                    "end": {
                      "offset": 877,
                      "line": 30,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "QL6Sz0CtbgbqQwqrLgc19"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "We draw another ballot:  B. do nothing.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "We draw another ballot:  B. do nothing.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 877,
                          "line": 30,
                          "column": 1
                        },
                        "end": {
                          "offset": 923,
                          "line": 31,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 877,
                      "line": 30,
                      "column": 1
                    },
                    "end": {
                      "offset": 923,
                      "line": 31,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "jA5h2zGLSJPMLBpAVhS62"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "We draw another ballot:  A. A takes its turn.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "We draw another ballot:  A. A takes its turn.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 923,
                          "line": 31,
                          "column": 1
                        },
                        "end": {
                          "offset": 975,
                          "line": 32,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 923,
                      "line": 31,
                      "column": 1
                    },
                    "end": {
                      "offset": 975,
                      "line": 32,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "JehzfYP6IsFuUa3RRxUbD"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "We draw the last ballot: C. do nothing.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "We draw the last ballot: C. do nothing.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 975,
                          "line": 32,
                          "column": 1
                        },
                        "end": {
                          "offset": 1021,
                          "line": 33,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 975,
                      "line": 32,
                      "column": 1
                    },
                    "end": {
                      "offset": 1021,
                      "line": 33,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "LRFrTWTZxFw5Z4FL6vVis"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "So the final order is: <C B A>\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "So the final order is: <C B A>\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1021,
                          "line": 33,
                          "column": 1
                        },
                        "end": {
                          "offset": 1058,
                          "line": 34,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1021,
                      "line": 33,
                      "column": 1
                    },
                    "end": {
                      "offset": 1058,
                      "line": 34,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "03ON20wati_GTWPsWIBNe"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "This is not necessarily the most efficient way to perform the algorithm.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "This is not necessarily the most efficient way to perform the algorithm.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1059,
                  "line": 35,
                  "column": 1
                },
                "end": {
                  "offset": 1132,
                  "line": 36,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Useful things to note:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Useful things to note:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1133,
                  "line": 37,
                  "column": 1
                },
                "end": {
                  "offset": 1156,
                  "line": 38,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "to generate a random number from 1 to N, use C<(1..N).pick>\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "to generate a random number from 1 to N, use "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "(1..N).pick"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1157,
                          "line": 39,
                          "column": 1
                        },
                        "end": {
                          "offset": 1223,
                          "line": 40,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1157,
                      "line": 39,
                      "column": 1
                    },
                    "end": {
                      "offset": 1223,
                      "line": 40,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "OX0i1JXApLK1Spp5mUf1c"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "to generate a random number from 0 to N-1, use C<(0..^N).pick>\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "to generate a random number from 0 to N-1, use "
                        },
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "(0..^N).pick"
                            }
                          ],
                          "type": "fcode",
                          "name": "C"
                        },
                        {
                          "type": "text",
                          "value": "\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1223,
                          "line": 40,
                          "column": 1
                        },
                        "end": {
                          "offset": 1292,
                          "line": 41,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1223,
                      "line": 40,
                      "column": 1
                    },
                    "end": {
                      "offset": 1292,
                      "line": 41,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "5BmGFx1nGCLnbjFNS2xqO"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1302,
              "line": 43,
              "column": 1
            }
          },
          "id": "jgCdJuZAliwtgxM3-_HfR"
        },
        {
          "text": "\nour $SHIPS = 4;\nour $REPS  = 30;\n\nmy @weights = (1..16).pick($SHIPS, :replace);\nfor @weights.kv -> $k, $v { say \"$k: $v\" }\n\nmy $total = [+] @weights;\nsay \"Total Weights $total\";\n\nsub pick(@weights, $total) {\n   my $rand = (0..^$total).pick;\n   for @weights.kv -> $i, $w {\n       $rand -= $w;\n       return $i if $rand < 0;\n   }\n}\n\nsub pickAll(@weights is copy, $total is copy) {\n   my @order;\n   for @weights {\n        my $pick = pick(@weights, $total);\n        @order.push($pick);\n        $total -= @weights[$pick];\n        @weights[$pick] = 0;\n   }\n   return @order;\n }\n\nsay ~pickAll(@weights,$total) for 1 .. $REPS;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1302,
              "line": 43,
              "column": 1
            },
            "end": {
              "offset": 1962,
              "line": 75,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Counting Disease Carriers\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/afrq-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "PadlGFV9y337ZZvTrw_Yz",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Counting Disease Carriers\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Counting Disease Carriers\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 54,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 54,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "QS7rMal3v3j7F-Bo_oD6m"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 55,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 74,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 55,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 74,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Gb9L57PNUVSpj_gp399He"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/afrq/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/afrq/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 75,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 114,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Expected output from default input data:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Expected output from default input data:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 115,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 156,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "0.532 0.75 0.914\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "0.532 0.75 0.914\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 157,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 178,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 188,
              "line": 16,
              "column": 1
            }
          },
          "id": "z9XgN5BmnSmzIMCN0aGFM"
        },
        {
          "text": "\nsub MAIN($data-string = \"0.1 0.25 0.5\") {\n    my @A = $data-string.split(' ')».Num;\n\n    say @A».&afrq.fmt('%.3g');\n}\n\nsub afrq($r) { 1 - (1 - sqrt $r)**2 }\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 188,
              "line": 16,
              "column": 1
            },
            "end": {
              "offset": 386,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Introduction to Alternative Splicing\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/aspc-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "miILzZr7TXuF5Od07i_kx",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Introduction to Alternative Splicing\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Introduction to Alternative Splicing\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 65,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 65,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "83LMJcvaCaK4iqiGoRazd"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 66,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 66,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Mpib7fDr1nk2_O31R33MB"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/aspc/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/aspc/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 86,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 125,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Expected output from default input data:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Expected output from default input data:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 126,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 167,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "42\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "42\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 168,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 175,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 185,
              "line": 16,
              "column": 1
            }
          },
          "id": "v714ba8hVHoiT5baC9WhM"
        },
        {
          "text": "\nsub MAIN($n = 6, $m = 3) {\n    my $sum = my $C =  ([*] $n-$m+1 .. $n) div [*] 1 .. $m;\n    for $m+1 .. $n -> $k { $sum += $C = $C * ($n - $k + 1) div $k }\n    say $sum % 1_000_000;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 185,
              "line": 16,
              "column": 1
            },
            "end": {
              "offset": 409,
              "line": 24,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Consensus and Profile\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/cons-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "R1FFOMJkPG4fx-R4W3rBG",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Consensus and Profile\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Consensus and Profile\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 50,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 50,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "-gXUaYbAjunYAOnu99olu"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 51,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 70,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 51,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 70,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Dprz5b42Mjedq5QvlWdad"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Finding a Most Likely Common Ancestor\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Finding a Most Likely Common Ancestor\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 71,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 109,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/cons/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/cons/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 110,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 149,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 150,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 163,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "ATCCAGCT\nGGGCAACT\nATGGATCT\nAAGCAACC\nTTGGAACT\nATGCCATT\nATGGCACT\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "ATCCAGCT\n    GGGCAACT\n    ATGGATCT\n    AAGCAACC\n    TTGGAACT\n    ATGCCATT\n    ATGGCACT\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 164,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 255,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 256,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 270,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "ATGCAACT\nA: 5 1 0 0 5 5 0 0\nC: 0 0 1 4 2 0 6 1\nG: 1 1 6 3 0 1 0 0\nT: 1 5 0 0 0 1 1 6\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "ATGCAACT\n    A: 5 1 0 0 5 5 0 0\n    C: 0 0 1 4 2 0 6 1\n    G: 1 1 6 3 0 1 0 0\n    T: 1 5 0 0 0 1 1 6\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 271,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 376,
                  "line": 30,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 386,
              "line": 32,
              "column": 1
            }
          },
          "id": "1TFEsbLZ3LHnsNX0Lxgkn"
        },
        {
          "text": "\nmy @default-data = qw{\n    ATCCAGCT\n    GGGCAACT\n    ATGGATCT\n    AAGCAACC\n    TTGGAACT\n    ATGCCATT\n    ATGGCACT\n};\n\nmy \\N = @default-data.pick.chars;\n\nmy %profile;\n%profile{$_} = [0 xx N] for <A C G T>;\n\nfor @default-data[] {\n    my @dna = .comb;\n    my %dna-index-map = classify { @dna[$_] }, ^@dna;\n    for %dna-index-map.kv -> $k, $v {\n        %profile{$k}[$v[]]»++;\n    }\n}\nmy @profile = %profile<A C G T>;\n\nsay my $consensus = [~] gather\nfor ^N -> \\c {\n    my $max = max map { @profile[$_][c] }, ^4;\n    take <A C G T>[$_] given first { @profile[$_][c] == $max }, ^4;\n}\n\nsay [~] .key, ': ', @profile[.value] for enum <A C G T>.sort;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 386,
              "line": 32,
              "column": 1
            },
            "end": {
              "offset": 1067,
              "line": 66,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Comparing Spectra with the Spectral Convolution\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/conv-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "YsfOR9N9_uk8K5FZY3xSs",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Comparing Spectra with the Spectral Convolution\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Comparing Spectra with the Spectral Convolution\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 76,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 76,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "aycuG_1ZZD7Cj1caKx3fL"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 77,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 96,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 77,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 96,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "reANusUq_WxhtMtgn6NN_"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/conv/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/conv/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 97,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 136,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 137,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 150,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "186.07931 287.12699 548.20532 580.18077 681.22845 706.27446 782.27613 968.35544 968.35544\n101.04768 158.06914 202.09536 318.09979 419.14747 463.17369\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "186.07931 287.12699 548.20532 580.18077 681.22845 706.27446 782.27613 968.35544 968.35544\n    101.04768 158.06914 202.09536 318.09979 419.14747 463.17369\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 151,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 309,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 310,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 324,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "3\n85.03163\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "3\n    85.03163\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 325,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 344,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 354,
              "line": 22,
              "column": 1
            }
          },
          "id": "YDH0KzT84Aiyl0yQxBc8j"
        },
        {
          "text": "\nmy $a = \"186.07931 287.12699 548.20532 580.18077 681.22845 706.27446 782.27613 968.35544 968.35544\";\nmy $b = \"101.04768 158.06914 202.09536 318.09979 419.14747 463.17369\";\n\nmy %conv; %conv{$_}++ for $a.split(/\\s+/) X- $b.split(/\\s+/);\n.say for max(:by(*.value), %conv).kv.reverse;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 354,
              "line": 22,
              "column": 1
            },
            "end": {
              "offset": 676,
              "line": 30,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Creating a Character Table from Genetic Strings\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/cstr-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "SPpZg0zXnqZ-WmdwyV7mT",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Creating a Character Table from Genetic Strings\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Creating a Character Table from Genetic Strings\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 76,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 76,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "lrM9409iQIC-iLUDsr0V2"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 77,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 96,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 77,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 96,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "9N65pN78hv4IZqWeFehb4"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/cstr/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/cstr/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 97,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 136,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 137,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 150,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "ATGCTACC\nCGTTTACC\nATTCGACC\nAGTCTCCC\nCGTCTATC\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "ATGCTACC\n    CGTTTACC\n    ATTCGACC\n    AGTCTCCC\n    CGTCTATC\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 151,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 216,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 217,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 231,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "10110\n10100\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "10110\n    10100\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 232,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 252,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 262,
              "line": 25,
              "column": 1
            }
          },
          "id": "70LRUSDnFUZ_mpi0pZ2Mi"
        },
        {
          "text": "\nmy @default-data = qw:to/END/;\n    ATGCTACC\n    CGTTTACC\n    ATTCGACC\n    AGTCTCCC\n    CGTCTATC\n    END\n\nsub MAIN($input-file = Nil) {\n    my @input = $input-file ?? $input-file.IO.lines !! @default-data;\n    my @dna = map { [.comb] }, @input;\n    my @c = @dna[0][];\n\n    for ^@c -> $c {\n        my @line = map { +so .[$c] eq @c[$c] }, @dna;\n        say @line.join if 1 < ([+] @line) < @dna-1;\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 262,
              "line": 25,
              "column": 1
            },
            "end": {
              "offset": 705,
              "line": 46,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Creating a Character Table\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/ctbl-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "lkmVaV5QnPMFkPyunyGMq",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Creating a Character Table\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Creating a Character Table\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 55,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 55,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "-B8ubsdpIfi_badJjOdhv"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 56,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 56,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "X_r3ZMkg6k-YC2312QRji"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/ctbl/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/ctbl/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 76,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 115,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 116,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 129,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "(dog,((elephant,mouse),robot),cat);\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "(dog,((elephant,mouse),robot),cat);\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 130,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 170,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 171,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 185,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "00110\n00111\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "00110\n    00111\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 186,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 206,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 216,
              "line": 21,
              "column": 1
            }
          },
          "id": "11TuD4vl0uWrwyVHgaEQz"
        },
        {
          "text": "\nsub MAIN(Str $input = \"(dog,((elephant,mouse),robot),cat);\") {\n    my $line = $input;\n    $line .= chop;\n    my $names = rx / <.ident>+ | <?after <[(,]> > <?before <[),]> > /;\n    my @name = $line.comb: $names;\n    my @sorting = map *.value, sort *.key, (@name Z=> ^@name);\n    $line ~~ s:g/$names/0/;\n    $line ~~ s:g/','//;\n\n    while $line ~~ / \\( 0 ** 2..* \\) / {\n        my $array = join(\n            '',\n            .prematch,\n            .subst(/0/, '1', :g),\n            .postmatch,\n        ).subst(/<[()]>/, '', :g) given $/;\n        unless $array ~~ /^[ 0+ | 1+ ]$/ {\n            say $array.comb[@sorting].join: '';\n        }\n        $line ~~ s/\\( (0+) \\)/$0/;\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 216,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 936,
              "line": 46,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Introduction to Protein Databases\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/dbpr-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "oSkwnzis_KPy51ifO1Os3",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Introduction to Protein Databases\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Introduction to Protein Databases\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 62,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 62,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "98azyo1nYUNKxh9r9tm6T"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 63,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 82,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 63,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 82,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "3Lx8VACwnLE7dwjWo11HB"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/dbpr/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/dbpr/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 83,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 122,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 123,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 136,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Q5SLP9\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Q5SLP9\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 137,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 148,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 149,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 163,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "DNA recombination\nDNA repair\nDNA replication\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "DNA recombination\n    DNA repair\n    DNA replication\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 164,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 221,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 231,
              "line": 22,
              "column": 1
            }
          },
          "id": "R0PFC4CvkuAMr8iJl2VN-"
        },
        {
          "text": "\nuse LWP::Simple;\n\nsub MAIN(Str $id = \"Q5SLP9\") {\n    my $id-fname = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, \"$id.txt\");\n    my $input = $id-fname.IO.e\n        ?? $id-fname.IO.slurp\n        !! LWP::Simple.get(qq{http://www.uniprot.org/uniprot/$id.txt});\n    for split \"\\n\", $input {\n        if / GO\\; .* \\sP\\: (.*?)\\;/ {\n            say $/[0].Str\n        }\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 231,
              "line": 22,
              "column": 1
            },
            "end": {
              "offset": 637,
              "line": 38,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Counting DNA Nucleotides\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/dna-gerdr.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "wu_IW1zHJDSCsbj_OZop_",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Counting DNA Nucleotides\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Counting DNA Nucleotides\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 53,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 53,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "uKvKhp5OzrqFbxNE6IPNU"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "gerdr\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "gerdr\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 54,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 54,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "GvUKUDYtQUGQBEgP_wjvf"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/dna/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/dna/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 69,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 107,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 108,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 121,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 122,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 197,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 198,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 212,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "20 12 17 21\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "20 12 17 21\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 213,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 229,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 239,
              "line": 20,
              "column": 1
            }
          },
          "id": "NdaZjZYlzl6Hu-6OxLrpA"
        },
        {
          "text": "\nmy $default-input = \"AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC\";\n\nsub MAIN($input = $default-input) {\n    \"{<A C G T>.map({ +$input.comb(/$_/) })}\".say;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 239,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 464,
              "line": 28,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Counting DNA Nucleotides\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/dna-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "8XCLKOritYl6H9R_UX5OT",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Counting DNA Nucleotides\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Counting DNA Nucleotides\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 53,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 53,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "QfDsJvKYtbH6z6KpseKue"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 54,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 73,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 54,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 73,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "JVxTLZ5yB5_fUv4luEe1m"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/dna/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/dna/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 74,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 112,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 113,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 126,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 127,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 202,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 203,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 217,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "20 12 17 21\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "20 12 17 21\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 218,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 234,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 244,
              "line": 20,
              "column": 1
            }
          },
          "id": "EVVBFrxd2PNzCm9Gs8CY7"
        },
        {
          "text": "\nmy $default-input = \"AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC\";\n\nsub MAIN(Str $input = $default-input) {\n    say \"{bag($input.comb)<A C G T>}\";\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 244,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 461,
              "line": 28,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Enumerating Unrooted Binary Trees\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/eubt-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "phpVRYLPtx7-fl73VxKZM",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Enumerating Unrooted Binary Trees\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Enumerating Unrooted Binary Trees\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 62,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 62,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "eWSL2Khexf0EtWKQ2Dnse"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 63,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 82,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 63,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 82,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "GBLUpHvO5467cgvuCkm04"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/eubt/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/eubt/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 83,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 122,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 123,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 136,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "dog cat mouse elephant\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "dog cat mouse elephant\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 137,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 164,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 165,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 179,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "(((mouse,cat),elephant))dog;\n(((elephant,mouse),cat))dog;\n(((elephant,cat),mouse))dog;\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "(((mouse,cat),elephant))dog;\n    (((elephant,mouse),cat))dog;\n    (((elephant,cat),mouse))dog;\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 180,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 279,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 289,
              "line": 22,
              "column": 1
            }
          },
          "id": "Rfz0ZuWF-N5yjZgy0Bagg"
        },
        {
          "text": "\nproto combine (Int, @) {*}\nmulti combine (0,  @)  { [] }\nmulti combine ($,  []) { () }\nmulti combine ($n, [$head, *@tail]) {\n    map(\n        { [$head, @^others] },\n        combine($n-1, @tail)\n    ),\n    combine($n, @tail);\n}\n \nsub ncombine($n, $k) { (state %){$n}{$k} //= combine($k, [^$n]) }\nsub eubt(@species) {\n    if @species == 1 { return [ @species ] }\n    elsif @species == 2 { return [ sprintf \"(%s,%s)\", @species ] }\n    elsif @species >= 3 {\n        gather for 1 .. +@species div 2 -> $k {\n            my %seen;\n            for ncombine(+@species, $k)[].map( { [ @species[@$_] ] } ) -> @picked {\n                %seen{join ':', @picked}++;\n                my @left = grep none(@picked), @species;\n                next if %seen{join ':', @left};\n                for (eubt(@picked) »~» ',') X~ eubt(@left) {\n                    take [ \"($_)\" ]\n                }\n            }\n        }\n    }\n    else { !!! 'unexpected number of species' }\n}\n\nsub MAIN($input = \"dog cat mouse elephant\") {\n    my @data = $input.words;\n    my $first = @data.shift;\n    printf \"(%s)%s\\n\", $_, $first for eubt @data;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 289,
              "line": 22,
              "column": 1
            },
            "end": {
              "offset": 1439,
              "line": 61,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Expected Number of Restriction Sites\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/eval-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "LEt7PGH1lQwN_NrO9dV2E",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Expected Number of Restriction Sites\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Expected Number of Restriction Sites\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 65,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 65,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "wLSNEvzthyvM5HuvoNeIc"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 66,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 66,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "22P8xRH-dloShnpJsbEFe"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/eval/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/eval/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 86,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 125,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 126,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 139,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "10\nAG\n0.25 0.5 0.75\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "10\n    AG\n    0.25 0.5 0.75\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 140,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 172,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 173,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 187,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "0.422 0.563 0.422\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "0.422 0.563 0.422\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 188,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 210,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 220,
              "line": 22,
              "column": 1
            }
          },
          "id": "-o4Su91AUxpyqAwzsVgNj"
        },
        {
          "text": "\nsub prob(:$dna, :$gc-content) {\n    1/2**$dna.chars *\n    [*] map { $_ eq 'G'|'C' ?? $gc-content !! (1 - $gc-content) }, $dna.comb\n}\n\nmy @data = ('10', 'AG', '0.25 0.5 0.75');\nmy $n = @data.shift;\nmy $s = @data.shift;\nmy @A = @data.shift.split: ' ';\n\nmy @B;\n\nfor @A -> $gc-content {\n    push @B, ($n - $s.chars + 1) * prob :dna($s), :$gc-content;\n}\n\nsay @B.fmt(\"%.3f\");\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 220,
              "line": 22,
              "column": 1
            },
            "end": {
              "offset": 631,
              "line": 42,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Rabbits and Recurrence Relations\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/fib-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "70wJRx8F3WEgYMUKH0rDE",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Rabbits and Recurrence Relations\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Rabbits and Recurrence Relations\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 61,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 61,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "M0UsxMpAsTQ6Y0FhbWC5N"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 62,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 81,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 62,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 81,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "4meDcc9k_nagHcNAp2QIk"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/fib/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/fib/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 82,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 120,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 121,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 134,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "5 3\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "5 3\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 135,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 143,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 144,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 158,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "19\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "19\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 159,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 166,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 176,
              "line": 20,
              "column": 1
            }
          },
          "id": "yoQoye9n0mHDEPZKRiD_N"
        },
        {
          "text": "\nsub MAIN(Int $n = 5, Int $k = 3) {\n    my @fib = 1, 1, * * $k + * ... *;\n\n    say @fib[$n-1];\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 176,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 313,
              "line": 28,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Mortal Fibonacci Rabbits\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/fibd-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "MUKDA1K8UjgdF_lM0aCj2",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Mortal Fibonacci Rabbits\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Mortal Fibonacci Rabbits\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 53,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 53,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "3ypB-tQ3lwKDlvQD61lwN"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 54,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 73,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 54,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 73,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "JeMSNVggyjkNOCKMzlgmb"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/fibd/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/fibd/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 74,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 113,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 114,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 127,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "6 3\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "6 3\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 128,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 136,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample outut\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample outut\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 137,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 150,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "4\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "4\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 151,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 157,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 167,
              "line": 20,
              "column": 1
            }
          },
          "id": "JMeSxuJh3oFqdNMdQ0nZ8"
        },
        {
          "text": "\nsub MAIN(Int $n = 6, Int $m = 3) {\n    my @population = (1, 0 xx ($m-1)).flat;\n    for 1 .. $n-1 -> \\n {\n        @population.unshift: [+] @population[1..*-1];  # reproduction\n        @population.pop;                               # death\n    }\n\n    say [+] @population;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 167,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 480,
              "line": 32,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Computing GC Content\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/gc-gerdr.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "K26UHM4712Or_ox6nmbGG",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Computing GC Content\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Computing GC Content\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "s90bqqqEdSSoPvFIvgURQ"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "gerdr\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "gerdr\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 64,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 64,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "g4k0TQPGHcSsUWlE6XaKG"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/gc/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/gc/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 65,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 102,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 103,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 116,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": ">Rosalind_6404\nCCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCC\nTCCCACTAATAATTCTGAGG\n>Rosalind_5959\nCCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCT\nATATCCATTTGTCAGCAGACACGC\n>Rosalind_0808\nCCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGAC\nTGGGAACCTGCGGGCAGTAGGTGGAAT\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": ">Rosalind_6404\n    CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCC\n    TCCCACTAATAATTCTGAGG\n    >Rosalind_5959\n    CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCT\n    ATATCCATTTGTCAGCAGACACGC\n    >Rosalind_0808\n    CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGAC\n    TGGGAACCTGCGGGCAGTAGGTGGAAT\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 117,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 455,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 456,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 470,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Rosalind_0808\n60.919540\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Rosalind_0808\n    60.919540\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 471,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 503,
                  "line": 27,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 513,
              "line": 29,
              "column": 1
            }
          },
          "id": "zd3zPEHG812cUkkTSARup"
        },
        {
          "text": "\ngrammar FASTA {\n    token TOP { ^ \\n* <DNA-string>+ }\n    token DNA-string { '>' (\\N+) \\n (<[ACGT\\n]>+) }\n}\n\nmy $actions = class {\n    method TOP($/) {\n        make $<DNA-string>>>.ast\n    }\n\n    method DNA-string($/) {\n        make [~$0, 100 * +.comb(/<[GC]>/) / +.comb(/<[ACGT]>/)]\n        given ~$1\n    }\n};\n\nmy $default-input = q:to/END/;\n    >Rosalind_6404\n    CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCC\n    TCCCACTAATAATTCTGAGG\n    >Rosalind_5959\n    CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCT\n    ATATCCATTTGTCAGCAGACACGC\n    >Rosalind_0808\n    CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGAC\n    TGGGAACCTGCGGGCAGTAGGTGGAAT\n    END\n\nsub MAIN($input-file = Nil) {\n    my $input = $input-file ?? $input-file.IO.slurp !! $default-input;\n\n    FASTA.parse($_, :$actions).ast.sort(*.[1]).[*-1] ~ '%' ==> say()\n        given $input;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 513,
              "line": 29,
              "column": 1
            },
            "end": {
              "offset": 1439,
              "line": 66,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Overlap Graphs\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/grph-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "SCCmuaOY88rM9bS7mfEsB",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Overlap Graphs\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Overlap Graphs\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 43,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 43,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "bke0dH9JrvakdjdJrdQ8X"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 44,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 63,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 44,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 63,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "oE9v-iN59b22E7yndAP8s"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/grph/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/grph/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 64,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 103,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 104,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 117,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": ">Rosalind_0498\nAAATAAA\n>Rosalind_2391\nAAATTTT\n>Rosalind_2323\nTTTTCCC\n>Rosalind_0442\nAAATCCC\n>Rosalind_5013\nGGGTGGG\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": ">Rosalind_0498\n    AAATAAA\n    >Rosalind_2391\n    AAATTTT\n    >Rosalind_2323\n    TTTTCCC\n    >Rosalind_0442\n    AAATCCC\n    >Rosalind_5013\n    GGGTGGG\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 118,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 273,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 274,
                  "line": 24,
                  "column": 1
                },
                "end": {
                  "offset": 288,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Rosalind_0498 Rosalind_2391\nRosalind_0498 Rosalind_0442\nRosalind_2391 Rosalind_2323\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Rosalind_0498 Rosalind_2391\n    Rosalind_0498 Rosalind_0442\n    Rosalind_2391 Rosalind_2323\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 289,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 385,
                  "line": 29,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 395,
              "line": 31,
              "column": 1
            }
          },
          "id": "E05NGL9ZfHW1ckVoLushp"
        },
        {
          "text": "\nmy $default-data = q:to/END/;\n>Rosalind_0498\nAAATAAA\n>Rosalind_2391\nAAATTTT\n>Rosalind_2323\nTTTTCCC\n>Rosalind_0442\nAAATCCC\n>Rosalind_5013\nGGGTGGG\nEND\n\nsub MAIN($input-file = Nil) {\n    my $input = !$input-file ?? $default-data !! $input-file.IO.slurp;\n\n    my %dna = (gather for\n        $input.match(/ ^^ '>Rosalind_' (<digit> **4) \\n (<[\\nACGT]>*) /, :g) {\n        take ~.[0], ~.[1].subst(/\\n/,'', :g);\n    })>>.list.flat;\n\n    for (%dna X %dna).flat -> $a, $b {\n        next if $a.key eq $b.key;\n        say \"{'Rosalind_' «~« ($a, $b)».key} \".trim\n        if $a.value.substr(*-3) eq $b.value.substr(0, 3);\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 395,
              "line": 31,
              "column": 1
            },
            "end": {
              "offset": 1051,
              "line": 61,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Counting Point Mutations\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/hamm-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "UHnrJ0GsQt8dO7FrnRak2",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Counting Point Mutations\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Counting Point Mutations\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 53,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 53,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "AIGafQnQ4ci_Z5moQ2L5l"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 54,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 73,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 54,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 73,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "BOClKI2Ge2y7LPYiimkTg"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Evolution as a Sequence of Mistakes\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Evolution as a Sequence of Mistakes\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 74,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 110,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/hamm/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/hamm/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 111,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 150,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 151,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 164,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "GAGCCTACTAACGGGAT\nCATCGTAATGACGGCCT\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "GAGCCTACTAACGGGAT\n    CATCGTAATGACGGCCT\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 165,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 209,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 210,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 224,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "7\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "7\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 225,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 231,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 241,
              "line": 23,
              "column": 1
            }
          },
          "id": "eMPXVTwbXRxDvOeCGJDVa"
        },
        {
          "text": "\nsub MAIN(@default-data = qw{GAGCCTACTAACGGGAT CATCGTAATGACGGCCT}) {\n    my ($S, $t) = @default-data;\n    say [+] ($S.comb Zeq $t.comb)».not».Int;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 241,
              "line": 23,
              "column": 1
            },
            "end": {
              "offset": 430,
              "line": 30,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Calculating Expected Offspring\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/iev-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "fyIC6dolXTLEQJXtasmhP",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Calculating Expected Offspring\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Calculating Expected Offspring\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 59,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 59,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "ky_wg8cA5csQIz08e9xEF"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 60,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 79,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 60,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 79,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "_4hM6GTbU6aZ9M4qLmaTv"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/iev/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/iev/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 80,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 118,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 119,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 132,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1 0 0 1 0 1\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "1 0 0 1 0 1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 133,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 149,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 150,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 164,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "3.5\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "3.5\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 165,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 173,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 183,
              "line": 20,
              "column": 1
            }
          },
          "id": "uMu2T07l49IbmAG_vZIYp"
        },
        {
          "text": "\nsub MAIN(Str $default-data = \"1 0 0 1 0 1\") {\n    say 2 * [+] <1 1 1 3/4 1/2 0> Z* $default-data.split: \" \";\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 183,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 335,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Independent Segregation of Chromosomes\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/indc-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "LmaisPvLhEetwqvBB8kWD",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Independent Segregation of Chromosomes\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Independent Segregation of Chromosomes\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 67,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 67,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "-K_oDvEuQhiS37Qhd0t1Z"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 68,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 87,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 68,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 87,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "BnaOAdwufSgaSgByeVk7p"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/indc/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/indc/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 88,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 127,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 128,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 141,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "5\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "5\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 142,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 148,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 149,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 163,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "0.000 -0.004 -0.024 -0.082 -0.206 -0.424 -0.765 -1.262 -1.969 -3.010\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "0.000 -0.004 -0.024 -0.082 -0.206 -0.424 -0.765 -1.262 -1.969 -3.010\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 164,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 237,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 247,
              "line": 20,
              "column": 1
            }
          },
          "id": "hBcS50zGWDddcL1Wmj6Hc"
        },
        {
          "text": "\nmy $n = 5;\n\nsub C($n, $k) {\n    state %cache;\n    %cache{$n}{$k} //=\n        $k == 1 ?? $n !! C($n, $k-1)*($n-$k+1) div $k;\n}\n\nmy @results = gather for 1 .. 2*$n -> $k {\n    take .log / log 10 given 1/2**(2*$n) * [+] map { C 2*$n, $_ }, $k .. 2*$n;\n}\n\nsay @results.fmt(\"%.3f\");\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 247,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 566,
              "line": 36,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Mendel's First Law\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/iprb-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "RJ1o_fkJ97r8CPe6bimon",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Mendel's First Law\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Mendel's First Law\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 47,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 47,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "zRd6TpMm7VNJducDtv8WV"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 48,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 67,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 48,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 67,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "yHvEjIxBirAP1NuEObrJv"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/iprb/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/iprb/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 68,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 107,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 108,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 121,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "2 2 2\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "2 2 2\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 122,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 132,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 133,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 147,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "0.78333\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "0.78333\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 148,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 160,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 170,
              "line": 20,
              "column": 1
            }
          },
          "id": "OXaxTfcT4Fs10xZjseE96"
        },
        {
          "text": "\nsub take-two($n) { $n*($n-1)/2 }\n\nsub MAIN(Str $input = \"2 2 2\") {\n    given $input.split: \" \" {\n        say\n        take-two([+] .[].cache) R/ (\n            [+]\n            take-two(.[0])       ,   # two homozygous dominant\n            3/4 * take-two(.[1]) ,   # two heterozygous\n            .[0] * .[1]          ,   # one homozygous dominant and one heterozygous\n            .[0] * .[2]          ,   # one homozygous dominant and one homozygous recessive\n            1/2 * .[1] * .[2]    ,   # one heterozygous and one homozygous recessive\n        )\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 170,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 771,
              "line": 38,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Finding Disjoint Motifs in a Gene\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/itwv-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "pCfyyOVWPS4PHa9HIYy1M",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Finding Disjoint Motifs in a Gene\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Finding Disjoint Motifs in a Gene\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 62,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 62,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "hTTmZRCE_vQ9t5_-RFE8Z"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "grondilu\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "grondilu\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 63,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 80,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 63,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 80,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "-eokjn7OxHTdIhiYB7Zm7"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/itwv/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/itwv/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 81,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 120,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 121,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 134,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "GACCACGGTT\nACAG\nGT\nCCG\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "GACCACGGTT\n    ACAG\n    GT\n    CCG\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 135,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 174,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 175,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 189,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "0 0 1\n0 1 0\n1 0 0\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "0 0 1\n    0 1 0\n    1 0 0\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 190,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 220,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 230,
              "line": 25,
              "column": 1
            }
          },
          "id": "H4ea4a6YuekZalpC_Pp5d"
        },
        {
          "text": "\n# THIS IS WAY TOO SLOW!!\n#\nmy $dna = 'GACCACGGTT';\nmy @motif = <ACAG GT CCG>;\n\nsub interwove($a, $b) {\n    gather if none($a, $b) eq '' {\n        for &?ROUTINE($a.substr(1), $b) {\n            take $a.substr(0,1) ~ $_\n        }\n        for &?ROUTINE($a, $b.substr(1)) {\n            take $b.substr(0,1) ~ $_\n        }\n    }\n    elsif $a eq '' { take $b }\n    else { take $a }\n}\n\nmy %seen;\nfor @motif -> $a {\n    my @arr = gather for @motif -> $b {\n        my @interwove = interwove($a, $b).unique;\n        take %seen{sort($a, $b).join(':')} //=\n        +so grep rx/ <@interwove> /, $dna;\n    }\n    say \"{@arr}\"\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 230,
              "line": 25,
              "column": 1
            },
            "end": {
              "offset": 882,
              "line": 55,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Finding a Shared Spliced Motif\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/lcsq-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "hwuZ27aMfV17iMLqdpzD1",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Finding a Shared Spliced Motif\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Finding a Shared Spliced Motif\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 59,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 59,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "BeqLkYOaksoN3VJB9m06H"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 60,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 79,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 60,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 79,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "1M4In0lq6avwwLmfB9hlE"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/lcsq/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/lcsq/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 80,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 119,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 120,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 133,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": ">Rosalind_23\nAACCTTGG\n>Rosalind_64\nACACTGTGA\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": ">Rosalind_23\n    AACCTTGG\n    >Rosalind_64\n    ACACTGTGA\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 134,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 195,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 196,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 210,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "AACTGG\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "AACTGG\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 211,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 222,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Note: the C<lcsq> shared library needs to be built first.  For example, on a\nLinux system use the following commands:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Note: the "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "lcsq"
                    }
                  ],
                  "type": "fcode",
                  "name": "C"
                },
                {
                  "type": "text",
                  "value": " shared library needs to be built first.  For example, on a\nLinux system use the following commands:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 223,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 341,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "$ gcc --std=c99 -fPIC -c -o lcsq.o lcsq.c\n$ gcc -shared -o lcsq.so lcsq.o\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "$ gcc --std=c99 -fPIC -c -o lcsq.o lcsq.c\n    $ gcc -shared -o lcsq.so lcsq.o\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 342,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 424,
                  "line": 27,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 434,
              "line": 29,
              "column": 1
            }
          },
          "id": "EtJc--RSCKtY_z7XMTxWz"
        },
        {
          "text": "\nuse NativeCall;\n\nsub lcsq(Str $, Str $ --> Str) is native($*SPEC.catdir($*PROGRAM-NAME.IO.dirname, 'lcsq')) {*}\n\nmy $default-input = q:to/END/;\n    >Rosalind_23\n    AACCTTGG\n    >Rosalind_64\n    ACACTGTGA\n    END\n\nsub MAIN($input-file = Nil) {\n    my $input = $input-file ?? $input-file.IO.slurp !! $default-input;\n\n    say lcsq |gather for $input.match:\n    / ^^ '>Rosalind_' <digit>+ \\n (<[\\nACGT]>*) /, :g {\n        take ~.[0].subst(/\\n/,'', :g);\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 434,
              "line": 29,
              "column": 1
            },
            "end": {
              "offset": 933,
              "line": 51,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Independent Alleles\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/lia-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "aqTneCaN0DxUjqhFRhid9",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Independent Alleles\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Independent Alleles\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 48,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 48,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "asj1pK2R28grze9IYlZE9"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 49,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 49,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "fZMn2GSDPDOx5O-yBuvYv"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/lia/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/lia/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 69,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 107,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 108,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 121,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "2 1\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "2 1\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 122,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 130,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 131,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 145,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "0.684\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "0.684\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 146,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 156,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 166,
              "line": 20,
              "column": 1
            }
          },
          "id": "oO8vEHLXMhqAM-OKDdj8G"
        },
        {
          "text": "\nsub MAIN(Str $data = \"2 1\") {\n    my ($k, $N) = $data.split(\" \")».Int;\n\n    my %p = <AA Aa aa> Z=> <0 1 0>;\n    for ^$k {\n        %p =\n            :AA(2 * [+] %p<AA Aa aa> Z* <1/2 1/4 0>),\n            :Aa(2 * [+] %p<AA Aa aa> Z* <1/2 1/2 1/2>),\n            :aa(2 * [+] %p<AA Aa aa> Z* <0 1/4 1/2>),\n        ;\n    }\n    die unless 2**$k == [+] %p.values;\n    my $p = %p<Aa> / 2**$k;\n    $p *= $p;\n\n    my $total = 2**$k;\n    my $result = [+] map -> $i {\n        (1-$p)**($total - $i)*$p**$i * binomialcoefficient( $total, $i )\n    }, $N .. $total;\n\n    say $result.fmt(\"%.3f\");\n}\n\nsub postfix:<!>($a) { [*] 1..$a }\nsub binomialcoefficient($n, $k) {\n    $n! / (($n - $k)! * $k!);\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 166,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 887,
              "line": 50,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "",
    "description": "",
    "footer": "",
    "file": "work_examples/categories/rosalind/lrep-grondilu-p5.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "RHJ4Qp89nChx6tSLsEte0",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/perl\nuse strict;\nuse warnings;\n\n# parsing data\nmy $dna = <DATA>;\nmy $k = <DATA>;\nmy @edge = map [ split / +/ ], <DATA>;\n\n# enumerating nodes\nmy %node; for my $edge (@edge) { $node{$edge->[$_]}++ for 0, 1 }\nmy @node = keys %node;\n\n# enumerating parents\nmy %parent; $parent{$_->[1]} = $_->[0] for @edge;\n\n# building tree-like structure\nmy $tree = {};\n$tree->{$_->[0]}{$_->[1]} = [ @$_[2, 3] ] for @edge;\n\nsub count_offspring {\n    my $node = shift;\n    return 1 unless keys %{$tree->{$node}};\n    my $count;\n    $count += count_offspring($_) for keys %{$tree->{$node}};\n    return $count;\n}\n\nsub build_substr {\n    my $node = shift;\n    my $substr = '';\n    while (exists $parent{$node}) {\n        my $il = $tree->{$parent{$node}}{$node};\n        $substr = substr($dna, $$il[0]-1, $$il[1]) . $substr;\n        $node = $parent{$node};\n    }\n    return $substr;\n}\n\nmy $found = '';\nfor my $node (@node) {\n    my $count = count_offspring $node;\n    if ($count >= $k) {\n        my $substr = build_substr $node;\n        $found = $substr if length($substr) > length($found);\n    }\n}\nprint \"$found\\n\";\n\n\n__DATA__\nCATACATAC$\n2\nnode1 node2 1 1\nnode1 node7 2 1\nnode1 node14 3 3\nnode1 node17 10 1\nnode2 node3 2 4\nnode2 node6 10 1\nnode3 node4 6 5\nnode3 node5 10 1\nnode7 node8 3 3\nnode7 node11 5 1\nnode8 node9 6 5\nnode8 node10 10 1\nnode11 node12 6 5\nnode11 node13 10 1\nnode14 node15 6 5\nnode14 node16 10 1\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 1400,
              "line": 70,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Maximum Matchings and RNA Secondary Structures\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/mmch-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "IFm7eNriEPK39W_01vLzR",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Maximum Matchings and RNA Secondary Structures\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Maximum Matchings and RNA Secondary Structures\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "pJX0cDYRSQTh85xgBLOG_"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 76,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 95,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 76,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 95,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "tpOowg9gHEWsxy7zX8IPh"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/mmch/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/mmch/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 96,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 135,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 136,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 149,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": ">Rosalind_92\nAUGCUUC\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": ">Rosalind_92\n    AUGCUUC\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 150,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 179,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 180,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 194,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "6\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "6\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 195,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 201,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 211,
              "line": 21,
              "column": 1
            }
          },
          "id": "warscoKRDk0981S84tCi4"
        },
        {
          "text": "\nsub C($k, $n) {\n   if $k < 0 or $k > $n { return 0 }\n   elsif $k < 2 { return $n }\n   elsif $k == $n { return 1 }\n   else {\n       return (state @)[$n][$k] //= C($k-1, $n-1) + C($k, $n-1)\n   }\n}\n\nsub postfix:<!>(Int $n) { [*] 1 .. $n }\n\nmy $default-input = q:to/END/;\n    >Rosalind_92\n    AUGCUUC\n    END\n\nsub MAIN($input-file = Nil) {\n    my $input = $input-file ?? $input-file.IO.slurp !! $default-input;\n\n    my $rna = $default-input.lines[1..*-1].join;\n    given bag($rna.comb) {\n        say\n        C(.<A U>.min, .<A U>.max) * .<A U>.min!  *\n        C(.<C G>.min, .<C G>.max) * .<C G>.min!;\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 211,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 856,
              "line": 50,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Finding a Protein Motif\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/mprt-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "1z0XVqNMT976sPhU4__Or",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Finding a Protein Motif\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Finding a Protein Motif\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 52,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 52,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "73rlKCt4L3D7ZZbal3z90"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 53,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 72,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 53,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 72,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "IyN2Z6lP_A6OQJiLmZerO"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/mprt/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/mprt/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 73,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 112,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 113,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 126,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A2Z669\nB5ZC00\nP07204_TRBM_HUMAN\nP20840_SAG1_YEAST\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "A2Z669\n    B5ZC00\n    P07204_TRBM_HUMAN\n    P20840_SAG1_YEAST\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 127,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 193,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 194,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 208,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "B5ZC00\n85 118 142 306 395\nP07204_TRBM_HUMAN\n47 115 116 382 409\nP20840_SAG1_YEAST\n79 109 135 248 306 348 364 402 485 501 614\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "B5ZC00\n    85 118 142 306 395\n    P07204_TRBM_HUMAN\n    47 115 116 382 409\n    P20840_SAG1_YEAST\n    79 109 135 248 306 348 364 402 485 501 614\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 209,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 357,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 367,
              "line": 28,
              "column": 1
            }
          },
          "id": "ZFRzfok6dIkc6qzkeSs23"
        },
        {
          "text": "\nmy @default-data = qw{\n    A2Z669\n    B5ZC00\n    P07204_TRBM_HUMAN\n    P20840_SAG1_YEAST\n};\n\nsub MAIN($input-file = Nil) {\n    my @input = $input-file ?? $input-file.IO.lines !! @default-data;\n    my $N-glycosylation = rx / N <-[P]> <[ST]> <-[P]> /;\n    my $base-path = $*PROGRAM-NAME.IO.dirname;\n    for @input -> $id {\n        my $fasta-name = $*SPEC.catdir($base-path, \"$id.fasta\");\n        my $fasta = $fasta-name.IO.e\n            ?? $fasta-name.IO.slurp\n            !! qqx{wget -O - -q \"http://www.uniprot.org/uniprot/$id.fasta\"};\n        given join '', grep /^ <.alpha>+ $/, $fasta.lines {\n            when $N-glycosylation {\n                say $id;\n                my @arr = gather for m:overlap/$N-glycosylation/ { take .from + 1}\n                say \"{@arr}\"\n            }\n        }\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 367,
              "line": 28,
              "column": 1
            },
            "end": {
              "offset": 1209,
              "line": 56,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Inferring mRNA from Protein\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/mrna-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "W0a9Cc0Q27KqkQxJ337eQ",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Inferring mRNA from Protein\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Inferring mRNA from Protein\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 56,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 56,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "ooBeSotOIVQn9uC31jHJj"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 57,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 76,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 57,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 76,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "OzhnSWsPlOPvfE_ZJgiKN"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/mrna/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/mrna/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 77,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 116,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 117,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 130,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "MA\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "MA\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 131,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 138,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 139,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 153,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "12\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "12\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 154,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 161,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 171,
              "line": 20,
              "column": 1
            }
          },
          "id": "MTRuxBEfoEkB1T6F62jOE"
        },
        {
          "text": "\nconstant RNA-codon = Hash.new: <\nUUU F      CUU L      AUU I      GUU V\nUUC F      CUC L      AUC I      GUC V\nUUA L      CUA L      AUA I      GUA V\nUUG L      CUG L      AUG M      GUG V\nUCU S      CCU P      ACU T      GCU A\nUCC S      CCC P      ACC T      GCC A\nUCA S      CCA P      ACA T      GCA A\nUCG S      CCG P      ACG T      GCG A\nUAU Y      CAU H      AAU N      GAU D\nUAC Y      CAC H      AAC N      GAC D\nUAA Stop   CAA Q      AAA K      GAA E\nUAG Stop   CAG Q      AAG K      GAG E\nUGU C      CGU R      AGU S      GGU G\nUGC C      CGC R      AGC S      GGC G\nUGA Stop   CGA R      AGA R      GGA G\nUGG W      CGG R      AGG R      GGG G\n>;\n\nsub mrna($rna) {\n    my %count;\n    %count{.value}++ for RNA-codon;\n\n    my $count = 1;\n    for ($rna.comb, 'Stop').flat {\n        $count *= %count{$_};\n        $count %= 1_000_000;\n    }\n    return $count;\n}\n\nsub MAIN(Str $input = \"MA\") {\n    say mrna $input;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 171,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 1136,
              "line": 57,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Distances in Trees\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/nwck-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "suWsVbT8kZ1CejbKH6sMW",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Distances in Trees\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Distances in Trees\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 47,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 47,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "e8cTxgG6vacXQv4Yv8X8y"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 48,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 67,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 48,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 67,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "4e0H2n0ruokvz7uC2W_3m"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/nwck/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/nwck/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 68,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 107,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 108,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 121,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "(cat)dog;\ndog cat\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "(cat)dog;\n    dog cat\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 122,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 148,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "(dog,cat);\ndog cat\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "(dog,cat);\n    dog cat\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 149,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 176,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Note: a trailing newline is necessary in the input data so that the input is\ndivisible by three.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Note: a trailing newline is necessary in the input data so that the input is\ndivisible by three.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 177,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 274,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 275,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 289,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1 2\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "1 2\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 290,
                  "line": 24,
                  "column": 1
                },
                "end": {
                  "offset": 298,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 309,
              "line": 28,
              "column": 1
            }
          },
          "id": "bbZob2DHDS33WHWjjbp5S"
        },
        {
          "text": "\nmy $default-data = q:to/END/;\n    (cat)dog;\n    dog cat\n\n    (dog,cat);\n    dog cat\n\n    END\n\nsub MAIN($input-file = Nil) {\n    my $input = $input-file ?? $input-file.IO.slurp !! $default-data;\n    say gather for $input.lines.list -> $newick, $taxa, $ {\n        my ($a, $b) = $taxa.split: ' ';\n        my @token = $newick.comb: rx/ <.ident>+ | <[(),]> /;\n        Nil while @token.shift ne $a|$b;\n        my ($climbs, $descents) = 0 xx 2;\n        for @token {\n            last if $_ eq $a or $_ eq $b;\n            if /< , ) >/ {\n                if $descents > 0 { $descents-- }\n                else { $climbs++ }\n            }\n            if /< , ( >/ { $descents++ }\n        }\n        take $climbs + $descents;\n    }.join(\" \");\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 309,
              "line": 28,
              "column": 1
            },
            "end": {
              "offset": 1080,
              "line": 58,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Open Reading Frames\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/orf-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "AAOB_FQwpTFByVr385Gyf",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Open Reading Frames\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Open Reading Frames\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 48,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 48,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "TVMTHsw5jR_aZMMoNFPYF"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 49,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 49,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "UFrC_6W1ouNF5WC5JWZTM"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/orf/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/orf/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 69,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 107,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 108,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 121,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": ">Rosalind_99\nAGCCATGTAGCTAACTCAGGTTACATGGGGATGACCCCGCGACTTGGATTAGAGTCTCTTTTGGAATAAGCCTGAATGATCCGAGTAGCATCTCAG\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": ">Rosalind_99\n    AGCCATGTAGCTAACTCAGGTTACATGGGGATGACCCCGCGACTTGGATTAGAGTCTCTTTTGGAATAAGCCTGAATGATCCGAGTAGCATCTCAG\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 122,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 240,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 241,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 255,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "MLLGSFRLIPKETLIQVAGSSPCNLS\nM\nMGMTPRLGLESLLE\nMTPRLGLESLLE\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "MLLGSFRLIPKETLIQVAGSSPCNLS\n    M\n    MGMTPRLGLESLLE\n    MTPRLGLESLLE\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 256,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 329,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 339,
              "line": 24,
              "column": 1
            }
          },
          "id": "v4ut4RUoD0v1I49zh-8OG"
        },
        {
          "text": "\nconstant DNA-codon = Hash.new: <\n    TTT F      CTT L      ATT I      GTT V\n    TTC F      CTC L      ATC I      GTC V\n    TTA L      CTA L      ATA I      GTA V\n    TTG L      CTG L      ATG M      GTG V\n    TCT S      CCT P      ACT T      GCT A\n    TCC S      CCC P      ACC T      GCC A\n    TCA S      CCA P      ACA T      GCA A\n    TCG S      CCG P      ACG T      GCG A\n    TAT Y      CAT H      AAT N      GAT D\n    TAC Y      CAC H      AAC N      GAC D\n    TAA Stop   CAA Q      AAA K      GAA E\n    TAG Stop   CAG Q      AAG K      GAG E\n    TGT C      CGT R      AGT S      GGT G\n    TGC C      CGC R      AGC S      GGC G\n    TGA Stop   CGA R      AGA R      GGA G\n    TGG W      CGG R      AGG R      GGG G\n>;\n\nmy $default-input = \"AGCCATGTAGCTAACTCAGGTTACATGGGGATGACCCCGCGACTTGGATTAGAGTCTCTTTTGGAATAAGCCTGAATGATCCGAGTAGCATCTCAG\";\n\nsub revc($dna) {\n    $dna.comb.reverse.join.trans:\n    [<A C T G>] => [<T G A C>]\n}\n\nsub orf($dna) {\n    my %match;\n    my @match = (gather for $dna, revc $dna {\n        take .match: rx/ ATG [ <[ACGT]>**3 ]*? <before TAA|TAG|TGA> /, :overlap;\n    })>>.list.flat;\n\n    %match{\n        [~] map { DNA-codon{$_} }, .match: rx/ <[ACGT]>**3 /, :g\n    }++ for @match;\n\n    return %match.keys.sort;\n}\n\nsub MAIN(Str $input = $default-input) {\n    .say for orf $input;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 339,
              "line": 24,
              "column": 1
            },
            "end": {
              "offset": 1687,
              "line": 69,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Perfect Matchings and RNA Secondary Structures\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/pmch-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "E6c_KzNGrvFnawM_4f4Ce",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Perfect Matchings and RNA Secondary Structures\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Perfect Matchings and RNA Secondary Structures\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 75,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 75,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "kACGZ1mOPEu4kSS6cy8iO"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 76,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 95,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 76,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 95,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "pTmlKgQYvbscqLK8jGuD8"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/pmch/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/pmch/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 96,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 135,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 136,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 149,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": ">Rosalind_23\nAGCUAGUCAU\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": ">Rosalind_23\n    AGCUAGUCAU\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 150,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 182,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 183,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 197,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "12\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "12\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 198,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 205,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 215,
              "line": 21,
              "column": 1
            }
          },
          "id": "wRIevAt91rQfuxJvnv6M8"
        },
        {
          "text": "\nmy $default-input = q:to/END/;\n    >Rosalind_23\n    AGCUAGUCAU\n    END\n\nsub MAIN($input-file = Nil) {\n    my $input = $input-file ?? $input-file.IO.slurp !! $default-input;\n    my $rna = join '', grep /^ <[ACGU]>+ $/, $input.lines;\n\n    say [*] map { [*] 1 .. $rna.comb(/$_/).elems }, <U C>;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 215,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 550,
              "line": 35,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Partial Permutations\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/pper-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "bQkwkOqC1gP95prwbsSH3",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Partial Permutations\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Partial Permutations\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 49,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 49,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "RTnNJ0bFxdyGMhHJ87Guw"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 50,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 69,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 50,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 69,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "5_FYvMKwvNysGO5_6W3_U"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/pper/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/pper/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 70,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 109,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 110,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 123,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "21 7\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "21 7\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 124,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 133,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 134,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 148,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "51200\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "51200\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 149,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 159,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 169,
              "line": 20,
              "column": 1
            }
          },
          "id": "s6HAFH87obfYl-49lrJg6"
        },
        {
          "text": "\nsub pper($n, $k) { [*] $n-$k+1 .. $n }\n\nsub MAIN(Str $input = \"21 7\") {\n    say pper(| $input.split: \" \") % 1_000_000;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 169,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 331,
              "line": 28,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Introduction to Random Strings\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/prob-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "H7W2_hIP3ytxvW3Fl6g9f",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Introduction to Random Strings\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Introduction to Random Strings\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 59,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 59,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "QhKK3Wx1nq41brMAhfeyT"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 60,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 79,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 60,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 79,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "rTwd9u1m_PfRXtB19I0qi"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/prob/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/prob/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 80,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 119,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 120,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 133,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "ACGATACAA\n0.129 0.287 0.423 0.476 0.641 0.742 0.783\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "ACGATACAA\n    0.129 0.287 0.423 0.476 0.641 0.742 0.783\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 134,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 194,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 195,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 209,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "-5.737 -5.217 -5.263 -5.360 -5.958 -6.628 -7.009\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "-5.737 -5.217 -5.263 -5.360 -5.958 -6.628 -7.009\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 210,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 263,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 273,
              "line": 21,
              "column": 1
            }
          },
          "id": "Gdn70Axv29AAQm2lQt58v"
        },
        {
          "text": "\nmy @sample = \"ACGATACAA\n0.129 0.287 0.423 0.476 0.641 0.742 0.783\".split: \"\\n\";\n\nsub MAIN($input-file = Nil) {\n    my ($dna, $gc-content-string) = $input-file ?? $input-file.IO.lines !! @sample;\n    my @A = $gc-content-string.split(\" \");\n    my @B = map { log(prob :$dna, :gc-content($_))/log(10) }, @A;\n\n    say \"{@B».fmt: \"%.3f\"}\";\n}\n\nsub prob(:$dna, :$gc-content) {\n    1/2**$dna.chars * [*] map {\n        $_ eq 'G'|'C' ?? $gc-content !! (1 - $gc-content)\n    }, $dna.comb;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 273,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 793,
              "line": 40,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Quartets\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/qrt-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "geQRceGi2H2Jy-RwUQ9Vk",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Quartets\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Quartets\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 37,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 37,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "rIZSS7OYpRgHOhcVSvmu8"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 38,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 57,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 38,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 57,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "aYDOEqv7zzfgrIM7MN2Uf"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/qrt/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/qrt/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 58,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 96,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 97,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 110,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "cat dog elephant ostrich mouse rabbit robot\n01xxx00\nx11xx00\n111x00x\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "cat dog elephant ostrich mouse rabbit robot\n    01xxx00\n    x11xx00\n    111x00x\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 111,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 195,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 196,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 210,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "{elephant, dog} {rabbit, robot}\n{cat, dog} {mouse, rabbit}\n{mouse, rabbit} {cat, elephant}\n{dog, elephant} {mouse, rabbit}\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "{elephant, dog} {rabbit, robot}\n    {cat, dog} {mouse, rabbit}\n    {mouse, rabbit} {cat, elephant}\n    {dog, elephant} {mouse, rabbit}\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 211,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 350,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 360,
              "line": 26,
              "column": 1
            }
          },
          "id": "uiaRFp2AJvwrBlxzrwdUw"
        },
        {
          "text": "\nproto combine (Int, @) {*}\nmulti combine (0,  @)  { [] }\nmulti combine ($,  []) { () }\nmulti combine ($n, [$head, *@tail]) {\n    gather {\n        take [$head, @$_] for combine($n-1, @tail);\n        take [ @$_ ] for combine($n, @tail);\n    }\n}\n \nsub ncombine($n, $k) {\n    (state@)[$n][$k] //= combine($k, [^$n])\n}\n\nmy $default-input = q:to/END/;\n    cat dog elephant ostrich mouse rabbit robot\n    01xxx00\n    x11xx00\n    111x00x\n    END\n\nsub MAIN($input-file = Nil) {\n    my $input = $input-file ?? $input-file.IO.slurp !! $default-input;\n    my @data = $input.lines;\n\n    my %seen;\n    my @taxa = @data.shift.words;\n    for @data -> $line {\n        my %h = @taxa Z=> $line.comb;\n        my @classif =\n        classify( { %h{$_} }, @taxa )<0 1>;\n        next if any(@classif) < 2;\n        note \"processing $line\";\n        my @a = map { [ @classif[0][@$_] ] }, ncombine(@classif[0].elems, 2)[];\n        my @b = map { [ @classif[1][@$_] ] }, ncombine(@classif[1].elems, 2)[];\n        for @a X @b -> $a, $b {\n            my $left = $a.sort.join(', ');\n            my $right = $b.sort.join(', ');\n            next if %seen{$left}{$right}++ ?| %seen{$right}{$left}++;\n            say '{' ~ $left ~ '} {' ~ $right ~ '}';\n        }\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 360,
              "line": 26,
              "column": 1
            },
            "end": {
              "offset": 1635,
              "line": 72,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "file": "work_examples/categories/rosalind/README.md",
    "sources": [],
    "node": {
      "type": "block",
      "id": "yIyS03CKnPeeW9nrYlMjZ",
      "margin": "",
      "name": "root",
      "content": [
        {
          "type": "block",
          "id": "ZzZ86XkJ4s4RdSU-O0M-m",
          "margin": "",
          "level": 1,
          "name": "head",
          "location": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 11,
              "offset": 10
            }
          },
          "content": [
            "Rosalind"
          ]
        },
        {
          "type": "para",
          "id": "bVNc5dWQCcAZx_HrJJtr4",
          "margin": "",
          "location": {
            "start": {
              "line": 3,
              "column": 1,
              "offset": 12
            },
            "end": {
              "line": 3,
              "column": 22,
              "offset": 33
            }
          },
          "text": "text",
          "content": [
            {
              "meta": "http://rosalind.info/",
              "type": "fcode",
              "name": "L",
              "content": [
                "http://rosalind.info/"
              ]
            }
          ]
        },
        {
          "type": "para",
          "id": "gC4TzeYPb1u0bLdubWYZ5",
          "margin": "",
          "location": {
            "start": {
              "line": 5,
              "column": 1,
              "offset": 35
            },
            "end": {
              "line": 6,
              "column": 62,
              "offset": 170
            }
          },
          "text": "text",
          "content": [
            "This is a directory to post solutions to Rosalind problems (Rosalind is a\nProject Euler inspired platform for teaching bioinformatics)."
          ]
        },
        {
          "type": "para",
          "id": "h6vV0M4VkEoPP4zVJNsh8",
          "margin": "",
          "location": {
            "start": {
              "line": 8,
              "column": 1,
              "offset": 172
            },
            "end": {
              "line": 11,
              "column": 25,
              "offset": 352
            }
          },
          "text": "text",
          "content": [
            "** SPOILER WARNING **\nIf you intend to learn bioinformatics with Rosalind, you'll have\nto resist the temptation of reading the solutions in this directory.\n** YOU'VE BEEN WARNED **"
          ]
        },
        {
          "type": "para",
          "id": "lJ5GhM3TcJbi1JXJYIvVk",
          "margin": "",
          "location": {
            "start": {
              "line": 13,
              "column": 1,
              "offset": 354
            },
            "end": {
              "line": 14,
              "column": 42,
              "offset": 472
            }
          },
          "text": "text",
          "content": [
            "Use the file format ",
            {
              "type": "fcode",
              "name": "C",
              "content": [
                "<id>-<author>.pl"
              ]
            },
            " replacing ",
            {
              "type": "fcode",
              "name": "C",
              "content": [
                "<id>"
              ]
            },
            " with the (lowercase)\nproblem ID and ",
            {
              "type": "fcode",
              "name": "C",
              "content": [
                "<author>"
              ]
            },
            " with your name."
          ]
        },
        {
          "type": "para",
          "id": "frUY-F_2ZT7Au2QPOy1J3",
          "margin": "",
          "location": {
            "start": {
              "line": 16,
              "column": 1,
              "offset": 474
            },
            "end": {
              "line": 16,
              "column": 69,
              "offset": 542
            }
          },
          "text": "text",
          "content": [
            "For a given problem ",
            {
              "type": "fcode",
              "name": "C",
              "content": [
                "<id>"
              ]
            },
            ", you can find its full description there:"
          ]
        },
        {
          "type": "para",
          "id": "v_h9tR32TrxKquEyeHy1d",
          "margin": "",
          "location": {
            "start": {
              "line": 18,
              "column": 1,
              "offset": 544
            },
            "end": {
              "line": 18,
              "column": 35,
              "offset": 578
            }
          },
          "text": "text",
          "content": [
            {
              "meta": "http://rosalind.info/problems/",
              "type": "fcode",
              "name": "L",
              "content": [
                "http://rosalind.info/problems/"
              ]
            },
            {
              "type": "block",
              "id": "758r1Stoje_HtR1rQFtOB",
              "margin": "",
              "name": "Html",
              "location": {
                "start": {
                  "line": 18,
                  "column": 31,
                  "offset": 574
                },
                "end": {
                  "line": 18,
                  "column": 35,
                  "offset": 578
                }
              },
              "content": [
                {
                  "type": "verbatim",
                  "value": "<id>"
                }
              ]
            }
          ]
        },
        {
          "type": "para",
          "id": "3iO_v2nceIikr73x4-fwc",
          "margin": "",
          "location": {
            "start": {
              "line": 20,
              "column": 1,
              "offset": 580
            },
            "end": {
              "line": 20,
              "column": 10,
              "offset": 589
            }
          },
          "text": "text",
          "content": [
            "Have fun!"
          ]
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Complementing a Strand of DNA\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/revc-gerdr.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "sLxC1VVRsyMaZL1-x-N59",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Complementing a Strand of DNA\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Complementing a Strand of DNA\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 58,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 58,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "bbDvWQzigGaH978K8-RKA"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "grondilu\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "grondilu\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 59,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 76,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 59,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 76,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "WMtRCGvzOp_-1BHuOmlZ1"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/revc/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/revc/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 77,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 116,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 117,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 130,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "AAAACCCGGT\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "AAAACCCGGT\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 131,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 146,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 147,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 161,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "ACCGGGTTTT\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "ACCGGGTTTT\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 162,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 177,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 187,
              "line": 20,
              "column": 1
            }
          },
          "id": "6XxRTHC6zoYD6X1Q0bfgk"
        },
        {
          "text": "\nsub MAIN($input = \"AAAACCCGGT\") {\n    .flip.trans('ACGT' => 'TGCA').say given $input;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 187,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 316,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Transcribing DNA into RNA\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/rna-gerdr.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "op9qTmdJpN0XX1RKjBjbX",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Transcribing DNA into RNA\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Transcribing DNA into RNA\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 54,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 54,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "BBB31jMf3_EVdt5stdNL9"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "gerdr\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "gerdr\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 55,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 69,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 55,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 69,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "6icjjA7SzLAgi5_RapiGa"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/rna/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/rna/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 70,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 108,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 109,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 122,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "GATGGAACTTGACTACGTAAATT\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "GATGGAACTTGACTACGTAAATT\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 123,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 151,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 152,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 166,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "GAUGGAACUUGACUACGUAAAUU\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "GAUGGAACUUGACUACGUAAAUU\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 167,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 195,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 205,
              "line": 20,
              "column": 1
            }
          },
          "id": "jcus0mbgVTl7NadbvM89y"
        },
        {
          "text": "\nsub MAIN(Str $input = \"GATGGAACTTGACTACGTAAATT\") {\n    .trans('T' => 'U').say given $input;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 205,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 340,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Matching Random Motifs\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/rstr-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "EyDemdcwLDtya6RBBA6-x",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Matching Random Motifs\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Matching Random Motifs\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 51,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 51,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "nE08WJcGChxKEt1je3ha9"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 52,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 52,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Dvd1EeoXumY0HSFiIrpRU"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/rstr/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/rstr/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 72,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 111,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 112,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 125,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "90000 0.6\nATAGCCGA\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "90000 0.6\n    ATAGCCGA\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 126,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 153,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 154,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 168,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "0.689\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "0.689\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 169,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 179,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 189,
              "line": 21,
              "column": 1
            }
          },
          "id": "e-48v-z-0SHxPw_bQazNX"
        },
        {
          "text": "\nmy @default-input = (\"90000 0.6\", \"ATAGCCGA\");\n\nsub MAIN($input-file = Nil) {\n    my @data = $input-file ?? $input-file.IO.lines !! @default-input;\n    my ($N, $gc-content) = @data.shift.split: \" \";\n    my $dna = @data.shift;\n\n    my $result = 1 - exp ($N * log(1-prob :$dna, :$gc-content));\n    say $result.fmt(\"%.3f\");\n}\n\nsub prob(:$dna, :$gc-content) {\n    1/2**$dna.chars * [*] map {\n        $_ eq 'G'|'C' ?? $gc-content !! (1 - $gc-content)\n    }, $dna.comb\n}\n\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 189,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 696,
              "line": 41,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Sex-Linked Inheritance\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/sexl-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "eOXGf93J4aACOR_d5AOib",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Sex-Linked Inheritance\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Sex-Linked Inheritance\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 51,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 51,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "L0rjnhA_fAI5_V6_KrB69"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 52,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 52,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "PWBeZ69lJdIfCAhBVNstc"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/sexl/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/sexl/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 72,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 111,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 112,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 125,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "0.1 0.5 0.8\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "0.1 0.5 0.8\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 126,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 142,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 143,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 157,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "0.18 0.5 0.32\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "0.18 0.5 0.32\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 158,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 176,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 186,
              "line": 20,
              "column": 1
            }
          },
          "id": "z-68Bt7vZVA_UQnMjjkSb"
        },
        {
          "text": "\nsub MAIN(Str $input = \"0.1 0.5 0.8\") {\n    say \"{map { 2*$^x*(1-$x) }, $input.split(' ')».Num».round(0.01)}\";\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 186,
              "line": 20,
              "column": 1
            },
            "end": {
              "offset": 339,
              "line": 26,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Using the Spectrum Graph to Infer Peptides\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/sgra-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "qn8G0s6_Qs9lXcZJsG04h",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Using the Spectrum Graph to Infer Peptides\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Using the Spectrum Graph to Infer Peptides\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "hFLBgQIHiepnQYndm8z7s"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 72,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 91,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 72,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 91,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "t47OHRFapy57t6rraLKDJ"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/sgra/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/sgra/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 92,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 131,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 132,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 145,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "3524.8542\n3623.5245\n3710.9335\n3841.974\n3929.00603\n3970.0326\n4026.05879\n4057.0646\n4083.08025\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "3524.8542\n    3623.5245\n    3710.9335\n    3841.974\n    3929.00603\n    3970.0326\n    4026.05879\n    4057.0646\n    4083.08025\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 146,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 274,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 275,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 289,
                  "line": 24,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "WMSPG\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "WMSPG\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 290,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 300,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 310,
              "line": 28,
              "column": 1
            }
          },
          "id": "Jl2ntiiW5wqp-QmmG_vHd"
        },
        {
          "text": "\nmy $default-input = q:to/END/;\n    3524.8542\n    3623.5245\n    3710.9335\n    3841.974\n    3929.00603\n    3970.0326\n    4026.05879\n    4057.0646\n    4083.08025\n    END\n\nsub MAIN($input-file = Nil) {\n    my $input = $input-file ?? $input-file.IO.slurp !! $default-input;\n\n    my $mass-table-file = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname,\n                                        \"monoisotopic-mass-table.txt\");\n    my %mass-table = slurp($mass-table-file).words;\n    my @L = sort $input.lines;\n    my %invert-mass-table = %mass-table.invert.hash;\n\n    sub spectrum-graph(@L) {\n        my %edges;\n        for ^@L -> $i {\n            note\n            my $u = @L[$i];\n            for @L[$i+1..*-1] -> $v {\n                my $mass = %invert-mass-table{$v - $u};\n                %edges{$u}.push: {\n                    next-mass => $v,\n                    amino-acid => $mass;\n                } if defined $mass;\n            }\n        }\n        return %edges;\n    }\n\n    my %graph = spectrum-graph(@L);\n    sub find-protein($initial-mass) {\n        return '' unless %graph{$initial-mass} :exists;\n        gather for %graph{$initial-mass}[] {\n            take .<amino-acid> «~« find-protein(.<next-mass>);\n        }\n    }\n\n    say max :by(*.chars), map &find-protein, @L;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 310,
              "line": 28,
              "column": 1
            },
            "end": {
              "offset": 1617,
              "line": 78,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Inferring Protein from Spectrum\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/spec-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "4qaDO6XXyij2AzljLWyde",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Inferring Protein from Spectrum\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Inferring Protein from Spectrum\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 60,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 60,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "IjLZWdoj2sksG-x3cHQPz"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 61,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 80,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 61,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 80,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "M0QDHcMLCMF_J2UHhda-h"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/spec/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/spec/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 81,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 120,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 121,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 134,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "3524.8542\n3710.9335\n3841.974\n3970.0326\n4057.0646\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "3524.8542\n    3710.9335\n    3841.974\n    3970.0326\n    4057.0646\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 135,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 204,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 205,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 219,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "WMQS\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "WMQS\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 220,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 229,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 239,
              "line": 24,
              "column": 1
            }
          },
          "id": "FfYasaPSylImLvnICWsDc"
        },
        {
          "text": "\nconstant monoisotopic-mass-table = Hash.new: <\n    A   71.03711\n    C   103.00919\n    D   115.02694\n    E   129.04259\n    F   147.06841\n    G   57.02146\n    H   137.05891\n    I   113.08406\n    K   128.09496\n    L   113.08406\n    M   131.04049\n    N   114.04293\n    P   97.05276\n    Q   128.05858\n    R   156.10111\n    S   87.03203\n    T   101.04768\n    V   99.06841\n    W   186.07931\n    Y   163.06333\n>;\n\nmy @default-data = qw:to/END/;\n    3524.8542\n    3710.9335\n    3841.974\n    3970.0326\n    4057.0646\n    END\n\nsub spec(@weight, :$accuracy = .01) {\n    my @a = my @b = sort *.Num, @weight;\n    join '', gather\n    for @b[1..*] Z- @b[0..*] -> $mass {\n        take .key given\n        first { abs($_.value - $mass) < $accuracy },\n        monoisotopic-mass-table;\n    }\n}\n\nsub MAIN($input-file = Nil) {\n    my @weights = $input-file ?? $input-file.IO.lines !! @default-data;\n    say spec @weights;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 239,
              "line": 24,
              "column": 1
            },
            "end": {
              "offset": 1180,
              "line": 72,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Finding a Spliced Motif\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/sseq-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "q5aZLZHHW1ZGY6nZfWXlh",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Finding a Spliced Motif\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Finding a Spliced Motif\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 52,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 52,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "ydbkIW8iY6TLa5eCVO4nk"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 53,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 72,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 53,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 72,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "7jaGk6lSxMS3LBKIUhGJ4"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/sseq/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/sseq/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 73,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 112,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 113,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 126,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "ACGTACGTGACG\nGTA\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "ACGTACGTGACG\n    GTA\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 127,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 152,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 153,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 167,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "3 4 5\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "3 4 5\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 168,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 178,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 188,
              "line": 21,
              "column": 1
            }
          },
          "id": "DVc2lSWxLxD2yIh5P478H"
        },
        {
          "text": "\nmy @default-data = qw{ACGTACGTGACG GTA};\n\nsub MAIN($input-file = Nil) {\n    my ($dna, $search) = $input-file ?? $input-file.IO.lines !! @default-data;\n\n    my $pos = 0;\n    my @arr = gather for $search.comb -> $c {\n        $dna ~~ m:c($pos)/$c/;\n        take $pos = $/.from + 1;\n    }\n    say \"{@arr}\"\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 188,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 533,
              "line": 36,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Finding a Motif in DNA\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/subs-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "sudroXzg3tLulRkyghyTy",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Finding a Motif in DNA\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Finding a Motif in DNA\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 51,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 51,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "DT7ki5w1toUinjI6HxCkP"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 52,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 52,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "pUO3-LMIhjo3Te_u9_RBG"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/subs/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/subs/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 72,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 111,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 112,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 125,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "GATATATGCATATACTT\nATAT\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "GATATATGCATATACTT\n    ATAT\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 126,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 157,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 158,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 172,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "2 4 10\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "2 4 10\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 173,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 184,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 194,
              "line": 21,
              "column": 1
            }
          },
          "id": "01MJSlmRskqAjPPv_fxJ8"
        },
        {
          "text": "\nmy @default-data = qw{GATATATGCATATACTT ATAT};\n\nsub MAIN($input-file = Nil) {\n    my ($S, $t) = $input-file ?? $input-file.IO.lines !! @default-data;\n    my @arr = gather for $S.match(/$t/, :overlap) { take 1+.from };\n    say \"{@arr}\"\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 194,
              "line": 21,
              "column": 1
            },
            "end": {
              "offset": 472,
              "line": 31,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Encoding Suffix Trees\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/suff-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "C9H-NWPg3Eo_lMB78m81E",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Encoding Suffix Trees\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Encoding Suffix Trees\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 50,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 50,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "tchoRD4KAGDcYoSECNzMS"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 51,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 70,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 51,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 70,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "EBMwcol7k8yqHtA2qfEqD"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/suff/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/suff/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 71,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 110,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 111,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 124,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "ATAAATG$\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "ATAAATG$\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 125,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 138,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 139,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 153,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "AAATG$\nG$\nT\nATG$\nTG$\nA\nA\nAAATG$\nG$\nT\nG$\n$\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "AAATG$\n    G$\n    T\n    ATG$\n    TG$\n    A\n    A\n    AAATG$\n    G$\n    T\n    G$\n    $\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 154,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 244,
                  "line": 29,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 254,
              "line": 31,
              "column": 1
            }
          },
          "id": "L-Bc84N3VqPCk8UkPmfhh"
        },
        {
          "text": "\nsub suffixes(Str $str) { map *.flip, [\\~] $str.flip.comb }\nsub suffix-tree(@a) {\n    @a == 0 ?? [] !!\n    @a == 1 ?? hash @a[0] => [] !!\n    hash gather for @a.classify(*.substr(0, 1)) {\n        my $subtree = suffix-tree([ grep *.chars, map *.substr(1), .value[] ]);\n        if $subtree.elems == 1 {\n            my $pair = $subtree.pick;\n            take .key ~ $pair.key => $pair.value;\n        } else {\n            take .key => $subtree;\n        }\n    }\n}\n\nsub show-edges($tree) {\n    return if $tree.elems == 0;\n    for $tree[] {\n        say .key;\n        show-edges .value;\n    }\n}\n\nsub MAIN(Str $input = 'ATAAATG$') {\n    show-edges suffix-tree suffixes $input;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 254,
              "line": 31,
              "column": 1
            },
            "end": {
              "offset": 964,
              "line": 60,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Transitions and Transversions\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/tran-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "6OM5olgZE89E5TKrFUe44",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Transitions and Transversions\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Transitions and Transversions\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 58,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 58,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "kVMlXoiutw1gGXNn1rZ52"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 59,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 78,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 59,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 78,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "7ITE4hkmNspU6iydD7mN1"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/tran/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/tran/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 79,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 118,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 119,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 132,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": ">Rosalind_0209\nGCAACGCACAACGAAAACCCTTAGGGACTGGATTATTTCGTGATCGTTGTAGTTATTGGA\nAGTACGGGCATCAACCCAGTT\n>Rosalind_2200\nTTATCTGACAAAGAAAGCCGTCAACGGCTGGATAATTTCGCGATCGTGCTGGTTACTGGC\nGGTACGAGTGTTCCTTTGGGT\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": ">Rosalind_0209\n    GCAACGCACAACGAAAACCCTTAGGGACTGGATTATTTCGTGATCGTTGTAGTTATTGGA\n    AGTACGGGCATCAACCCAGTT\n    >Rosalind_2200\n    TTATCTGACAAAGAAAGCCGTCAACGGCTGGATAATTTCGCGATCGTGCTGGTTACTGGC\n    GGTACGAGTGTTCCTTTGGGT\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 133,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 353,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Sample output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Sample output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 354,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 368,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "1.21428571429\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "1.21428571429\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 369,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 387,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 397,
              "line": 25,
              "column": 1
            }
          },
          "id": "y09fZJue9C0mGs8yxAr9u"
        },
        {
          "text": "\nmy $default-input = q:to/END/;\n    >Rosalind_0209\n    GCAACGCACAACGAAAACCCTTAGGGACTGGATTATTTCGTGATCGTTGTAGTTATTGGA\n    AGTACGGGCATCAACCCAGTT\n    >Rosalind_2200\n    TTATCTGACAAAGAAAGCCGTCAACGGCTGGATAATTTCGCGATCGTGCTGGTTACTGGC\n    GGTACGAGTGTTCCTTTGGGT\n    END\n\nsub MAIN($input-file = Nil) {\n    my $input = $input-file ?? $input-file.IO.slurp !! $default-input;\n    given $input {\n        my @dna;\n        for m:g/ '>Rosalind_' <.digit>**4 \\n ( <[ACGT\\n]>+ ) / {\n            push @dna, $_[0].subst: \"\\n\", '', :g;\n        }\n        my ($transitions, $transversions);\n        for (@dna[0].comb Z @dna[1].comb).flat -> $a, $b {\n            next unless $a ne $b;\n            if \"$a$b\" eq any <AG GA CT TC> { $transitions++ }\n            else { $transversions++ }\n        }\n        say ($transitions/$transversions).fmt(\"%0.11f\");\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 397,
              "line": 25,
              "column": 1
            },
            "end": {
              "offset": 1271,
              "line": 53,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Introduction to Pattern Matching\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/rosalind/trie-grondilu.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "WL9JyINdA6ptIKB2lvmo4",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Introduction to Pattern Matching\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Introduction to Pattern Matching\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 61,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 61,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "kpNzm_9iH1UzFs1RSL4pR"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "L. Grondin\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "L. Grondin\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 62,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 81,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 62,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 81,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "TRWZehymIuGkhZQOAHg43"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Problem\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Problem\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 82,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 97,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 82,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 97,
                  "line": 10,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Problem"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Given a collection of strings, their trie (often pronounced \"try\" to avoid\nambiguity with the general term tree) is a rooted tree formed as follows.\nFor every unique first symbol in the strings, an edge is formed connecting\nthe root to a new vertex. This symbol is then used to label the edge.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Given a collection of strings, their trie (often pronounced \"try\" to avoid\nambiguity with the general term tree) is a rooted tree formed as follows.\nFor every unique first symbol in the strings, an edge is formed connecting\nthe root to a new vertex. This symbol is then used to label the edge.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 98,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 392,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "We may then iterate the process by moving down one level as follows. Say\nthat an edge connecting the root to a node I<v> is labeled with 'A'; then we\ndelete the first symbol from every string in the collection beginning with\n'A' and then treat I<v> as our root. We apply this process to all nodes that\nare adjacent to the root, and then we move down another level and continue.\nSee Figure 1 for an example of a trie.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "We may then iterate the process by moving down one level as follows. Say\nthat an edge connecting the root to a node "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "v"
                    }
                  ],
                  "type": "fcode",
                  "name": "I"
                },
                {
                  "type": "text",
                  "value": " is labeled with 'A'; then we\ndelete the first symbol from every string in the collection beginning with\n'A' and then treat "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "v"
                    }
                  ],
                  "type": "fcode",
                  "name": "I"
                },
                {
                  "type": "text",
                  "value": " as our root. We apply this process to all nodes that\nare adjacent to the root, and then we move down another level and continue.\nSee Figure 1 for an example of a trie.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 393,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 810,
                  "line": 22,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "As a result of this method of construction, the symbols along the edges of\nany path in the trie from the root to a leaf will spell out a unique string\nfrom the collection, as long as no string is a prefix of another in the\ncollection (this would cause the first string to be encoded as a path\nterminating at an internal node).\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "As a result of this method of construction, the symbols along the edges of\nany path in the trie from the root to a leaf will spell out a unique string\nfrom the collection, as long as no string is a prefix of another in the\ncollection (this would cause the first string to be encoded as a path\nterminating at an internal node).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 811,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 1138,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Given: A list of at most 100 DNA strings of length at most 100 bp, none of\nwhich is a prefix of another.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Given: A list of at most 100 DNA strings of length at most 100 bp, none of\nwhich is a prefix of another.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1139,
                  "line": 29,
                  "column": 1
                },
                "end": {
                  "offset": 1244,
                  "line": 31,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Return: The adjacency list corresponding to the trie I<T> for these\npatterns, in the following format. If I<T> has I<n> nodes, first label the\nroot with 1 and then label the remaining nodes with the integers 2 through\nI<n> in any order you like. Each edge of the adjacency list of I<T> will be\nencoded by a triple containing the integer representing the edge's parent\nnode, followed by the integer representing the edge's child node, and\nfinally the symbol labeling the edge.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Return: The adjacency list corresponding to the trie "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "T"
                    }
                  ],
                  "type": "fcode",
                  "name": "I"
                },
                {
                  "type": "text",
                  "value": " for these\npatterns, in the following format. If "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "T"
                    }
                  ],
                  "type": "fcode",
                  "name": "I"
                },
                {
                  "type": "text",
                  "value": " has "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "n"
                    }
                  ],
                  "type": "fcode",
                  "name": "I"
                },
                {
                  "type": "text",
                  "value": " nodes, first label the\nroot with 1 and then label the remaining nodes with the integers 2 through\n"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "n"
                    }
                  ],
                  "type": "fcode",
                  "name": "I"
                },
                {
                  "type": "text",
                  "value": " in any order you like. Each edge of the adjacency list of "
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "T"
                    }
                  ],
                  "type": "fcode",
                  "name": "I"
                },
                {
                  "type": "text",
                  "value": " will be\nencoded by a triple containing the integer representing the edge's parent\nnode, followed by the integer representing the edge's child node, and\nfinally the symbol labeling the edge.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1245,
                  "line": 32,
                  "column": 1
                },
                "end": {
                  "offset": 1721,
                  "line": 39,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://rosalind.info/problems/trie/>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://rosalind.info/problems/trie/"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1722,
                  "line": 40,
                  "column": 1
                },
                "end": {
                  "offset": 1761,
                  "line": 41,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Sample dataset:\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Sample dataset:\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 1762,
                      "line": 42,
                      "column": 1
                    },
                    "end": {
                      "offset": 1785,
                      "line": 43,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 1762,
                  "line": 42,
                  "column": 1
                },
                "end": {
                  "offset": 1785,
                  "line": 43,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Sample-dataset:"
            },
            {
              "type": "blankline"
            },
            {
              "text": "ATAGA\nATC\nGAT\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "ATAGA\n    ATC\n    GAT\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1786,
                  "line": 44,
                  "column": 1
                },
                "end": {
                  "offset": 1812,
                  "line": 47,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Sample output:\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Sample output:\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 1813,
                      "line": 48,
                      "column": 1
                    },
                    "end": {
                      "offset": 1835,
                      "line": 49,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 1813,
                  "line": 48,
                  "column": 1
                },
                "end": {
                  "offset": 1835,
                  "line": 49,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Sample-output:"
            },
            {
              "type": "blankline"
            },
            {
              "text": "1 2 A\n2 3 T\n3 4 A\n4 5 G\n5 6 A\n3 7 C\n1 8 G\n8 9 A\n9 10 T\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "1 2 A\n    2 3 T\n    3 4 A\n    4 5 G\n    5 6 A\n    3 7 C\n    1 8 G\n    8 9 A\n    9 10 T\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1836,
                  "line": 50,
                  "column": 1
                },
                "end": {
                  "offset": 1927,
                  "line": 59,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Usage:\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Usage:\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 1928,
                      "line": 60,
                      "column": 1
                    },
                    "end": {
                      "offset": 1942,
                      "line": 61,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 1928,
                  "line": 60,
                  "column": 1
                },
                "end": {
                  "offset": 1942,
                  "line": 61,
                  "column": 1
                }
              },
              "level": "2",
              "id": "Usage:"
            },
            {
              "type": "blankline"
            },
            {
              "text": "$ perl6 trie-grondilu.pl\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "$ perl6 trie-grondilu.pl\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1943,
                  "line": 62,
                  "column": 1
                },
                "end": {
                  "offset": 1972,
                  "line": 63,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "or\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "or\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1973,
                  "line": 64,
                  "column": 1
                },
                "end": {
                  "offset": 1976,
                  "line": 65,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "$ perl6 trie-grondilu.pl --data=\"GAT ATC\"\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "$ perl6 trie-grondilu.pl --data=\"GAT ATC\"\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1977,
                  "line": 66,
                  "column": 1
                },
                "end": {
                  "offset": 2023,
                  "line": 67,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 2033,
              "line": 69,
              "column": 1
            }
          },
          "id": "d2GEvqtA_RbKh8HxA_R6u"
        },
        {
          "text": "\nmy Int $node = 1;\n\nsub trie(@string is copy, $root = $node) {\n    @string .= grep: *.chars;\n    return {} if not @string;\n    hash gather for @string.classify(*.substr: 0, 1).sort(*.key)>>.kv -> ($k, $v) {\n        my @value = map *.substr(1), grep *.chars > 1, $v[];\n        say \"$root {++$node} $k\";\n        if (@value) {\n            take $k => &?ROUTINE( @value, $node );\n        }\n    }\n}\n\nsub MAIN(:$data = \"ATAGA ATC GAT\") {\n    my @input = $data.split(/\\s+/);\n    trie @input;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 2033,
              "line": 69,
              "column": 1
            },
            "end": {
              "offset": 2559,
              "line": 90,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "",
    "description": "",
    "footer": "",
    "file": "work_examples/categories/shootout/fasta.p5.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "lAoBlE6QieC9prxwnE-ac",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "# The Computer Language Benchmarks game\n# http://shootout.alioth.debian.org/\n#\n# contributed by David Pyke\n# tweaked by Danny Sauer\n# optimized by Steffen Mueller\n# tweaked by Kuang-che Wu\n\nuse strict;\nuse warnings;\nuse constant IM => 139968;\nuse constant IA => 3877;\nuse constant IC => 29573;\n\nuse constant LINELENGTH => 60;\n\nmy $LAST = 42;\nsub gen_random {\n    return map {( ($_[0] * ($LAST = ($LAST * IA + IC) % IM)) / IM )} 1..($_[1]||1);\n}\n\nsub makeCumulative {\n    my $genelist = shift;\n    my $cp = 0.0;\n\n    $_->[1] = $cp += $_->[1] foreach @$genelist;\n}\n\nsub selectRandom {\n    my $genelist = shift;\n    my $number = shift || 1;\n    my @r = gen_random(1, $number);\n\n    my $s;\n    foreach my $r (@r) {\n        foreach (@$genelist){\n            if ($r < $_->[1]) { $s .= $_->[0]; last; }\n        }\n    }\n\n    return $s;\n}\n\n\nsub makeRandomFasta {\n    my ($id, $desc, $n, $genelist) = @_;\n\n    print \">\", $id, \" \", $desc, \"\\n\";\n\n    # print whole lines\n    foreach (1 .. int($n / LINELENGTH) ){\n        print selectRandom($genelist, LINELENGTH), \"\\n\";\n    }\n    # print remaining line (if required)\n    if ($n % LINELENGTH){\n        print selectRandom($genelist, $n % LINELENGTH), \"\\n\";\n    }\n}\n\nsub makeRepeatFasta {\n    my ($id, $desc, $s, $n) = @_;\n\n    print \">\", $id, \" \", $desc, \"\\n\";\n\n    my $r = length $s;\n    my $ss = $s . $s . substr($s, 0, $n % $r);\n    for my $j(0..int($n / LINELENGTH)-1) {\n        my $i = $j*LINELENGTH % $r;\n        print substr($ss, $i, LINELENGTH), \"\\n\";\n    }\n    if ($n % LINELENGTH) {\n        print substr($ss, -($n % LINELENGTH)), \"\\n\";\n    }\n}\n\n\nmy $iub = [\n    [ 'a', 0.27 ],\n    [ 'c', 0.12 ],\n    [ 'g', 0.12 ],\n    [ 't', 0.27 ],\n    [ 'B', 0.02 ],\n    [ 'D', 0.02 ],\n    [ 'H', 0.02 ],\n    [ 'K', 0.02 ],\n    [ 'M', 0.02 ],\n    [ 'N', 0.02 ],\n    [ 'R', 0.02 ],\n    [ 'S', 0.02 ],\n    [ 'V', 0.02 ],\n    [ 'W', 0.02 ],\n    [ 'Y', 0.02 ]\n];\n\nmy $homosapiens = [\n    [ 'a', 0.3029549426680 ],\n    [ 'c', 0.1979883004921 ],\n    [ 'g', 0.1975473066391 ],\n    [ 't', 0.3015094502008 ]\n];\n\nmy $alu =\n    'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG' .\n    'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA' .\n    'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT' .\n    'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA' .\n    'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG' .\n    'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC' .\n    'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA';\n\n######################################################################\n#main\n\nmy $n = ($ARGV[0] || 1000) ;\n\nmakeCumulative($iub);\nmakeCumulative($homosapiens);\n\nmakeRepeatFasta ('ONE', 'Homo sapiens alu', $alu, $n*2);\nmakeRandomFasta ('TWO', 'IUB ambiguity codes', $n*3, $iub);\nmakeRandomFasta ('THREE', 'Homo sapiens frequency', $n*5, $homosapiens);\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 2746,
              "line": 122,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Generate and write random DNA sequences\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/shootout/fasta.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "sFtaZsOP9BqCGoWiXBony",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Generate and write random DNA sequences\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Generate and write random DNA sequences\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 68,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 68,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "P91-fpVuxr6XBsO6adiKq"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Daniel Carrera\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Daniel Carrera\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 69,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 92,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 69,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 92,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "OCrVtX65aR-PUsIOGcef1"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Based on the submission for Perl 5.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Based on the submission for Perl 5.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 93,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 129,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The program should\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The program should\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 130,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 149,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "generate DNA sequences, by copying from a given sequence\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "generate DNA sequences, by copying from a given sequence\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 150,
                          "line": 13,
                          "column": 1
                        },
                        "end": {
                          "offset": 213,
                          "line": 14,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 150,
                      "line": 13,
                      "column": 1
                    },
                    "end": {
                      "offset": 213,
                      "line": 14,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "taX78dZjh_CMJgK8e3Rxz"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "generate DNA sequences, by weighted random selection from 2 alphabets\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "generate DNA sequences, by weighted random selection from 2 alphabets\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 213,
                          "line": 14,
                          "column": 1
                        },
                        "end": {
                          "offset": 289,
                          "line": 15,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 213,
                      "line": 14,
                      "column": 1
                    },
                    "end": {
                      "offset": 289,
                      "line": 15,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "lzivp5lpB-Chz2-CTt3wy"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "convert the expected probability of selecting each nucleotide into\n      cumulative probabilities\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "convert the expected probability of selecting each nucleotide into\n      cumulative probabilities\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 289,
                          "line": 15,
                          "column": 1
                        },
                        "end": {
                          "offset": 393,
                          "line": 17,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 289,
                      "line": 15,
                      "column": 1
                    },
                    "end": {
                      "offset": 393,
                      "line": 17,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "sSZCe_G60ZqlnmcldAPsu"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "match a random number against those cumulative probabilities to select\n      each nucleotide (use linear search or binary search)\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "match a random number against those cumulative probabilities to select\n      each nucleotide (use linear search or binary search)\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 393,
                          "line": 17,
                          "column": 1
                        },
                        "end": {
                          "offset": 529,
                          "line": 19,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 393,
                      "line": 17,
                      "column": 1
                    },
                    "end": {
                      "offset": 529,
                      "line": 19,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "ajZIrPyh1MjmlMuialLbd"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "use this linear congruential generator to calculate a random number\n      each time a nucleotide needs to be selected (don't cache the random number\n      sequence)\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "use this linear congruential generator to calculate a random number\n      each time a nucleotide needs to be selected (don't cache the random number\n      sequence)\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 529,
                          "line": 19,
                          "column": 1
                        },
                        "end": {
                          "offset": 700,
                          "line": 22,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 529,
                      "line": 19,
                      "column": 1
                    },
                    "end": {
                      "offset": 700,
                      "line": 22,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "RZNOQTE6fbAgwE2smf-E7"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "IM = 139968\nIA = 3877\nIC = 29573\nSeed = 42\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "IM = 139968\n    IA = 3877\n    IC = 29573\n    Seed = 42\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 701,
                  "line": 23,
                  "column": 1
                },
                "end": {
                  "offset": 760,
                  "line": 27,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Random (Max)\nSeed = (Seed * IA + IC) modulo IM\n     = Max * Seed / IM\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Random (Max)\n    Seed = (Seed * IA + IC) modulo IM\n         = Max * Seed / IM\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 761,
                  "line": 28,
                  "column": 1
                },
                "end": {
                  "offset": 843,
                  "line": 31,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "write 3 sequences line-by-line in FASTA format.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "write 3 sequences line-by-line in FASTA format.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 844,
                  "line": 32,
                  "column": 1
                },
                "end": {
                  "offset": 892,
                  "line": 33,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://benchmarksgame.alioth.debian.org/u32/performance.php?test=fasta>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://benchmarksgame.alioth.debian.org/u32/performance.php?test=fasta"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 893,
                  "line": 34,
                  "column": 1
                },
                "end": {
                  "offset": 967,
                  "line": 35,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "USAGE:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "USAGE:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 968,
                  "line": 36,
                  "column": 1
                },
                "end": {
                  "offset": 975,
                  "line": 37,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "perl6 fasta.p6 1000\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "perl6 fasta.p6 1000\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 976,
                  "line": 38,
                  "column": 1
                },
                "end": {
                  "offset": 1000,
                  "line": 39,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Expected output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Expected output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1001,
                  "line": 40,
                  "column": 1
                },
                "end": {
                  "offset": 1017,
                  "line": 41,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": ">ONE Homo sapiens alu\nGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGA\nTCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACT\nAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAG\nGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCG\nCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGT\nGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCA\nGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAA\nTTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAG\nAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCA\nGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGT\nAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACC\nAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTG\nGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACC\nCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAG\nAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTT\nTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACA\nTGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCT\nGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGG\nTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGT\nCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGG\nCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCG\nTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTA\nCTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCG\nAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCG\nGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACC\nTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAA\nTACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGA\nGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACT\nGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTC\nACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGT\nTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGC\nCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCG\nCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTG\nGGCGACAGAGCGAGACTCCG\n>TWO IUB ambiguity codes\ncttBtatcatatgctaKggNcataaaSatgtaaaDcDRtBggDtctttataattcBgtcg\ntactDtDagcctatttSVHtHttKtgtHMaSattgWaHKHttttagacatWatgtRgaaa\nNtactMcSMtYtcMgRtacttctWBacgaaatatagScDtttgaagacacatagtVgYgt\ncattHWtMMWcStgttaggKtSgaYaaccWStcgBttgcgaMttBYatcWtgacaYcaga\ngtaBDtRacttttcWatMttDBcatWtatcttactaBgaYtcttgttttttttYaaScYa\nHgtgttNtSatcMtcVaaaStccRcctDaataataStcYtRDSaMtDttgttSagtRRca\ntttHatSttMtWgtcgtatSSagactYaaattcaMtWatttaSgYttaRgKaRtccactt\ntattRggaMcDaWaWagttttgacatgttctacaaaRaatataataaMttcgDacgaSSt\nacaStYRctVaNMtMgtaggcKatcttttattaaaaagVWaHKYagtttttatttaacct\ntacgtVtcVaattVMBcttaMtttaStgacttagattWWacVtgWYagWVRctDattBYt\ngtttaagaagattattgacVatMaacattVctgtBSgaVtgWWggaKHaatKWcBScSWa\naccRVacacaaactaccScattRatatKVtactatatttHttaagtttSKtRtacaaagt\nRDttcaaaaWgcacatWaDgtDKacgaacaattacaRNWaatHtttStgttattaaMtgt\ntgDcgtMgcatBtgcttcgcgaDWgagctgcgaggggVtaaScNatttacttaatgacag\ncccccacatYScaMgtaggtYaNgttctgaMaacNaMRaacaaacaKctacatagYWctg\nttWaaataaaataRattagHacacaagcgKatacBttRttaagtatttccgatctHSaat\nactcNttMaagtattMtgRtgaMgcataatHcMtaBSaRattagttgatHtMttaaKagg\nYtaaBataSaVatactWtataVWgKgttaaaacagtgcgRatatacatVtHRtVYataSa\nKtWaStVcNKHKttactatccctcatgWHatWaRcttactaggatctataDtDHBttata\naaaHgtacVtagaYttYaKcctattcttcttaataNDaaggaaaDYgcggctaaWSctBa\naNtgctggMBaKctaMVKagBaactaWaDaMaccYVtNtaHtVWtKgRtcaaNtYaNacg\ngtttNattgVtttctgtBaWgtaattcaagtcaVWtactNggattctttaYtaaagccgc\ntcttagHVggaYtgtNcDaVagctctctKgacgtatagYcctRYHDtgBattDaaDgccK\ntcHaaStttMcctagtattgcRgWBaVatHaaaataYtgtttagMDMRtaataaggatMt\nttctWgtNtgtgaaaaMaatatRtttMtDgHHtgtcattttcWattRSHcVagaagtacg\nggtaKVattKYagactNaatgtttgKMMgYNtcccgSKttctaStatatNVataYHgtNa\nBKRgNacaactgatttcctttaNcgatttctctataScaHtataRagtcRVttacDSDtt\naRtSatacHgtSKacYagttMHtWataggatgactNtatSaNctataVtttRNKtgRacc\ntttYtatgttactttttcctttaaacatacaHactMacacggtWataMtBVacRaSaatc\ncgtaBVttccagccBcttaRKtgtgcctttttRtgtcagcRttKtaaacKtaaatctcac\naattgcaNtSBaaccgggttattaaBcKatDagttactcttcattVtttHaaggctKKga\ntacatcBggScagtVcacattttgaHaDSgHatRMaHWggtatatRgccDttcgtatcga\naacaHtaagttaRatgaVacttagattVKtaaYttaaatcaNatccRttRRaMScNaaaD\ngttVHWgtcHaaHgacVaWtgttScactaagSgttatcttagggDtaccagWattWtRtg\nttHWHacgattBtgVcaYatcggttgagKcWtKKcaVtgaYgWctgYggVctgtHgaNcV\ntaBtWaaYatcDRaaRtSctgaHaYRttagatMatgcatttNattaDttaattgttctaa\nccctcccctagaWBtttHtBccttagaVaatMcBHagaVcWcagBVttcBtaYMccagat\ngaaaaHctctaacgttagNWRtcggattNatcRaNHttcagtKttttgWatWttcSaNgg\ngaWtactKKMaacatKatacNattgctWtatctaVgagctatgtRaHtYcWcttagccaa\ntYttWttaWSSttaHcaaaaagVacVgtaVaRMgattaVcDactttcHHggHRtgNcctt\ntYatcatKgctcctctatVcaaaaKaaaagtatatctgMtWtaaaacaStttMtcgactt\ntaSatcgDataaactaaacaagtaaVctaggaSccaatMVtaaSKNVattttgHccatca\ncBVctgcaVatVttRtactgtVcaattHgtaaattaaattttYtatattaaRSgYtgBag\naHSBDgtagcacRHtYcBgtcacttacactaYcgctWtattgSHtSatcataaatataHt\ncgtYaaMNgBaatttaRgaMaatatttBtttaaaHHKaatctgatWatYaacttMctctt\nttVctagctDaaagtaVaKaKRtaacBgtatccaaccactHHaagaagaaggaNaaatBW\nattccgStaMSaMatBttgcatgRSacgttVVtaaDMtcSgVatWcaSatcttttVatag\nttactttacgatcaccNtaDVgSRcgVcgtgaacgaNtaNatatagtHtMgtHcMtagaa\nattBgtataRaaaacaYKgtRccYtatgaagtaataKgtaaMttgaaRVatgcagaKStc\ntHNaaatctBBtcttaYaBWHgtVtgacagcaRcataWctcaBcYacYgatDgtDHccta\n>THREE Homo sapiens frequency\naacacttcaccaggtatcgtgaaggctcaagattacccagagaacctttgcaatataaga\natatgtatgcagcattaccctaagtaattatattctttttctgactcaaagtgacaagcc\nctagtgtatattaaatcggtatatttgggaaattcctcaaactatcctaatcaggtagcc\natgaaagtgatcaaaaaagttcgtacttataccatacatgaattctggccaagtaaaaaa\ntagattgcgcaaaattcgtaccttaagtctctcgccaagatattaggatcctattactca\ntatcgtgtttttctttattgccgccatccccggagtatctcacccatccttctcttaaag\ngcctaatattacctatgcaaataaacatatattgttgaaaattgagaacctgatcgtgat\ntcttatgtgtaccatatgtatagtaatcacgcgactatatagtgctttagtatcgcccgt\ngggtgagtgaatattctgggctagcgtgagatagtttcttgtcctaatatttttcagatc\ngaatagcttctatttttgtgtttattgacatatgtcgaaactccttactcagtgaaagtc\natgaccagatccacgaacaatcttcggaatcagtctcgttttacggcggaatcttgagtc\ntaacttatatcccgtcgcttactttctaacaccccttatgtatttttaaaattacgttta\nttcgaacgtacttggcggaagcgttattttttgaagtaagttacattgggcagactcttg\nacattttcgatacgactttctttcatccatcacaggactcgttcgtattgatatcagaag\nctcgtgatgattagttgtcttctttaccaatactttgaggcctattctgcgaaatttttg\nttgccctgcgaacttcacataccaaggaacacctcgcaacatgccttcatatccatcgtt\ncattgtaattcttacacaatgaatcctaagtaattacatccctgcgtaaaagatggtagg\nggcactgaggatatattaccaagcatttagttatgagtaatcagcaatgtttcttgtatt\naagttctctaaaatagttacatcgtaatgttatctcgggttccgcgaataaacgagatag\nattcattatatatggccctaagcaaaaacctcctcgtattctgttggtaattagaatcac\nacaatacgggttgagatattaattatttgtagtacgaagagatataaaaagatgaacaat\ntactcaagtcaagatgtatacgggatttataataaaaatcgggtagagatctgctttgca\nattcagacgtgccactaaatcgtaatatgtcgcgttacatcagaaagggtaactattatt\naattaataaagggcttaatcactacatattagatcttatccgatagtcttatctattcgt\ntgtatttttaagcggttctaattcagtcattatatcagtgctccgagttctttattattg\nttttaaggatgacaaaatgcctcttgttataacgctgggagaagcagactaagagtcgga\ngcagttggtagaatgaggctgcaaaagacggtctcgacgaatggacagactttactaaac\ncaatgaaagacagaagtagagcaaagtctgaagtggtatcagcttaattatgacaaccct\ntaatacttccctttcgccgaatactggcgtggaaaggttttaaaagtcgaagtagttaga\nggcatctctcgctcataaataggtagactactcgcaatccaatgtgactatgtaatactg\nggaacatcagtccgcgatgcagcgtgtttatcaaccgtccccactcgcctggggagacat\ngagaccacccccgtggggattattagtccgcagtaatcgactcttgacaatccttttcga\nttatgtcatagcaatttacgacagttcagcgaagtgactactcggcgaaatggtattact\naaagcattcgaacccacatgaatgtgattcttggcaatttctaatccactaaagcttttc\ncgttgaatctggttgtagatatttatataagttcactaattaagatcacggtagtatatt\ngatagtgatgtctttgcaagaggttggccgaggaatttacggattctctattgatacaat\nttgtctggcttataactcttaaggctgaaccaggcgtttttagacgacttgatcagctgt\ntagaatggtttggactccctctttcatgtcagtaacatttcagccgttattgttacgata\ntgcttgaacaatattgatctaccacacacccatagtatattttataggtcatgctgttac\nctacgagcatggtattccacttcccattcaatgagtattcaacatcactagcctcagaga\ntgatgacccacctctaataacgtcacgttgcggccatgtgaaacctgaacttgagtagac\ngatatcaagcgctttaaattgcatataacatttgagggtaaagctaagcggatgctttat\nataatcaatactcaataataagatttgattgcattttagagttatgacacgacatagttc\nactaacgagttactattcccagatctagactgaagtactgatcgagacgatccttacgtc\ngatgatcgttagttatcgacttaggtcgggtctctagcggtattggtacttaaccggaca\nctatactaataacccatgatcaaagcataacagaatacagacgataatttcgccaacata\ntatgtacagaccccaagcatgagaagctcattgaaagctatcattgaagtcccgctcaca\natgtgtcttttccagacggtttaactggttcccgggagtcctggagtttcgacttacata\naatggaaacaatgtattttgctaatttatctatagcgtcatttggaccaatacagaatat\ntatgttgcctagtaatccactataacccgcaagtgctgatagaaaatttttagacgattt\nataaatgccccaagtatccctcccgtgaatcctccgttatactaattagtattcgttcat\nacgtataccgcgcatatatgaacatttggcgataaggcgcgtgaattgttacgtgacaga\ngatagcagtttcttgtgatatggttaacagacgtacatgaagggaaactttatatctata\ngtgatgcttccgtagaaataccgccactggtctgccaatgatgaagtatgtagctttagg\ntttgtactatgaggctttcgtttgtttgcagagtataacagttgcgagtgaaaaaccgac\ngaatttatactaatacgctttcactattggctacaaaatagggaagagtttcaatcatga\ngagggagtatatggatgctttgtagctaaaggtagaacgtatgtatatgctgccgttcat\ntcttgaaagatacataagcgataagttacgacaattataagcaacatccctaccttcgta\nacgatttcactgttactgcgcttgaaatacactatggggctattggcggagagaagcaga\ntcgcgccgagcatatacgagacctataatgttgatgatagagaaggcgtctgaattgata\ncatcgaagtacactttctttcgtagtatctctcgtcctctttctatctccggacacaaga\nattaagttatatatatagagtcttaccaatcatgttgaatcctgattctcagagttcttt\nggcgggccttgtgatgactgagaaacaatgcaatattgctccaaatttcctaagcaaatt\nctcggttatgttatgttatcagcaaagcgttacgttatgttatttaaatctggaatgacg\ngagcgaagttcttatgtcggtgtgggaataattcttttgaagacagcactccttaaataa\ntatcgctccgtgtttgtatttatcgaatgggtctgtaaccttgcacaagcaaatcggtgg\ntgtatatatcggataacaattaatacgatgttcatagtgacagtatactgatcgagtcct\nctaaagtcaattacctcacttaacaatctcattgatgttgtgtcattcccggtatcgccc\ngtagtatgtgctctgattgaccgagtgtgaaccaaggaacatctactaatgcctttgtta\nggtaagatctctctgaattccttcgtgccaacttaaaacattatcaaaatttcttctact\ntggattaactacttttacgagcatggcaaattcccctgtggaagacggttcattattatc\nggaaaccttatagaaattgcgtgttgactgaaattagatttttattgtaagagttgcatc\ntttgcgattcctctggtctagcttccaatgaacagtcctcccttctattcgacatcgggt\nccttcgtacatgtctttgcgatgtaataattaggttcggagtgtggccttaatgggtgca\nactaggaatacaacgcaaatttgctgacatgatagcaaatcggtatgccggcaccaaaac\ngtgctccttgcttagcttgtgaatgagactcagtagttaaataaatccatatctgcaatc\ngattccacaggtattgtccactatctttgaactactctaagagatacaagcttagctgag\naccgaggtgtatatgactacgctgatatctgtaaggtaccaatgcaggcaaagtatgcga\ngaagctaataccggctgtttccagctttataagattaaaatttggctgtcctggcggcct\ncagaattgttctatcgtaatcagttggttcattaattagctaagtacgaggtacaactta\ntctgtcccagaacagctccacaagtttttttacagccgaaacccctgtgtgaatcttaat\natccaagcgcgttatctgattagagtttacaactcagtattttatcagtacgttttgttt\nccaacattacccggtatgacaaaatgacgccacgtgtcgaataatggtctgaccaatgta\nggaagtgaaaagataaatat\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": ">ONE Homo sapiens alu\n    GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGA\n    TCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACT\n    AAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAG\n    GCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCG\n    CCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGT\n    GGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCA\n    GGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAA\n    TTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAG\n    AATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCA\n    GCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGT\n    AATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACC\n    AGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTG\n    GTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACC\n    CGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAG\n    AGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTT\n    TGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACA\n    TGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCT\n    GTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGG\n    TTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGT\n    CTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGG\n    CGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCG\n    TCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTA\n    CTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCG\n    AGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCG\n    GGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACC\n    TGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAA\n    TACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGA\n    GGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACT\n    GCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTC\n    ACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGT\n    TCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGC\n    CGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCG\n    CTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTG\n    GGCGACAGAGCGAGACTCCG\n    >TWO IUB ambiguity codes\n    cttBtatcatatgctaKggNcataaaSatgtaaaDcDRtBggDtctttataattcBgtcg\n    tactDtDagcctatttSVHtHttKtgtHMaSattgWaHKHttttagacatWatgtRgaaa\n    NtactMcSMtYtcMgRtacttctWBacgaaatatagScDtttgaagacacatagtVgYgt\n    cattHWtMMWcStgttaggKtSgaYaaccWStcgBttgcgaMttBYatcWtgacaYcaga\n    gtaBDtRacttttcWatMttDBcatWtatcttactaBgaYtcttgttttttttYaaScYa\n    HgtgttNtSatcMtcVaaaStccRcctDaataataStcYtRDSaMtDttgttSagtRRca\n    tttHatSttMtWgtcgtatSSagactYaaattcaMtWatttaSgYttaRgKaRtccactt\n    tattRggaMcDaWaWagttttgacatgttctacaaaRaatataataaMttcgDacgaSSt\n    acaStYRctVaNMtMgtaggcKatcttttattaaaaagVWaHKYagtttttatttaacct\n    tacgtVtcVaattVMBcttaMtttaStgacttagattWWacVtgWYagWVRctDattBYt\n    gtttaagaagattattgacVatMaacattVctgtBSgaVtgWWggaKHaatKWcBScSWa\n    accRVacacaaactaccScattRatatKVtactatatttHttaagtttSKtRtacaaagt\n    RDttcaaaaWgcacatWaDgtDKacgaacaattacaRNWaatHtttStgttattaaMtgt\n    tgDcgtMgcatBtgcttcgcgaDWgagctgcgaggggVtaaScNatttacttaatgacag\n    cccccacatYScaMgtaggtYaNgttctgaMaacNaMRaacaaacaKctacatagYWctg\n    ttWaaataaaataRattagHacacaagcgKatacBttRttaagtatttccgatctHSaat\n    actcNttMaagtattMtgRtgaMgcataatHcMtaBSaRattagttgatHtMttaaKagg\n    YtaaBataSaVatactWtataVWgKgttaaaacagtgcgRatatacatVtHRtVYataSa\n    KtWaStVcNKHKttactatccctcatgWHatWaRcttactaggatctataDtDHBttata\n    aaaHgtacVtagaYttYaKcctattcttcttaataNDaaggaaaDYgcggctaaWSctBa\n    aNtgctggMBaKctaMVKagBaactaWaDaMaccYVtNtaHtVWtKgRtcaaNtYaNacg\n    gtttNattgVtttctgtBaWgtaattcaagtcaVWtactNggattctttaYtaaagccgc\n    tcttagHVggaYtgtNcDaVagctctctKgacgtatagYcctRYHDtgBattDaaDgccK\n    tcHaaStttMcctagtattgcRgWBaVatHaaaataYtgtttagMDMRtaataaggatMt\n    ttctWgtNtgtgaaaaMaatatRtttMtDgHHtgtcattttcWattRSHcVagaagtacg\n    ggtaKVattKYagactNaatgtttgKMMgYNtcccgSKttctaStatatNVataYHgtNa\n    BKRgNacaactgatttcctttaNcgatttctctataScaHtataRagtcRVttacDSDtt\n    aRtSatacHgtSKacYagttMHtWataggatgactNtatSaNctataVtttRNKtgRacc\n    tttYtatgttactttttcctttaaacatacaHactMacacggtWataMtBVacRaSaatc\n    cgtaBVttccagccBcttaRKtgtgcctttttRtgtcagcRttKtaaacKtaaatctcac\n    aattgcaNtSBaaccgggttattaaBcKatDagttactcttcattVtttHaaggctKKga\n    tacatcBggScagtVcacattttgaHaDSgHatRMaHWggtatatRgccDttcgtatcga\n    aacaHtaagttaRatgaVacttagattVKtaaYttaaatcaNatccRttRRaMScNaaaD\n    gttVHWgtcHaaHgacVaWtgttScactaagSgttatcttagggDtaccagWattWtRtg\n    ttHWHacgattBtgVcaYatcggttgagKcWtKKcaVtgaYgWctgYggVctgtHgaNcV\n    taBtWaaYatcDRaaRtSctgaHaYRttagatMatgcatttNattaDttaattgttctaa\n    ccctcccctagaWBtttHtBccttagaVaatMcBHagaVcWcagBVttcBtaYMccagat\n    gaaaaHctctaacgttagNWRtcggattNatcRaNHttcagtKttttgWatWttcSaNgg\n    gaWtactKKMaacatKatacNattgctWtatctaVgagctatgtRaHtYcWcttagccaa\n    tYttWttaWSSttaHcaaaaagVacVgtaVaRMgattaVcDactttcHHggHRtgNcctt\n    tYatcatKgctcctctatVcaaaaKaaaagtatatctgMtWtaaaacaStttMtcgactt\n    taSatcgDataaactaaacaagtaaVctaggaSccaatMVtaaSKNVattttgHccatca\n    cBVctgcaVatVttRtactgtVcaattHgtaaattaaattttYtatattaaRSgYtgBag\n    aHSBDgtagcacRHtYcBgtcacttacactaYcgctWtattgSHtSatcataaatataHt\n    cgtYaaMNgBaatttaRgaMaatatttBtttaaaHHKaatctgatWatYaacttMctctt\n    ttVctagctDaaagtaVaKaKRtaacBgtatccaaccactHHaagaagaaggaNaaatBW\n    attccgStaMSaMatBttgcatgRSacgttVVtaaDMtcSgVatWcaSatcttttVatag\n    ttactttacgatcaccNtaDVgSRcgVcgtgaacgaNtaNatatagtHtMgtHcMtagaa\n    attBgtataRaaaacaYKgtRccYtatgaagtaataKgtaaMttgaaRVatgcagaKStc\n    tHNaaatctBBtcttaYaBWHgtVtgacagcaRcataWctcaBcYacYgatDgtDHccta\n    >THREE Homo sapiens frequency\n    aacacttcaccaggtatcgtgaaggctcaagattacccagagaacctttgcaatataaga\n    atatgtatgcagcattaccctaagtaattatattctttttctgactcaaagtgacaagcc\n    ctagtgtatattaaatcggtatatttgggaaattcctcaaactatcctaatcaggtagcc\n    atgaaagtgatcaaaaaagttcgtacttataccatacatgaattctggccaagtaaaaaa\n    tagattgcgcaaaattcgtaccttaagtctctcgccaagatattaggatcctattactca\n    tatcgtgtttttctttattgccgccatccccggagtatctcacccatccttctcttaaag\n    gcctaatattacctatgcaaataaacatatattgttgaaaattgagaacctgatcgtgat\n    tcttatgtgtaccatatgtatagtaatcacgcgactatatagtgctttagtatcgcccgt\n    gggtgagtgaatattctgggctagcgtgagatagtttcttgtcctaatatttttcagatc\n    gaatagcttctatttttgtgtttattgacatatgtcgaaactccttactcagtgaaagtc\n    atgaccagatccacgaacaatcttcggaatcagtctcgttttacggcggaatcttgagtc\n    taacttatatcccgtcgcttactttctaacaccccttatgtatttttaaaattacgttta\n    ttcgaacgtacttggcggaagcgttattttttgaagtaagttacattgggcagactcttg\n    acattttcgatacgactttctttcatccatcacaggactcgttcgtattgatatcagaag\n    ctcgtgatgattagttgtcttctttaccaatactttgaggcctattctgcgaaatttttg\n    ttgccctgcgaacttcacataccaaggaacacctcgcaacatgccttcatatccatcgtt\n    cattgtaattcttacacaatgaatcctaagtaattacatccctgcgtaaaagatggtagg\n    ggcactgaggatatattaccaagcatttagttatgagtaatcagcaatgtttcttgtatt\n    aagttctctaaaatagttacatcgtaatgttatctcgggttccgcgaataaacgagatag\n    attcattatatatggccctaagcaaaaacctcctcgtattctgttggtaattagaatcac\n    acaatacgggttgagatattaattatttgtagtacgaagagatataaaaagatgaacaat\n    tactcaagtcaagatgtatacgggatttataataaaaatcgggtagagatctgctttgca\n    attcagacgtgccactaaatcgtaatatgtcgcgttacatcagaaagggtaactattatt\n    aattaataaagggcttaatcactacatattagatcttatccgatagtcttatctattcgt\n    tgtatttttaagcggttctaattcagtcattatatcagtgctccgagttctttattattg\n    ttttaaggatgacaaaatgcctcttgttataacgctgggagaagcagactaagagtcgga\n    gcagttggtagaatgaggctgcaaaagacggtctcgacgaatggacagactttactaaac\n    caatgaaagacagaagtagagcaaagtctgaagtggtatcagcttaattatgacaaccct\n    taatacttccctttcgccgaatactggcgtggaaaggttttaaaagtcgaagtagttaga\n    ggcatctctcgctcataaataggtagactactcgcaatccaatgtgactatgtaatactg\n    ggaacatcagtccgcgatgcagcgtgtttatcaaccgtccccactcgcctggggagacat\n    gagaccacccccgtggggattattagtccgcagtaatcgactcttgacaatccttttcga\n    ttatgtcatagcaatttacgacagttcagcgaagtgactactcggcgaaatggtattact\n    aaagcattcgaacccacatgaatgtgattcttggcaatttctaatccactaaagcttttc\n    cgttgaatctggttgtagatatttatataagttcactaattaagatcacggtagtatatt\n    gatagtgatgtctttgcaagaggttggccgaggaatttacggattctctattgatacaat\n    ttgtctggcttataactcttaaggctgaaccaggcgtttttagacgacttgatcagctgt\n    tagaatggtttggactccctctttcatgtcagtaacatttcagccgttattgttacgata\n    tgcttgaacaatattgatctaccacacacccatagtatattttataggtcatgctgttac\n    ctacgagcatggtattccacttcccattcaatgagtattcaacatcactagcctcagaga\n    tgatgacccacctctaataacgtcacgttgcggccatgtgaaacctgaacttgagtagac\n    gatatcaagcgctttaaattgcatataacatttgagggtaaagctaagcggatgctttat\n    ataatcaatactcaataataagatttgattgcattttagagttatgacacgacatagttc\n    actaacgagttactattcccagatctagactgaagtactgatcgagacgatccttacgtc\n    gatgatcgttagttatcgacttaggtcgggtctctagcggtattggtacttaaccggaca\n    ctatactaataacccatgatcaaagcataacagaatacagacgataatttcgccaacata\n    tatgtacagaccccaagcatgagaagctcattgaaagctatcattgaagtcccgctcaca\n    atgtgtcttttccagacggtttaactggttcccgggagtcctggagtttcgacttacata\n    aatggaaacaatgtattttgctaatttatctatagcgtcatttggaccaatacagaatat\n    tatgttgcctagtaatccactataacccgcaagtgctgatagaaaatttttagacgattt\n    ataaatgccccaagtatccctcccgtgaatcctccgttatactaattagtattcgttcat\n    acgtataccgcgcatatatgaacatttggcgataaggcgcgtgaattgttacgtgacaga\n    gatagcagtttcttgtgatatggttaacagacgtacatgaagggaaactttatatctata\n    gtgatgcttccgtagaaataccgccactggtctgccaatgatgaagtatgtagctttagg\n    tttgtactatgaggctttcgtttgtttgcagagtataacagttgcgagtgaaaaaccgac\n    gaatttatactaatacgctttcactattggctacaaaatagggaagagtttcaatcatga\n    gagggagtatatggatgctttgtagctaaaggtagaacgtatgtatatgctgccgttcat\n    tcttgaaagatacataagcgataagttacgacaattataagcaacatccctaccttcgta\n    acgatttcactgttactgcgcttgaaatacactatggggctattggcggagagaagcaga\n    tcgcgccgagcatatacgagacctataatgttgatgatagagaaggcgtctgaattgata\n    catcgaagtacactttctttcgtagtatctctcgtcctctttctatctccggacacaaga\n    attaagttatatatatagagtcttaccaatcatgttgaatcctgattctcagagttcttt\n    ggcgggccttgtgatgactgagaaacaatgcaatattgctccaaatttcctaagcaaatt\n    ctcggttatgttatgttatcagcaaagcgttacgttatgttatttaaatctggaatgacg\n    gagcgaagttcttatgtcggtgtgggaataattcttttgaagacagcactccttaaataa\n    tatcgctccgtgtttgtatttatcgaatgggtctgtaaccttgcacaagcaaatcggtgg\n    tgtatatatcggataacaattaatacgatgttcatagtgacagtatactgatcgagtcct\n    ctaaagtcaattacctcacttaacaatctcattgatgttgtgtcattcccggtatcgccc\n    gtagtatgtgctctgattgaccgagtgtgaaccaaggaacatctactaatgcctttgtta\n    ggtaagatctctctgaattccttcgtgccaacttaaaacattatcaaaatttcttctact\n    tggattaactacttttacgagcatggcaaattcccctgtggaagacggttcattattatc\n    ggaaaccttatagaaattgcgtgttgactgaaattagatttttattgtaagagttgcatc\n    tttgcgattcctctggtctagcttccaatgaacagtcctcccttctattcgacatcgggt\n    ccttcgtacatgtctttgcgatgtaataattaggttcggagtgtggccttaatgggtgca\n    actaggaatacaacgcaaatttgctgacatgatagcaaatcggtatgccggcaccaaaac\n    gtgctccttgcttagcttgtgaatgagactcagtagttaaataaatccatatctgcaatc\n    gattccacaggtattgtccactatctttgaactactctaagagatacaagcttagctgag\n    accgaggtgtatatgactacgctgatatctgtaaggtaccaatgcaggcaaagtatgcga\n    gaagctaataccggctgtttccagctttataagattaaaatttggctgtcctggcggcct\n    cagaattgttctatcgtaatcagttggttcattaattagctaagtacgaggtacaactta\n    tctgtcccagaacagctccacaagtttttttacagccgaaacccctgtgtgaatcttaat\n    atccaagcgcgttatctgattagagtttacaactcagtattttatcagtacgttttgttt\n    ccaacattacccggtatgacaaaatgacgccacgtgtcgaataatggtctgaccaatgta\n    ggaagtgaaaagataaatat\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1018,
                  "line": 42,
                  "column": 1
                },
                "end": {
                  "offset": 11947,
                  "line": 213,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 11957,
              "line": 215,
              "column": 1
            }
          },
          "id": "vNqk64SvzC6INsa1kANqy"
        },
        {
          "text": "\nconstant IM = 139968;\nconstant IA = 3877;\nconstant IC = 29573;\nconstant LINELENGTH = 60;\n\nmy $Seed = 42;\n\nmy @iub = (\n    ['a', 0.27], ['c', 0.12], ['g', 0.12],\n    ['t', 0.27], ['B', 0.02], ['D', 0.02],\n    ['H', 0.02], ['K', 0.02], ['M', 0.02],\n    ['N', 0.02], ['R', 0.02], ['S', 0.02],\n    ['V', 0.02], ['W', 0.02], ['Y', 0.02]\n);\n\nmy @homosapiens = (\n    ['a', 0.3029549426680],\n    ['c', 0.1979883004921],\n    ['g', 0.1975473066391],\n    ['t', 0.3015094502008]\n);\n\nmy $alu = 'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG' ~\n          'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA' ~\n          'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT' ~\n          'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA' ~\n          'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG' ~\n          'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC' ~\n          'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA';\n\nmy $n = (@*ARGS[0] || 1000) ;\n\nmakeCumulative(@iub);\nmakeCumulative(@homosapiens);\n\nmakeRepeatFasta('ONE', 'Homo sapiens alu', $n*2, $alu);\nmakeRandomFasta('TWO', 'IUB ambiguity codes', $n*3, @iub);\nmakeRandomFasta('THREE', 'Homo sapiens frequency', $n*5, @homosapiens);\n\nsub makeCumulative(@genelist) {\n    my $cp = 0.0;\n    for @genelist -> @gene {\n        @gene[1] = $cp += @gene[1];\n    }\n}\n\nsub makeRepeatFasta($id, $desc, $n, $s) {\n    say \">$id $desc\";\n\n    my $r = $s.chars;\n    my $ss = $s ~ $s ~ $s.substr(0, $n % $r);\n\n    for 0..($n div LINELENGTH)-1 -> $k {\n        my $i = $k*LINELENGTH % $r;\n        say $ss.substr($i, LINELENGTH);\n    }\n    if ($n % LINELENGTH) {\n        say $ss.substr(*-($n % LINELENGTH));\n    }\n}\n\nsub makeRandomFasta($id, $desc, $n, @genelist) {\n    say \">$id $desc\";\n\n    # print whole lines\n    for 1 .. ($n div LINELENGTH) {\n        say selectRandom(@genelist, LINELENGTH);\n    }\n    # print remaining line (if required)\n    if ($n % LINELENGTH) {\n        say selectRandom(@genelist, $n % LINELENGTH);\n    }\n}\n\nsub selectRandom(@genelist, $length) {\n    my @rand = gen_random($length);\n    my $seq = '';\n\n    for @rand -> $rand {\n        for @genelist -> @gene {\n            if ($rand < @gene[1]) { $seq ~= @gene[0]; last; }\n        }\n    }\n    return $seq;\n}\n\nsub gen_random($length) {\n    map {\n        $Seed = ($Seed * IA + IC) % IM;\n        $Seed / IM;\n    } , 1..$length;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 11957,
              "line": 215,
              "column": 1
            },
            "end": {
              "offset": 14280,
              "line": 310,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "",
    "description": "",
    "footer": "",
    "file": "work_examples/categories/shootout/k-nucleotide.p5.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "MLs2en6YkY1x4Vd4_UdRU",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#  The Computer Language Benchmarks Game\n#  http://shootout.alioth.debian.org/\n#  contributed by Karl FORNER\n# (borrowed fasta loading routine from Kjetil Skotheim, 2005-11-29)\n# Corrected again by Jesse Millikan\n# revised by Kuang-che Wu\n\nmy ($sequence);\n$/ = \">\";\n/^THREE/ and $sequence = uc(join \"\", grep !/^THREE/, split /\\n+/) while\n<STDIN>;\n\nmy ($l,%h,$sum) = (length $sequence);\nforeach my $frame (1,2) {\n  %h = ();\n  update_hash_for_frame($frame);\n  $sum = $l - $frame + 1;\n  printf \"$_ %.3f\\n\", $h{$_}*100/$sum for sort { $h{$b} <=> $h{$a} || $a\ncmp $b } keys %h;\n  print \"\\n\";\n}\n\nforeach my $s (qw(GGT GGTA GGTATT GGTATTTTAATT GGTATTTTAATTTATAGT)) {\n  update_hash_for_frame(length($s));\n  printf \"%d\\t$s\\n\", $h{$s};\n}\n\nsub update_hash_for_frame {\n  my $frame = $_[0];\n  $h{substr($sequence,$_,$frame)}++ foreach (0..($l - $frame));\n}\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 845,
              "line": 33,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Repeatedly update hashtables and k-nucleotide strings\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/shootout/k-nucleotide.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "QwVpCwgT4Ghpu-rszd1hG",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Repeatedly update hashtables and k-nucleotide strings\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Repeatedly update hashtables and k-nucleotide strings\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 82,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 82,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "35mwHzrkbEoSRZRACXEom"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Daniel Carrera\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Daniel Carrera\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 83,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 106,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 83,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 106,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "M-9be-9u8pDk9vpvbJz2d"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://benchmarksgame.alioth.debian.org/u32/performance.php?test=knucleotide>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://benchmarksgame.alioth.debian.org/u32/performance.php?test=knucleotide"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 107,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 187,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Based on the submission for Perl 5.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Based on the submission for Perl 5.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 188,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 224,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "USAGE: perl6 k-nucleotide.p6 k-nucleotide.input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "USAGE: perl6 k-nucleotide.p6 k-nucleotide.input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 225,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 273,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Expected output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Expected output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 274,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 290,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A 30.298\nT 30.157\nC 19.793\nG 19.752\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "A 30.298\n    T 30.157\n    C 19.793\n    G 19.752\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 291,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 343,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "AA 9.177\nTA 9.137\nAT 9.136\nTT 9.094\nAC 6.000\nCA 5.999\nGA 5.986\nAG 5.985\nTC 5.970\nCT 5.970\nGT 5.957\nTG 5.956\nCC 3.915\nCG 3.910\nGC 3.908\nGG 3.902\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "AA 9.177\n    TA 9.137\n    AT 9.136\n    TT 9.094\n    AC 6.000\n    CA 5.999\n    GA 5.986\n    AG 5.985\n    TC 5.970\n    CT 5.970\n    GT 5.957\n    TG 5.956\n    CC 3.915\n    CG 3.910\n    GC 3.908\n    GG 3.902\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 344,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 552,
                  "line": 38,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "14717GGT\n4463GGTA\n472GGTATT\n902GGTATTTTAATT\n902GGTATTTTAATTGGTATTTTAATTTATAGT\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "14717GGT\n    4463GGTA\n    472GGTATT\n    902GGTATTTTAATT\n    902GGTATTTTAATTGGTATTTTAATTTATAGT\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 553,
                  "line": 39,
                  "column": 1
                },
                "end": {
                  "offset": 651,
                  "line": 44,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 661,
              "line": 46,
              "column": 1
            }
          },
          "id": "-IY2FHGi7j3mKDe7bZ8Gk"
        },
        {
          "text": "\nsub MAIN($input-file = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, \"k-nucleotide.input\")) {\n    my $fh = open $input-file.IO;\n\n    # Read FASTA file and extract DNA sequence THREE.\n    my $sequence = '';\n    my $lines;\n\n    while $fh.get -> $line {\n        last if ($line.substr(0,6) eq '>THREE');\n    }\n    while $fh.get -> $line {\n        last if ($line.substr(0,1) eq '>');\n        $sequence = $sequence ~ lc $line.subst(/\\n/,'');\n    }\n\n    # Count nucleotide sequences\n    my $len = $sequence.chars;\n    my (@keys,%table,$sum,$frame_size);\n    for 1..2 -> $frame_size {\n        %table = ();\n        update_hash($frame_size);\n\n        # Print.\n        $sum = $len - $frame_size + 1;\n        for %table.sort: {$^b.value <=> $^a.value||$^a.key leg $^b.key} {\n            printf \"%s %.3f\\n\", .key, .value*100/$sum;\n        }\n        print \"\\n\";\n    }\n\n    for <ggt ggta ggtatt ggtattttaatt ggtattttaatttatagt> -> $seq {\n        %table = ();\n        update_hash($seq.chars);\n        printf \"%3d    $seq\\n\", (%table{$seq} || 0);\n    }\n\n    # Procedure to update a hashtable of k-nucleotide keys and count values\n    # for a particular reading-frame.\n    sub update_hash($frame_size) {\n        for 0..($len - $frame_size) -> $i {\n            %table{$sequence.substr($i,$frame_size)}++;\n        }\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 661,
              "line": 46,
              "column": 1
            },
            "end": {
              "offset": 2001,
              "line": 93,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Generates the Mandelbrot Set fractal\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/shootout/mandelbrot.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "5OmZAML1NKWAkpM6No8xQ",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Generates the Mandelbrot Set fractal\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Generates the Mandelbrot Set fractal\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 65,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 65,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "WlV7EzB9TjaeGcvytUbsV"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Rodrigo Siqueira (@rsiqueira)\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Rodrigo Siqueira (@rsiqueira)\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 66,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 104,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 66,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 104,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "SIvkS-KfFmjeQ5VN3MR4M"
            },
            {
              "type": "blankline"
            },
            {
              "text": "To be submitted to \"The Computer Language Benchmarks Game\", to test Perl6 speed / performance \nin comparison with other programming languages.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "To be submitted to \"The Computer Language Benchmarks Game\", to test Perl6 speed / performance \nin comparison with other programming languages.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 105,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 248,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<https://benchmarksgame.alioth.debian.org/u32q/mandelbrot-description.html>\nL<http://benchmarksgame.alioth.debian.org/u32/performance.php?test=mandelbrot>\nL<http://benchmarksgame.alioth.debian.org/u64/performance.php?test=mandelbrot>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://benchmarksgame.alioth.debian.org/u32q/mandelbrot-description.html"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://benchmarksgame.alioth.debian.org/u32/performance.php?test=mandelbrot"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://benchmarksgame.alioth.debian.org/u64/performance.php?test=mandelbrot"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 249,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 484,
                  "line": 15,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "USAGE: perl6 mandelbrot.p6 200 > image.pbm\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "USAGE: perl6 mandelbrot.p6 200 "
                },
                {
                  "type": "text",
                  "value": ">"
                },
                {
                  "type": "text",
                  "value": " image.pbm\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 485,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 528,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 538,
              "line": 19,
              "column": 1
            }
          },
          "id": "e81qNg5mtB5owfViITSet"
        },
        {
          "text": "\n\n\nconstant $MAXITER = 50;\nconstant $xmin = -1.5;\nconstant $ymin = -1.0;\n\nmy $w = (@*ARGS[0] || 200);\nmy $h = $w;\n\nmy Rat $invN = 2/$w;\n\nprint \"P4\\n$w $h\\n\"; # PBM image header\n\nmy Int $bit_num = 0;\n\nmy Int $is_set=1;\n\nmy Int $byte = 0;\n\nfor (0..$h-1) -> $y {\n\n  my Rat $y_coord = $y * $invN + $ymin;\n\n  for 0..$w-1 -> $x {\n\n    my Rat $x_coord = $x * $invN + $xmin;\n\n    my Complex $C = $x_coord + $y_coord\\i;\n\n    my Complex $z=0+0i;\n\n    for (0..$MAXITER) { # Iterate\n\n      $z = $z * $z + $C;\n\n      if ($z.abs > 4) { # Outer area of the Mandelbrot Set\n        $is_set = 0;\n        last;\n      }\n\n    }\n\n#    if ($is_set) { # Inner area of the Mandelbrot Set\n#      print \"o\";\n#    } else {       # Outer area\n#      print \".\";\n#    }\n\n    $bit_num++;\n\n    $byte = $byte +< 1;\n    if ($is_set) {\n      $byte = $byte +| 1;\n    }\n\n    if ($bit_num == 8) {\n\n      $bit_num = 0;\n      my $buf = Buf.new( $byte );\n      $*OUT.write($buf);\n      $byte = 0;\n\n    } elsif ($x == $w-1) { # (8 - $w%8) bits to fill out the last byte in the row\n\n      $byte = $byte +< (8 - $w%8);\n      my $buf = Buf.new( $byte );\n      $*OUT.write($buf);\n      $byte = 0;\n      $bit_num = 0;\n    }\n\n    $is_set=1;\n\n  } # Next x\n\n#  print \"\\n\";\n\n} # Next y\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 538,
              "line": 19,
              "column": 1
            },
            "end": {
              "offset": 1772,
              "line": 98,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Perform an N-body simulation of the Jovian planets\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/shootout/n-body-v2.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "-CYqHgpB7rUgaVu5EfQsT",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Perform an N-body simulation of the Jovian planets\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Perform an N-body simulation of the Jovian planets\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 79,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 79,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "KdUNfTFc9SNkZ1Sw-NHc_"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Gerhard R\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Gerhard R\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 80,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 98,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 80,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 98,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "PmNVEmU2e5diANWH49hBq"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://benchmarksgame.alioth.debian.org/u32/performance.php?test=nbody>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://benchmarksgame.alioth.debian.org/u32/performance.php?test=nbody"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 99,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 173,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "USAGE: perl6 n-body-v2.p6 [N=1000] [dt=1e-2]\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "USAGE: perl6 n-body-v2.p6 [N=1000] [dt=1e-2]\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 174,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 219,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Expected output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Expected output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 220,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 236,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "-0.169075164\n-0.169087605\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "-0.169075164\n    -0.169087605\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 237,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 271,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 281,
              "line": 19,
              "column": 1
            }
          },
          "id": "hK1uT-rcApoHgHk9Bdyv-"
        },
        {
          "text": "\nconstant SOLAR_MASS = 4 * pi * pi;\nconstant DAYS_PER_YEAR = 365.24e0;\n\nclass Vector {\n    has Num ($.x, $.y, $.z);\n    submethod BUILD(:$!x = 0e0, :$!y = 0e0, :$!z = 0e0) {}\n\n    method addmul(Vector $v, Num $s) {\n        $!x = $!x + $v.x * $s;\n        $!y = $!y + $v.y * $s;\n        $!z = $!z + $v.z * $s;\n    }\n}\n\nmulti infix:<**>(Vector $_, 2 --> Num) { .x * .x + .y * .y + .z * .z }\nmulti infix:<**>(Vector $_, 1 --> Num) { sqrt $_ ** 2 }\nmulti infix:<**>(Vector $_, Num $x --> Num) { ($_ ** 2) ** ($x / 2e0) }\n\nmulti infix:<->(Vector $a, Vector $b --> Vector) {\n    Vector.new: :x($a.x - $b.x), :y($a.y - $b.y), :z($a.z - $b.z)\n}\n\nclass Body {\n    has Num $.m;\n    has Vector ($.r, $.v);\n}\n\nenum Planet <Sun Jupiter Saturn Uranus Neptune>;\n\nmy Body @bodies = (\n    ( # Sun\n        1e0, [0e0 xx 3], [0e0 xx 3]),\n    ( # Jupiter\n        9.54791938424326609e-04,\n        [ 4.84143144246472090e+00,\n         -1.16032004402742839e+00,\n         -1.03622044471123109e-01],\n        [ 1.66007664274403694e-03,\n          7.69901118419740425e-03,\n         -6.90460016972063023e-05]),\n    ( # Saturn\n        2.85885980666130812e-04,\n        [ 8.34336671824457987e+00,\n          4.12479856412430479e+00,\n         -4.03523417114321381e-01],\n        [-2.76742510726862411e-03,\n          4.99852801234917238e-03,\n          2.30417297573763929e-05]),\n    ( # Uranus\n        4.36624404335156298e-05,\n        [ 1.28943695621391310e+01,\n         -1.51111514016986312e+01,\n         -2.23307578892655734e-01],\n        [ 2.96460137564761618e-03,\n          2.37847173959480950e-03,\n         -2.96589568540237556e-05]),\n    ( # Neptune\n        5.15138902046611451e-05,\n        [ 1.53796971148509165e+01,\n         -2.59193146099879641e+01,\n          1.79258772950371181e-01],\n        [ 2.68067772490389322e-03,\n          1.62824170038242295e-03,\n         -9.51592254519715870e-05])\n).map: -> ($m, [$x, $y, $z], [$vx, $vy, $vz]) {\n    Body.new:\n        :m($m * SOLAR_MASS),\n        :r(Vector.new: :$x, :$y, :$z),\n        :v(Vector.new:\n            :x($vx * DAYS_PER_YEAR),\n            :y($vy * DAYS_PER_YEAR),\n            :z($vz * DAYS_PER_YEAR))\n};\n\nmy Body @pairs;\nfor 1..^+@bodies -> $i {\n    for ^$i -> $j {\n        @pairs.push: @bodies[$i], @bodies[$j];\n    }\n}\n\nsub total-energy(--> Num) {\n      ([+] @bodies.map: { 0.5e0 * .m * .v ** 2 })\n    - ([+] @pairs.map: -> $a, $b { ($a.m * $b.m) / ($a.r - $b.r) ** 1 })\n}\n\nsub total-momentum(--> Vector) {\n    my Vector $p .= new;\n    $p.addmul(.v, .m) for @bodies;\n    return $p;\n}\n\nsub step(Num $dt) {\n     for @pairs -> $a, $b {\n        my Vector $dr = $a.r - $b.r;\n        my Num $mag = $dt * $dr ** -3e0;\n        $a.v.addmul($dr, $b.m * $mag * -1e0);\n        $b.v.addmul($dr, $a.m * $mag);\n     }\n\n     .r.addmul(.v, $dt) for @bodies;\n}\n\n.v.addmul(total-momentum, -1e0 / .m)\n    given @bodies[Sun];\n\nsub MAIN(Int $n = 1000, Num $dt = 1e-2) {\n    printf \"%.9f\\n\", total-energy;\n    step $dt for ^$n;\n    printf \"%.9f\\n\", total-energy;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 281,
              "line": 19,
              "column": 1
            },
            "end": {
              "offset": 3290,
              "line": 133,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "",
    "description": "",
    "footer": "",
    "file": "work_examples/categories/shootout/n-body.p5.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "4m8fdn3AwngCOC7y9HeU7",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "# The Computer Language Shootout\n# http://shootout.alioth.debian.org/\n#\n# contributed by Christoph Bauer\n# converted into Perl by Márton Papp\n# fixed and cleaned up by Danny Sauer\n# optimized by Jesse Millikan\n\nuse constant PI            => 3.141592653589793;\nuse constant SOLAR_MASS    => (4 * PI * PI);\nuse constant DAYS_PER_YEAR => 365.24;\n\n#  Globals for arrays... Oh well.\n#  Almost every iteration is a range, so I keep the last index rather than a count.\nmy (@xs, @ys, @zs, @vxs, @vys, @vzs, @mass, $last);\n\nsub advance($)\n{\n  my ($dt) = @_;\n  my ($mm, $mm2, $j, $dx, $dy, $dz, $distance, $mag);\n\n#  This is faster in the outer loop...\n  for (0..$last) {\n#  But not in the inner loop. Strange.\n    for ($j = $_ + 1; $j < $last + 1; $j++) {\n      $dx = $xs[$_] - $xs[$j];\n      $dy = $ys[$_] - $ys[$j];\n      $dz = $zs[$_] - $zs[$j];\n      $distance = sqrt($dx * $dx + $dy * $dy + $dz * $dz);\n      $mag = $dt / ($distance * $distance * $distance);\n      $mm = $mass[$_] * $mag;\n      $mm2 = $mass[$j] * $mag;\n      $vxs[$_] -= $dx * $mm2;\n      $vxs[$j] += $dx * $mm;\n      $vys[$_] -= $dy * $mm2;\n      $vys[$j] += $dy * $mm;\n      $vzs[$_] -= $dz * $mm2;\n      $vzs[$j] += $dz * $mm;\n    }\n\n# We're done with planet $_ at this point\n# This could be done in a seperate loop, but it's slower\n    $xs[$_] += $dt * $vxs[$_];\n    $ys[$_] += $dt * $vys[$_];\n    $zs[$_] += $dt * $vzs[$_];\n  }\n}\n\nsub energy\n{\n  my ($e, $i, $dx, $dy, $dz, $distance);\n\n  $e = 0.0;\n  for $i (0..$last) {\n    $e += 0.5 * $mass[$i] *\n          ($vxs[$i] * $vxs[$i] + $vys[$i] * $vys[$i] + $vzs[$i] * $vzs[$i]);\n    for ($i + 1..$last) {\n      $dx = $xs[$i] - $xs[$_];\n      $dy = $ys[$i] - $ys[$_];\n      $dz = $zs[$i] - $zs[$_];\n      $distance = sqrt($dx * $dx + $dy * $dy + $dz * $dz);\n      $e -= ($mass[$i] * $mass[$_]) / $distance;\n    }\n  }\n  return $e;\n}\n\nsub offset_momentum\n{\n  my ($px, $py, $pz) = (0.0, 0.0, 0.0);\n\n  for (0..$last) {\n    $px += $vxs[$_] * $mass[$_];\n    $py += $vys[$_] * $mass[$_];\n    $pz += $vzs[$_] * $mass[$_];\n  }\n  $vxs[0] = - $px / SOLAR_MASS;\n  $vys[0] = - $py / SOLAR_MASS;\n  $vzs[0] = - $pz / SOLAR_MASS;\n}\n\n# @ns = ( sun, jupiter, saturn, uranus, neptune )\n@xs = (0, 4.84143144246472090e+00, 8.34336671824457987e+00,\n1.28943695621391310e+01, 1.53796971148509165e+01);\n@ys = (0, -1.16032004402742839e+00, 4.12479856412430479e+00,\n-1.51111514016986312e+01, -2.59193146099879641e+01);\n@zs = (0, -1.03622044471123109e-01, -4.03523417114321381e-01,\n-2.23307578892655734e-01, 1.79258772950371181e-01);\n@vxs = map {$_ * DAYS_PER_YEAR}\n  (0, 1.66007664274403694e-03, -2.76742510726862411e-03,\n2.96460137564761618e-03, 2.68067772490389322e-03);\n@vys = map {$_ * DAYS_PER_YEAR}\n  (0, 7.69901118419740425e-03, 4.99852801234917238e-03, 2.37847173959480950e-03,\n1.62824170038242295e-03);\n@vzs = map {$_ * DAYS_PER_YEAR}\n  (0, -6.90460016972063023e-05, 2.30417297573763929e-05,\n-2.96589568540237556e-05, -9.51592254519715870e-05);\n@mass = map {$_ * SOLAR_MASS}\n  (1, 9.54791938424326609e-04, 2.85885980666130812e-04, 4.36624404335156298e-05,\n5.15138902046611451e-05);\n\n$last = @xs - 1;\n\noffset_momentum();\nprintf (\"%.9f\\n\", energy());\n\nmy $n = $ARGV[0];\n\n# This does not, in fact, consume N*4 bytes of memory\nfor (1..$n){\n  advance(0.01);\n}\n\nprintf (\"%.9f\\n\", energy());\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 3281,
              "line": 116,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Perform an N-body simulation of the Jovian planets\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/shootout/n-body.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "fgPIk9GhaSS2D6VriRP2T",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Perform an N-body simulation of the Jovian planets\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Perform an N-body simulation of the Jovian planets\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 79,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 79,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "goppfzKduJXaB3VtTv3Un"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Daniel Carrera\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Daniel Carrera\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 80,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 103,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 80,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 103,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "6AsjImeVjHy-x94OpiJkl"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://benchmarksgame.alioth.debian.org/u32/performance.php?test=nbody>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://benchmarksgame.alioth.debian.org/u32/performance.php?test=nbody"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 104,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 178,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "USAGE: perl6 n-body.p6 1000\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "USAGE: perl6 n-body.p6 1000\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 179,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 207,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Expected output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Expected output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 208,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 224,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "-0.169075164\n-0.169087605\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "-0.169075164\n    -0.169087605\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 225,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 259,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 269,
              "line": 19,
              "column": 1
            }
          },
          "id": "-GuTnInC6wSUA0rSK9rjD"
        },
        {
          "text": "\nconstant SOLAR_MASS     = (4 * pi * pi);\nconstant DAYS_PER_YEAR  = 365.24e0;\n\nconstant $LAST = 4;\n\n# @ns = ( sun, jupiter, saturn, uranus, neptune )\nmy Num @XS = (0e0, 4.84143144246472090e+00, 8.34336671824457987e+00,    1.28943695621391310e+01, 1.53796971148509165e+01);\nmy Num @YS = (0e0, -1.16032004402742839e+00, 4.12479856412430479e+00,   -1.51111514016986312e+01, -2.59193146099879641e+01);\nmy Num @ZS = (0e0, -1.03622044471123109e-01, -4.03523417114321381e-01,  -2.23307578892655734e-01, 1.79258772950371181e-01);\nmy Num @VXS = map {$^a * DAYS_PER_YEAR},\n                (0, 1.66007664274403694e-03, -2.76742510726862411e-03, 2.96460137564761618e-03, 2.68067772490389322e-03);\nmy Num @VYS = map {$^a * DAYS_PER_YEAR},\n                (0, 7.69901118419740425e-03, 4.99852801234917238e-03, 2.37847173959480950e-03, 1.62824170038242295e-03);\nmy Num @VZS = map {$^a * DAYS_PER_YEAR},\n                (0, -6.90460016972063023e-05, 2.30417297573763929e-05, -2.96589568540237556e-05, -9.51592254519715870e-05);\nmy Num @MASS = map {$^a * SOLAR_MASS},\n                (1, 9.54791938424326609e-04, 2.85885980666130812e-04, 4.36624404335156298e-05, 5.15138902046611451e-05);\n\nsub MAIN($num-bodies = 1000) {\n    offset_momentum();\n    printf \"%.9f\\n\", energy();\n\n    my $N = $num-bodies;\n\n    # This does not, in fact, consume N*4 bytes of memory\n    for (1..$N) {\n        advance(0.01);\n    }\n    printf \"%.9f\\n\", energy();\n}\n\nsub advance($dt) {\n    my Num ($dx, $dy, $dz, $distance, $mag);\n\n    for 0..$LAST -> $i {\n        for ($i+1)..$LAST -> $k {\n            $dx = @XS[$i] - @XS[$k];\n            $dy = @YS[$i] - @YS[$k];\n            $dz = @ZS[$i] - @ZS[$k];\n            $distance = sqrt($dx * $dx + $dy * $dy + $dz * $dz);\n            $mag = $dt / ($distance * $distance * $distance);\n            @VXS[$i] -= $dx * @MASS[$k] * $mag;\n            @VXS[$k] += $dx * @MASS[$i] * $mag;\n            @VYS[$i] -= $dy * @MASS[$k] * $mag;\n            @VYS[$k] += $dy * @MASS[$i] * $mag;\n            @VZS[$i] -= $dz * @MASS[$k] * $mag;\n            @VZS[$k] += $dz * @MASS[$i] * $mag;\n        }\n\n        # We're done with planet $i at this point\n        @XS[$i] += $dt * @VXS[$i];\n        @YS[$i] += $dt * @VYS[$i];\n        @ZS[$i] += $dt * @VZS[$i];\n    }\n}\n\nsub energy {\n    my Num ($e, $dx, $dy, $dz, $distance);\n\n    $e = 0e0;\n    for 0..$LAST -> $i {\n        $e += 0.5 * @MASS[$i] *\n        (@VXS[$i]*@VXS[$i] + @VYS[$i]*@VYS[$i] + @VZS[$i]*@VZS[$i]);\n        for ($i + 1)..$LAST -> $k {\n            $dx = @XS[$i] - @XS[$k];\n            $dy = @YS[$i] - @YS[$k];\n            $dz = @ZS[$i] - @ZS[$k];\n            $distance = sqrt($dx * $dx + $dy * $dy + $dz * $dz);\n            $e -= (@MASS[$i] * @MASS[$k]) / $distance;\n        }\n    }\n    return $e;\n}\n\nsub offset_momentum {\n    my Num ($px, $py, $pz) = (0e0, 0e0, 0e0);\n\n    for 0..$LAST -> $i {\n        $px += @VXS[$i] * @MASS[$i];\n        $py += @VYS[$i] * @MASS[$i];\n        $pz += @VZS[$i] * @MASS[$i];\n    }\n    @VXS[0] = - $px / SOLAR_MASS;\n    @VYS[0] = - $py / SOLAR_MASS;\n    @VZS[0] = - $pz / SOLAR_MASS;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 269,
              "line": 19,
              "column": 1
            },
            "end": {
              "offset": 3371,
              "line": 108,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "",
    "description": "",
    "footer": "",
    "file": "work_examples/categories/shootout/regex-dna.p5.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "h9tqh_lOlZcNCSm9FPnaC",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "# The Computer Language Benchmarks Game\n# http://shootout.alioth.debian.org/\n# contributed by Danny Sauer\n# completely rewritten and\n# cleaned up for speed and fun by Mirco Wahab\n# improved STDIN read, regex clean up by Jake Berner\n\nuse strict;\nuse warnings;\n\nmy $l_file  = -s STDIN;\nmy $content; read STDIN, $content, $l_file;\n# this is significantly faster than using <> in this case\n\nmy $dispose =  qr/(^>.*)?\\n/m; # slight performance gain here\n   $content =~ s/$dispose//g;\nmy $l_code  =  length $content;\n\nmy @seq = ( 'agggtaaa|tttaccct',\n        '[cgt]gggtaaa|tttaccc[acg]',\n        'a[act]ggtaaa|tttacc[agt]t',\n        'ag[act]gtaaa|tttac[agt]ct',\n        'agg[act]taaa|ttta[agt]cct',\n        'aggg[acg]aaa|ttt[cgt]ccct',\n        'agggt[cgt]aa|tt[acg]accct',\n        'agggta[cgt]a|t[acg]taccct',\n        'agggtaa[cgt]|[acg]ttaccct' );\n\nmy @cnt = (0) x @seq;\nfor my $k (0..$#seq) {\n  ++$cnt[$k] while $content=~/$seq[$k]/gi;\n  printf \"$seq[$k] $cnt[$k]\\n\"\n}\n\nmy %iub = (         B => '(c|g|t)',  D => '(a|g|t)',\n  H => '(a|c|t)',   K => '(g|t)',    M => '(a|c)',\n  N => '(a|c|g|t)', R => '(a|g)',    S => '(c|g)',\n  V => '(a|c|g)',   W => '(a|t)',    Y => '(c|t)' );\n\n# using $& and no submatch marginally improves the\n# speed here, but mentioning $& causes perl to\n# define that value for the @seq patterns too, which\n# slows those down considerably. No change.\n\nmy $findiub = '(['.(join '', keys %iub).'])';\n\n$content =~ s/$findiub/$iub{$1}/g;\n\nprintf \"\\n%d\\n%d\\n%d\\n\", $l_file, $l_code, length $content;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 1515,
              "line": 51,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Match DNA 8-mers and substitute nucleotides for IUB code\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/shootout/regex-dna.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "34q_8ElWEtrDzDdaloX2J",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Match DNA 8-mers and substitute nucleotides for IUB code\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Match DNA 8-mers and substitute nucleotides for IUB code\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 85,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 85,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "OrmkAjPAb2f6rcr33QAOc"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Daniel Carrera\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Daniel Carrera\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 86,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 109,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 86,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 109,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "6po7HfHgtTQQnUX_Qa98n"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Based on the submission for Perl 5.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Based on the submission for Perl 5.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 110,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 146,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://benchmarksgame.alioth.debian.org/u32/performance.php?test=regexdna>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://benchmarksgame.alioth.debian.org/u32/performance.php?test=regexdna"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 147,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 224,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "USAGE: perl6 regex-dna.p6 regex-dna.input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "USAGE: perl6 regex-dna.p6 regex-dna.input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 225,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 267,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Expected output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Expected output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 268,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 284,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "agggtaaa|tttaccct 0\n[cgt]gggtaaa|tttaccc[acg] 3\na[act]ggtaaa|tttacc[agt]t 9\nag[act]gtaaa|tttac[agt]ct 8\nagg[act]taaa|ttta[agt]cct 10\naggg[acg]aaa|ttt[cgt]ccct 3\nagggt[cgt]aa|tt[acg]accct 4\nagggta[cgt]a|t[acg]taccct 3\nagggtaa[cgt]|[acg]ttaccct 5\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "agggtaaa|tttaccct 0\n    [cgt]gggtaaa|tttaccc[acg] 3\n    a[act]ggtaaa|tttacc[agt]t 9\n    ag[act]gtaaa|tttac[agt]ct 8\n    agg[act]taaa|ttta[agt]cct 10\n    aggg[acg]aaa|ttt[cgt]ccct 3\n    agggt[cgt]aa|tt[acg]accct 4\n    agggta[cgt]a|t[acg]taccct 3\n    agggtaa[cgt]|[acg]ttaccct 5\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 285,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 566,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "101745\n100000\n133640\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "101745\n    100000\n    133640\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 567,
                  "line": 27,
                  "column": 1
                },
                "end": {
                  "offset": 600,
                  "line": 30,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 610,
              "line": 32,
              "column": 1
            }
          },
          "id": "qdgKriKNeDVTosMKUGU3c"
        },
        {
          "text": "\nsub MAIN($input-file = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, \"regex-dna.input\")) {\n    my $input = $input-file.IO.slurp;\n    my $data = $input.lines.grep({ $_ !~~ /^ \\>/}).join.lc;\n\n    say $_ ~ ' ' ~ +$data.comb($_) for\n        /agggtaaa|tttaccct/             but 'agggtaaa|tttaccct',\n        /<[cgt]>gggtaaa|tttaccc<[acg]>/ but '[cgt]gggtaaa|tttaccc[acg]',\n        /a<[act]>ggtaaa|tttacc<[agt]>t/ but 'a[act]ggtaaa|tttacc[agt]t',\n        /ag<[act]>gtaaa|tttac<[agt]>ct/ but 'ag[act]gtaaa|tttac[agt]ct',\n        /agg<[act]>taaa|ttta<[agt]>cct/ but 'agg[act]taaa|ttta[agt]cct',\n        /aggg<[acg]>aaa|ttt<[cgt]>ccct/ but 'aggg[acg]aaa|ttt[cgt]ccct',\n        /agggt<[cgt]>aa|tt<[acg]>accct/ but 'agggt[cgt]aa|tt[acg]accct',\n        /agggta<[cgt]>a|t<[acg]>taccct/ but 'agggta[cgt]a|t[acg]taccct',\n        /agggtaa<[cgt]>|<[acg]>ttaccct/ but 'agggtaa[cgt]|[acg]ttaccct';\n\n    say();\n\n    my %iub = 'b' => '(c|g|t)', 'd' => '(a|g|t)', 'h' => '(a|c|t)',\n              'k' => '(g|t)',   'm' => '(a|c)',   'n' => '(a|c|g|t)',\n              'r' => '(a|g)',   's' => '(c|g)',   'v' => '(a|c|g)',\n              'w' => '(a|t)',   'y' => '(c|t)';\n\n    my $output = $data.subst(/(<[bdhkmnrsvwy]>)/, { %iub{$_} }, :g);\n\n    .chars.say for $input, $data, $output;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 610,
              "line": 32,
              "column": 1
            },
            "end": {
              "offset": 1907,
              "line": 61,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Read DNA sequences and write their reverse-complement\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/shootout/revcomp-v2.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "NODmHp3o_bvJQ8o0zYJLq",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Read DNA sequences and write their reverse-complement\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Read DNA sequences and write their reverse-complement\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 82,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 82,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "_AMxf9KAgf_yNNCnqa7JI"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Gerhard R\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Gerhard R\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 83,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 101,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 83,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 101,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "sd2LiEg8lDYlwLY_UIGUc"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://benchmarksgame.alioth.debian.org/u32/performance.php?test=revcomp>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://benchmarksgame.alioth.debian.org/u32/performance.php?test=revcomp"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 102,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 178,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Expected output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Expected output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 179,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 195,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": ">ONE Homo sapiens alu\nCGGAGTCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAAC\nCTCCGCCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACA\nGGCGCGCGCCACCACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCAT\nGTTGGCCAGGCTGGTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAA\nAGTGCTGGGATTACAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTC\nTGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCGCCTCCCGG\nGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGCGCGCCACC\nACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGGCCAGGCTG\nGTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTA\nCAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTCTGTCGCCCAGGCT\nGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCGCCTCCCGGGTTCAAGCGATTC\nTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGCGCGCCACCACGCCCGGCTAAT\nTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGGCCAGGCTGGTCTCGAACTCCT\nGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGCGTGAGCCA\nCCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGC\nGCGATCTCGGCTCACTGCAACCTCCGCCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCC\nTCCCGAGTAGCTGGGATTACAGGCGCGCGCCACCACGCCCGGCTAATTTTTGTATTTTTA\nGTAGAGACGGGGTTTCACCATGTTGGCCAGGCTGGTCTCGAACTCCTGACCTCAGGTGAT\nCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGCGTGAGCCACCGCGCCCGGCCT\nTTTTGAGACGGAGTCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTC\nACTGCAACCTCCGCCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTG\nGGATTACAGGCGCGCGCCACCACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGT\nTTCACCATGTTGGCCAGGCTGGTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGG\nCCTCCCAAAGTGCTGGGATTACAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAG\nTCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCG\nCCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGC\nGCGCCACCACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGG\nCCAGGCTGGTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGC\nTGGGATTACAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTCTGTCG\nCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCGCCTCCCGGGTTCA\nAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGCGCGCCACCACGCC\nCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGGCCAGGCTGGTCTC\nGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGC\nGTGAGCCACCGCGCCCGGCC\n>TWO IUB ambiguity codes\nTAGGDHACHATCRGTRGVTGAGWTATGYTGCTGTCABACDWVTRTAAGAVVAGATTTNDA\nGASMTCTGCATBYTTCAAKTTACMTATTACTTCATARGGYACMRTGTTTTYTATACVAAT\nTTCTAKGDACKADACTATATNTANTCGTTCACGBCGYSCBHTANGGTGATCGTAAAGTAA\nCTATBAAAAGATSTGWATBCSGAKHTTABBAACGTSYCATGCAAVATKTSKTASCGGAAT\nWVATTTNTCCTTCTTCTTDDAGTGGTTGGATACVGTTAYMTMTBTACTTTHAGCTAGBAA\nAAGAGKAAGTTRATWATCAGATTMDDTTTAAAVAAATATTKTCYTAAATTVCNKTTRACG\nADTATATTTATGATSADSCAATAWAGCGRTAGTGTAAGTGACVGRADYGTGCTACHVSDT\nCTVCARCSYTTAATATARAAAATTTAATTTACDAATTGBACAGTAYAABATBTGCAGBVG\nTGATGGDCAAAATBNMSTTABKATTGGSTCCTAGBTTACTTGTTTAGTTTATHCGATSTA\nAAGTCGAKAAASTGTTTTAWAKCAGATATACTTTTMTTTTGBATAGAGGAGCMATGATRA\nAAGGNCAYDCCDDGAAAGTHGBTAATCKYTBTACBGTBCTTTTTGDTAASSWTAAWAARA\nTTGGCTAAGWGRADTYACATAGCTCBTAGATAWAGCAATNGTATMATGTTKMMAGTAWTC\nCCNTSGAAWATWCAAAAMACTGAADNTYGATNAATCCGAYWNCTAACGTTAGAGDTTTTC\nATCTGGKRTAVGAABVCTGWGBTCTDVGKATTBTCTAAGGVADAAAVWTCTAGGGGAGGG\nTTAGAACAATTAAHTAATNAAATGCATKATCTAAYRTDTCAGSAYTTYHGATRTTWAVTA\nBGNTCDACAGBCCRCAGWCRTCABTGMMAWGMCTCAACCGATRTGBCAVAATCGTDWDAA\nCAYAWAATWCTGGTAHCCCTAAGATAACSCTTAGTGSAACAWTBGTCDTTDGACWDBAAC\nHTTTNGSKTYYAAYGGATNTGATTTAARTTAMBAATCTAAGTBTCATYTAACTTADTGTT\nTCGATACGAAHGGCYATATACCWDTKYATDCSHTDTCAAAATGTGBACTGSCCVGATGTA\nTCMMAGCCTTDAAABAATGAAGAGTAACTHATMGVTTAATAACCCGGTTVSANTGCAATT\nGTGAGATTTAMGTTTAMAAYGCTGACAYAAAAAGGCACAMYTAAGVGGCTGGAABVTACG\nGATTSTYGTBVAKTATWACCGTGTKAGTDTGTATGTTTAAAGGAAAAAGTAACATARAAA\nGGTYCAMNYAAABTATAGNTSATANAGTCATCCTATWADKAACTRGTMSACDGTATSAYT\nAAHSHGTAABYGACTYTATADTGSTATAGAGAAATCGNTAAAGGAAATCAGTTGTNCYMV\nTNACDRTATBNATATASTAGAAMSCGGGANRCKKMCAAACATTNAGTCTRMAATBMTACC\nCGTACTTCTBGDSYAATWGAAAATGACADDCHAKAAAYATATTKTTTTCACANACWAGAA\nAKATCCTTATTAYKHKCTAAACARTATTTTDATBTVWCYGCAATACTAGGKAAASTTDGA\nMGGCHTTHAATVCAHDRYAGGRCTATACGTCMAGAGAGCTBTHGNACARTCCBDCTAAGA\nGCGGCTTTARTAAAGAATCCNAGTAWBTGACTTGAATTACWTVACAGAAABCAATNAAAC\nCGTNTRANTTGAYCMAWBADTANABRGGTKTHTWTAGTTVCTMBKTAGMTVKCCAGCANT\nTVAGSWTTAGCCGCRHTTTCCTTHNTATTAAGAAGAATAGGMTRAARTCTABGTACDTTT\nTATAAVDHAHTATAGATCCTAGTAAGYTWATDWCATGAGGGATAGTAAMDMNGBASTWAM\nTSTATRBAYDABATGTATATYCGCACTGTTTTAACMCWBTATAWAGTATBTSTATVTTAR\nCCTMTTAAKADATCAACTAATYTSVTAKGDATTATGCKTCAYCAKAATACTTKAANGAGT\nATTSDAGATCGGAAATACTTAAYAAVGTATMCGCTTGTGTDCTAATYTATTTTATTTWAA\nCAGWRCTATGTAGMTGTTTGTTYKTNGTTKTCAGAACNTRACCTACKTGSRATGTGGGGG\nCTGTCATTAAGTAAATNGSTTABCCCCTCGCAGCTCWHTCGCGAAGCAVATGCKACGHCA\nACAKTTAATAACASAAADATTWNYTGTAATTGTTCGTMHACHTWATGTGCWTTTTGAAHY\nACTTTGTAYAMSAAACTTAADAAATATAGTABMATATYAATGSGGTAGTTTGTGTBYGGT\nTWSGSVGWMATTDMTCCWWCABTCSVACAGBAATGTTKATBGTCAATAATCTTCTTAAAC\nARVAATHAGYBWCTRWCABGTWWAATCTAAGTCASTAAAKTAAGVKBAATTBGABACGTA\nAGGTTAAATAAAAACTRMDTWBCTTTTTAATAAAAGATMGCCTACKAKNTBAGYRASTGT\nASSTCGTHCGAAKTTATTATATTYTTTGTAGAACATGTCAAAACTWTWTHGKTCCYAATA\nAAGTGGAYTMCYTAARCSTAAATWAKTGAATTTRAGTCTSSATACGACWAKAASATDAAA\nTGYYACTSAACAAHAKTSHYARGASTATTATTHAGGYGGASTTTBGAKGATSANAACACD\nTRGSTTRAAAAAAAACAAGARTCVTAGTAAGATAWATGVHAAKATWGAAAAGTYAHVTAC\nTCTGRTGTCAWGATRVAAKTCGCAAVCGASWGGTTRTCSAMCCTAACASGWKKAWDAATG\nACRCBACTATGTGTCTTCAAAHGSCTATATTTCGTVWAGAAGTAYCKGARAKSGKAGTAN\nTTTCYACATWATGTCTAAAADMDTWCAATSTKDACAMAADADBSAAATAGGCTHAHAGTA\nCGACVGAATTATAAAGAHCCVAYHGHTTTACATSTTTATGNCCMTAGCATATGATAVAAG\n>THREE Homo sapiens frequency\nATATTTATCTTTTCACTTCCTACATTGGTCAGACCATTATTCGACACGTGGCGTCATTTT\nGTCATACCGGGTAATGTTGGAAACAAAACGTACTGATAAAATACTGAGTTGTAAACTCTA\nATCAGATAACGCGCTTGGATATTAAGATTCACACAGGGGTTTCGGCTGTAAAAAAACTTG\nTGGAGCTGTTCTGGGACAGATAAGTTGTACCTCGTACTTAGCTAATTAATGAACCAACTG\nATTACGATAGAACAATTCTGAGGCCGCCAGGACAGCCAAATTTTAATCTTATAAAGCTGG\nAAACAGCCGGTATTAGCTTCTCGCATACTTTGCCTGCATTGGTACCTTACAGATATCAGC\nGTAGTCATATACACCTCGGTCTCAGCTAAGCTTGTATCTCTTAGAGTAGTTCAAAGATAG\nTGGACAATACCTGTGGAATCGATTGCAGATATGGATTTATTTAACTACTGAGTCTCATTC\nACAAGCTAAGCAAGGAGCACGTTTTGGTGCCGGCATACCGATTTGCTATCATGTCAGCAA\nATTTGCGTTGTATTCCTAGTTGCACCCATTAAGGCCACACTCCGAACCTAATTATTACAT\nCGCAAAGACATGTACGAAGGACCCGATGTCGAATAGAAGGGAGGACTGTTCATTGGAAGC\nTAGACCAGAGGAATCGCAAAGATGCAACTCTTACAATAAAAATCTAATTTCAGTCAACAC\nGCAATTTCTATAAGGTTTCCGATAATAATGAACCGTCTTCCACAGGGGAATTTGCCATGC\nTCGTAAAAGTAGTTAATCCAAGTAGAAGAAATTTTGATAATGTTTTAAGTTGGCACGAAG\nGAATTCAGAGAGATCTTACCTAACAAAGGCATTAGTAGATGTTCCTTGGTTCACACTCGG\nTCAATCAGAGCACATACTACGGGCGATACCGGGAATGACACAACATCAATGAGATTGTTA\nAGTGAGGTAATTGACTTTAGAGGACTCGATCAGTATACTGTCACTATGAACATCGTATTA\nATTGTTATCCGATATATACACCACCGATTTGCTTGTGCAAGGTTACAGACCCATTCGATA\nAATACAAACACGGAGCGATATTATTTAAGGAGTGCTGTCTTCAAAAGAATTATTCCCACA\nCCGACATAAGAACTTCGCTCCGTCATTCCAGATTTAAATAACATAACGTAACGCTTTGCT\nGATAACATAACATAACCGAGAATTTGCTTAGGAAATTTGGAGCAATATTGCATTGTTTCT\nCAGTCATCACAAGGCCCGCCAAAGAACTCTGAGAATCAGGATTCAACATGATTGGTAAGA\nCTCTATATATATAACTTAATTCTTGTGTCCGGAGATAGAAAGAGGACGAGAGATACTACG\nAAAGAAAGTGTACTTCGATGTATCAATTCAGACGCCTTCTCTATCATCAACATTATAGGT\nCTCGTATATGCTCGGCGCGATCTGCTTCTCTCCGCCAATAGCCCCATAGTGTATTTCAAG\nCGCAGTAACAGTGAAATCGTTACGAAGGTAGGGATGTTGCTTATAATTGTCGTAACTTAT\nCGCTTATGTATCTTTCAAGAATGAACGGCAGCATATACATACGTTCTACCTTTAGCTACA\nAAGCATCCATATACTCCCTCTCATGATTGAAACTCTTCCCTATTTTGTAGCCAATAGTGA\nAAGCGTATTAGTATAAATTCGTCGGTTTTTCACTCGCAACTGTTATACTCTGCAAACAAA\nCGAAAGCCTCATAGTACAAACCTAAAGCTACATACTTCATCATTGGCAGACCAGTGGCGG\nTATTTCTACGGAAGCATCACTATAGATATAAAGTTTCCCTTCATGTACGTCTGTTAACCA\nTATCACAAGAAACTGCTATCTCTGTCACGTAACAATTCACGCGCCTTATCGCCAAATGTT\nCATATATGCGCGGTATACGTATGAACGAATACTAATTAGTATAACGGAGGATTCACGGGA\nGGGATACTTGGGGCATTTATAAATCGTCTAAAAATTTTCTATCAGCACTTGCGGGTTATA\nGTGGATTACTAGGCAACATAATATTCTGTATTGGTCCAAATGACGCTATAGATAAATTAG\nCAAAATACATTGTTTCCATTTATGTAAGTCGAAACTCCAGGACTCCCGGGAACCAGTTAA\nACCGTCTGGAAAAGACACATTGTGAGCGGGACTTCAATGATAGCTTTCAATGAGCTTCTC\nATGCTTGGGGTCTGTACATATATGTTGGCGAAATTATCGTCTGTATTCTGTTATGCTTTG\nATCATGGGTTATTAGTATAGTGTCCGGTTAAGTACCAATACCGCTAGAGACCCGACCTAA\nGTCGATAACTAACGATCATCGACGTAAGGATCGTCTCGATCAGTACTTCAGTCTAGATCT\nGGGAATAGTAACTCGTTAGTGAACTATGTCGTGTCATAACTCTAAAATGCAATCAAATCT\nTATTATTGAGTATTGATTATATAAAGCATCCGCTTAGCTTTACCCTCAAATGTTATATGC\nAATTTAAAGCGCTTGATATCGTCTACTCAAGTTCAGGTTTCACATGGCCGCAACGTGACG\nTTATTAGAGGTGGGTCATCATCTCTGAGGCTAGTGATGTTGAATACTCATTGAATGGGAA\nGTGGAATACCATGCTCGTAGGTAACAGCATGACCTATAAAATATACTATGGGTGTGTGGT\nAGATCAATATTGTTCAAGCATATCGTAACAATAACGGCTGAAATGTTACTGACATGAAAG\nAGGGAGTCCAAACCATTCTAACAGCTGATCAAGTCGTCTAAAAACGCCTGGTTCAGCCTT\nAAGAGTTATAAGCCAGACAAATTGTATCAATAGAGAATCCGTAAATTCCTCGGCCAACCT\nCTTGCAAAGACATCACTATCAATATACTACCGTGATCTTAATTAGTGAACTTATATAAAT\nATCTACAACCAGATTCAACGGAAAAGCTTTAGTGGATTAGAAATTGCCAAGAATCACATT\nCATGTGGGTTCGAATGCTTTAGTAATACCATTTCGCCGAGTAGTCACTTCGCTGAACTGT\nCGTAAATTGCTATGACATAATCGAAAAGGATTGTCAAGAGTCGATTACTGCGGACTAATA\nATCCCCACGGGGGTGGTCTCATGTCTCCCCAGGCGAGTGGGGACGGTTGATAAACACGCT\nGCATCGCGGACTGATGTTCCCAGTATTACATAGTCACATTGGATTGCGAGTAGTCTACCT\nATTTATGAGCGAGAGATGCCTCTAACTACTTCGACTTTTAAAACCTTTCCACGCCAGTAT\nTCGGCGAAAGGGAAGTATTAAGGGTTGTCATAATTAAGCTGATACCACTTCAGACTTTGC\nTCTACTTCTGTCTTTCATTGGTTTAGTAAAGTCTGTCCATTCGTCGAGACCGTCTTTTGC\nAGCCTCATTCTACCAACTGCTCCGACTCTTAGTCTGCTTCTCCCAGCGTTATAACAAGAG\nGCATTTTGTCATCCTTAAAACAATAATAAAGAACTCGGAGCACTGATATAATGACTGAAT\nTAGAACCGCTTAAAAATACAACGAATAGATAAGACTATCGGATAAGATCTAATATGTAGT\nGATTAAGCCCTTTATTAATTAATAATAGTTACCCTTTCTGATGTAACGCGACATATTACG\nATTTAGTGGCACGTCTGAATTGCAAAGCAGATCTCTACCCGATTTTTATTATAAATCCCG\nTATACATCTTGACTTGAGTAATTGTTCATCTTTTTATATCTCTTCGTACTACAAATAATT\nAATATCTCAACCCGTATTGTGTGATTCTAATTACCAACAGAATACGAGGAGGTTTTTGCT\nTAGGGCCATATATAATGAATCTATCTCGTTTATTCGCGGAACCCGAGATAACATTACGAT\nGTAACTATTTTAGAGAACTTAATACAAGAAACATTGCTGATTACTCATAACTAAATGCTT\nGGTAATATATCCTCAGTGCCCCTACCATCTTTTACGCAGGGATGTAATTACTTAGGATTC\nATTGTGTAAGAATTACAATGAACGATGGATATGAAGGCATGTTGCGAGGTGTTCCTTGGT\nATGTGAAGTTCGCAGGGCAACAAAAATTTCGCAGAATAGGCCTCAAAGTATTGGTAAAGA\nAGACAACTAATCATCACGAGCTTCTGATATCAATACGAACGAGTCCTGTGATGGATGAAA\nGAAAGTCGTATCGAAAATGTCAAGAGTCTGCCCAATGTAACTTACTTCAAAAAATAACGC\nTTCCGCCAAGTACGTTCGAATAAACGTAATTTTAAAAATACATAAGGGGTGTTAGAAAGT\nAAGCGACGGGATATAAGTTAGACTCAAGATTCCGCCGTAAAACGAGACTGATTCCGAAGA\nTTGTTCGTGGATCTGGTCATGACTTTCACTGAGTAAGGAGTTTCGACATATGTCAATAAA\nCACAAAAATAGAAGCTATTCGATCTGAAAAATATTAGGACAAGAAACTATCTCACGCTAG\nCCCAGAATATTCACTCACCCACGGGCGATACTAAAGCACTATATAGTCGCGTGATTACTA\nTACATATGGTACACATAAGAATCACGATCAGGTTCTCAATTTTCAACAATATATGTTTAT\nTTGCATAGGTAATATTAGGCCTTTAAGAGAAGGATGGGTGAGATACTCCGGGGATGGCGG\nCAATAAAGAAAAACACGATATGAGTAATAGGATCCTAATATCTTGGCGAGAGACTTAAGG\nTACGAATTTTGCGCAATCTATTTTTTACTTGGCCAGAATTCATGTATGGTATAAGTACGA\nACTTTTTTGATCACTTTCATGGCTACCTGATTAGGATAGTTTGAGGAATTTCCCAAATAT\nACCGATTTAATATACACTAGGGCTTGTCACTTTGAGTCAGAAAAAGAATATAATTACTTA\nGGGTAATGCTGCATACATATTCTTATATTGCAAAGGTTCTCTGGGTAATCTTGAGCCTTC\nACGATACCTGGTGAAGTGTT\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": ">ONE Homo sapiens alu\n    CGGAGTCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAAC\n    CTCCGCCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACA\n    GGCGCGCGCCACCACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCAT\n    GTTGGCCAGGCTGGTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAA\n    AGTGCTGGGATTACAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTC\n    TGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCGCCTCCCGG\n    GTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGCGCGCCACC\n    ACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGGCCAGGCTG\n    GTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTA\n    CAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTCTGTCGCCCAGGCT\n    GGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCGCCTCCCGGGTTCAAGCGATTC\n    TCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGCGCGCCACCACGCCCGGCTAAT\n    TTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGGCCAGGCTGGTCTCGAACTCCT\n    GACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGCGTGAGCCA\n    CCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGC\n    GCGATCTCGGCTCACTGCAACCTCCGCCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCC\n    TCCCGAGTAGCTGGGATTACAGGCGCGCGCCACCACGCCCGGCTAATTTTTGTATTTTTA\n    GTAGAGACGGGGTTTCACCATGTTGGCCAGGCTGGTCTCGAACTCCTGACCTCAGGTGAT\n    CCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGCGTGAGCCACCGCGCCCGGCCT\n    TTTTGAGACGGAGTCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTC\n    ACTGCAACCTCCGCCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTG\n    GGATTACAGGCGCGCGCCACCACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGT\n    TTCACCATGTTGGCCAGGCTGGTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGG\n    CCTCCCAAAGTGCTGGGATTACAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAG\n    TCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCG\n    CCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGC\n    GCGCCACCACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGG\n    CCAGGCTGGTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGC\n    TGGGATTACAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTCTGTCG\n    CCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCGCCTCCCGGGTTCA\n    AGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGCGCGCCACCACGCC\n    CGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGGCCAGGCTGGTCTC\n    GAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGC\n    GTGAGCCACCGCGCCCGGCC\n    >TWO IUB ambiguity codes\n    TAGGDHACHATCRGTRGVTGAGWTATGYTGCTGTCABACDWVTRTAAGAVVAGATTTNDA\n    GASMTCTGCATBYTTCAAKTTACMTATTACTTCATARGGYACMRTGTTTTYTATACVAAT\n    TTCTAKGDACKADACTATATNTANTCGTTCACGBCGYSCBHTANGGTGATCGTAAAGTAA\n    CTATBAAAAGATSTGWATBCSGAKHTTABBAACGTSYCATGCAAVATKTSKTASCGGAAT\n    WVATTTNTCCTTCTTCTTDDAGTGGTTGGATACVGTTAYMTMTBTACTTTHAGCTAGBAA\n    AAGAGKAAGTTRATWATCAGATTMDDTTTAAAVAAATATTKTCYTAAATTVCNKTTRACG\n    ADTATATTTATGATSADSCAATAWAGCGRTAGTGTAAGTGACVGRADYGTGCTACHVSDT\n    CTVCARCSYTTAATATARAAAATTTAATTTACDAATTGBACAGTAYAABATBTGCAGBVG\n    TGATGGDCAAAATBNMSTTABKATTGGSTCCTAGBTTACTTGTTTAGTTTATHCGATSTA\n    AAGTCGAKAAASTGTTTTAWAKCAGATATACTTTTMTTTTGBATAGAGGAGCMATGATRA\n    AAGGNCAYDCCDDGAAAGTHGBTAATCKYTBTACBGTBCTTTTTGDTAASSWTAAWAARA\n    TTGGCTAAGWGRADTYACATAGCTCBTAGATAWAGCAATNGTATMATGTTKMMAGTAWTC\n    CCNTSGAAWATWCAAAAMACTGAADNTYGATNAATCCGAYWNCTAACGTTAGAGDTTTTC\n    ATCTGGKRTAVGAABVCTGWGBTCTDVGKATTBTCTAAGGVADAAAVWTCTAGGGGAGGG\n    TTAGAACAATTAAHTAATNAAATGCATKATCTAAYRTDTCAGSAYTTYHGATRTTWAVTA\n    BGNTCDACAGBCCRCAGWCRTCABTGMMAWGMCTCAACCGATRTGBCAVAATCGTDWDAA\n    CAYAWAATWCTGGTAHCCCTAAGATAACSCTTAGTGSAACAWTBGTCDTTDGACWDBAAC\n    HTTTNGSKTYYAAYGGATNTGATTTAARTTAMBAATCTAAGTBTCATYTAACTTADTGTT\n    TCGATACGAAHGGCYATATACCWDTKYATDCSHTDTCAAAATGTGBACTGSCCVGATGTA\n    TCMMAGCCTTDAAABAATGAAGAGTAACTHATMGVTTAATAACCCGGTTVSANTGCAATT\n    GTGAGATTTAMGTTTAMAAYGCTGACAYAAAAAGGCACAMYTAAGVGGCTGGAABVTACG\n    GATTSTYGTBVAKTATWACCGTGTKAGTDTGTATGTTTAAAGGAAAAAGTAACATARAAA\n    GGTYCAMNYAAABTATAGNTSATANAGTCATCCTATWADKAACTRGTMSACDGTATSAYT\n    AAHSHGTAABYGACTYTATADTGSTATAGAGAAATCGNTAAAGGAAATCAGTTGTNCYMV\n    TNACDRTATBNATATASTAGAAMSCGGGANRCKKMCAAACATTNAGTCTRMAATBMTACC\n    CGTACTTCTBGDSYAATWGAAAATGACADDCHAKAAAYATATTKTTTTCACANACWAGAA\n    AKATCCTTATTAYKHKCTAAACARTATTTTDATBTVWCYGCAATACTAGGKAAASTTDGA\n    MGGCHTTHAATVCAHDRYAGGRCTATACGTCMAGAGAGCTBTHGNACARTCCBDCTAAGA\n    GCGGCTTTARTAAAGAATCCNAGTAWBTGACTTGAATTACWTVACAGAAABCAATNAAAC\n    CGTNTRANTTGAYCMAWBADTANABRGGTKTHTWTAGTTVCTMBKTAGMTVKCCAGCANT\n    TVAGSWTTAGCCGCRHTTTCCTTHNTATTAAGAAGAATAGGMTRAARTCTABGTACDTTT\n    TATAAVDHAHTATAGATCCTAGTAAGYTWATDWCATGAGGGATAGTAAMDMNGBASTWAM\n    TSTATRBAYDABATGTATATYCGCACTGTTTTAACMCWBTATAWAGTATBTSTATVTTAR\n    CCTMTTAAKADATCAACTAATYTSVTAKGDATTATGCKTCAYCAKAATACTTKAANGAGT\n    ATTSDAGATCGGAAATACTTAAYAAVGTATMCGCTTGTGTDCTAATYTATTTTATTTWAA\n    CAGWRCTATGTAGMTGTTTGTTYKTNGTTKTCAGAACNTRACCTACKTGSRATGTGGGGG\n    CTGTCATTAAGTAAATNGSTTABCCCCTCGCAGCTCWHTCGCGAAGCAVATGCKACGHCA\n    ACAKTTAATAACASAAADATTWNYTGTAATTGTTCGTMHACHTWATGTGCWTTTTGAAHY\n    ACTTTGTAYAMSAAACTTAADAAATATAGTABMATATYAATGSGGTAGTTTGTGTBYGGT\n    TWSGSVGWMATTDMTCCWWCABTCSVACAGBAATGTTKATBGTCAATAATCTTCTTAAAC\n    ARVAATHAGYBWCTRWCABGTWWAATCTAAGTCASTAAAKTAAGVKBAATTBGABACGTA\n    AGGTTAAATAAAAACTRMDTWBCTTTTTAATAAAAGATMGCCTACKAKNTBAGYRASTGT\n    ASSTCGTHCGAAKTTATTATATTYTTTGTAGAACATGTCAAAACTWTWTHGKTCCYAATA\n    AAGTGGAYTMCYTAARCSTAAATWAKTGAATTTRAGTCTSSATACGACWAKAASATDAAA\n    TGYYACTSAACAAHAKTSHYARGASTATTATTHAGGYGGASTTTBGAKGATSANAACACD\n    TRGSTTRAAAAAAAACAAGARTCVTAGTAAGATAWATGVHAAKATWGAAAAGTYAHVTAC\n    TCTGRTGTCAWGATRVAAKTCGCAAVCGASWGGTTRTCSAMCCTAACASGWKKAWDAATG\n    ACRCBACTATGTGTCTTCAAAHGSCTATATTTCGTVWAGAAGTAYCKGARAKSGKAGTAN\n    TTTCYACATWATGTCTAAAADMDTWCAATSTKDACAMAADADBSAAATAGGCTHAHAGTA\n    CGACVGAATTATAAAGAHCCVAYHGHTTTACATSTTTATGNCCMTAGCATATGATAVAAG\n    >THREE Homo sapiens frequency\n    ATATTTATCTTTTCACTTCCTACATTGGTCAGACCATTATTCGACACGTGGCGTCATTTT\n    GTCATACCGGGTAATGTTGGAAACAAAACGTACTGATAAAATACTGAGTTGTAAACTCTA\n    ATCAGATAACGCGCTTGGATATTAAGATTCACACAGGGGTTTCGGCTGTAAAAAAACTTG\n    TGGAGCTGTTCTGGGACAGATAAGTTGTACCTCGTACTTAGCTAATTAATGAACCAACTG\n    ATTACGATAGAACAATTCTGAGGCCGCCAGGACAGCCAAATTTTAATCTTATAAAGCTGG\n    AAACAGCCGGTATTAGCTTCTCGCATACTTTGCCTGCATTGGTACCTTACAGATATCAGC\n    GTAGTCATATACACCTCGGTCTCAGCTAAGCTTGTATCTCTTAGAGTAGTTCAAAGATAG\n    TGGACAATACCTGTGGAATCGATTGCAGATATGGATTTATTTAACTACTGAGTCTCATTC\n    ACAAGCTAAGCAAGGAGCACGTTTTGGTGCCGGCATACCGATTTGCTATCATGTCAGCAA\n    ATTTGCGTTGTATTCCTAGTTGCACCCATTAAGGCCACACTCCGAACCTAATTATTACAT\n    CGCAAAGACATGTACGAAGGACCCGATGTCGAATAGAAGGGAGGACTGTTCATTGGAAGC\n    TAGACCAGAGGAATCGCAAAGATGCAACTCTTACAATAAAAATCTAATTTCAGTCAACAC\n    GCAATTTCTATAAGGTTTCCGATAATAATGAACCGTCTTCCACAGGGGAATTTGCCATGC\n    TCGTAAAAGTAGTTAATCCAAGTAGAAGAAATTTTGATAATGTTTTAAGTTGGCACGAAG\n    GAATTCAGAGAGATCTTACCTAACAAAGGCATTAGTAGATGTTCCTTGGTTCACACTCGG\n    TCAATCAGAGCACATACTACGGGCGATACCGGGAATGACACAACATCAATGAGATTGTTA\n    AGTGAGGTAATTGACTTTAGAGGACTCGATCAGTATACTGTCACTATGAACATCGTATTA\n    ATTGTTATCCGATATATACACCACCGATTTGCTTGTGCAAGGTTACAGACCCATTCGATA\n    AATACAAACACGGAGCGATATTATTTAAGGAGTGCTGTCTTCAAAAGAATTATTCCCACA\n    CCGACATAAGAACTTCGCTCCGTCATTCCAGATTTAAATAACATAACGTAACGCTTTGCT\n    GATAACATAACATAACCGAGAATTTGCTTAGGAAATTTGGAGCAATATTGCATTGTTTCT\n    CAGTCATCACAAGGCCCGCCAAAGAACTCTGAGAATCAGGATTCAACATGATTGGTAAGA\n    CTCTATATATATAACTTAATTCTTGTGTCCGGAGATAGAAAGAGGACGAGAGATACTACG\n    AAAGAAAGTGTACTTCGATGTATCAATTCAGACGCCTTCTCTATCATCAACATTATAGGT\n    CTCGTATATGCTCGGCGCGATCTGCTTCTCTCCGCCAATAGCCCCATAGTGTATTTCAAG\n    CGCAGTAACAGTGAAATCGTTACGAAGGTAGGGATGTTGCTTATAATTGTCGTAACTTAT\n    CGCTTATGTATCTTTCAAGAATGAACGGCAGCATATACATACGTTCTACCTTTAGCTACA\n    AAGCATCCATATACTCCCTCTCATGATTGAAACTCTTCCCTATTTTGTAGCCAATAGTGA\n    AAGCGTATTAGTATAAATTCGTCGGTTTTTCACTCGCAACTGTTATACTCTGCAAACAAA\n    CGAAAGCCTCATAGTACAAACCTAAAGCTACATACTTCATCATTGGCAGACCAGTGGCGG\n    TATTTCTACGGAAGCATCACTATAGATATAAAGTTTCCCTTCATGTACGTCTGTTAACCA\n    TATCACAAGAAACTGCTATCTCTGTCACGTAACAATTCACGCGCCTTATCGCCAAATGTT\n    CATATATGCGCGGTATACGTATGAACGAATACTAATTAGTATAACGGAGGATTCACGGGA\n    GGGATACTTGGGGCATTTATAAATCGTCTAAAAATTTTCTATCAGCACTTGCGGGTTATA\n    GTGGATTACTAGGCAACATAATATTCTGTATTGGTCCAAATGACGCTATAGATAAATTAG\n    CAAAATACATTGTTTCCATTTATGTAAGTCGAAACTCCAGGACTCCCGGGAACCAGTTAA\n    ACCGTCTGGAAAAGACACATTGTGAGCGGGACTTCAATGATAGCTTTCAATGAGCTTCTC\n    ATGCTTGGGGTCTGTACATATATGTTGGCGAAATTATCGTCTGTATTCTGTTATGCTTTG\n    ATCATGGGTTATTAGTATAGTGTCCGGTTAAGTACCAATACCGCTAGAGACCCGACCTAA\n    GTCGATAACTAACGATCATCGACGTAAGGATCGTCTCGATCAGTACTTCAGTCTAGATCT\n    GGGAATAGTAACTCGTTAGTGAACTATGTCGTGTCATAACTCTAAAATGCAATCAAATCT\n    TATTATTGAGTATTGATTATATAAAGCATCCGCTTAGCTTTACCCTCAAATGTTATATGC\n    AATTTAAAGCGCTTGATATCGTCTACTCAAGTTCAGGTTTCACATGGCCGCAACGTGACG\n    TTATTAGAGGTGGGTCATCATCTCTGAGGCTAGTGATGTTGAATACTCATTGAATGGGAA\n    GTGGAATACCATGCTCGTAGGTAACAGCATGACCTATAAAATATACTATGGGTGTGTGGT\n    AGATCAATATTGTTCAAGCATATCGTAACAATAACGGCTGAAATGTTACTGACATGAAAG\n    AGGGAGTCCAAACCATTCTAACAGCTGATCAAGTCGTCTAAAAACGCCTGGTTCAGCCTT\n    AAGAGTTATAAGCCAGACAAATTGTATCAATAGAGAATCCGTAAATTCCTCGGCCAACCT\n    CTTGCAAAGACATCACTATCAATATACTACCGTGATCTTAATTAGTGAACTTATATAAAT\n    ATCTACAACCAGATTCAACGGAAAAGCTTTAGTGGATTAGAAATTGCCAAGAATCACATT\n    CATGTGGGTTCGAATGCTTTAGTAATACCATTTCGCCGAGTAGTCACTTCGCTGAACTGT\n    CGTAAATTGCTATGACATAATCGAAAAGGATTGTCAAGAGTCGATTACTGCGGACTAATA\n    ATCCCCACGGGGGTGGTCTCATGTCTCCCCAGGCGAGTGGGGACGGTTGATAAACACGCT\n    GCATCGCGGACTGATGTTCCCAGTATTACATAGTCACATTGGATTGCGAGTAGTCTACCT\n    ATTTATGAGCGAGAGATGCCTCTAACTACTTCGACTTTTAAAACCTTTCCACGCCAGTAT\n    TCGGCGAAAGGGAAGTATTAAGGGTTGTCATAATTAAGCTGATACCACTTCAGACTTTGC\n    TCTACTTCTGTCTTTCATTGGTTTAGTAAAGTCTGTCCATTCGTCGAGACCGTCTTTTGC\n    AGCCTCATTCTACCAACTGCTCCGACTCTTAGTCTGCTTCTCCCAGCGTTATAACAAGAG\n    GCATTTTGTCATCCTTAAAACAATAATAAAGAACTCGGAGCACTGATATAATGACTGAAT\n    TAGAACCGCTTAAAAATACAACGAATAGATAAGACTATCGGATAAGATCTAATATGTAGT\n    GATTAAGCCCTTTATTAATTAATAATAGTTACCCTTTCTGATGTAACGCGACATATTACG\n    ATTTAGTGGCACGTCTGAATTGCAAAGCAGATCTCTACCCGATTTTTATTATAAATCCCG\n    TATACATCTTGACTTGAGTAATTGTTCATCTTTTTATATCTCTTCGTACTACAAATAATT\n    AATATCTCAACCCGTATTGTGTGATTCTAATTACCAACAGAATACGAGGAGGTTTTTGCT\n    TAGGGCCATATATAATGAATCTATCTCGTTTATTCGCGGAACCCGAGATAACATTACGAT\n    GTAACTATTTTAGAGAACTTAATACAAGAAACATTGCTGATTACTCATAACTAAATGCTT\n    GGTAATATATCCTCAGTGCCCCTACCATCTTTTACGCAGGGATGTAATTACTTAGGATTC\n    ATTGTGTAAGAATTACAATGAACGATGGATATGAAGGCATGTTGCGAGGTGTTCCTTGGT\n    ATGTGAAGTTCGCAGGGCAACAAAAATTTCGCAGAATAGGCCTCAAAGTATTGGTAAAGA\n    AGACAACTAATCATCACGAGCTTCTGATATCAATACGAACGAGTCCTGTGATGGATGAAA\n    GAAAGTCGTATCGAAAATGTCAAGAGTCTGCCCAATGTAACTTACTTCAAAAAATAACGC\n    TTCCGCCAAGTACGTTCGAATAAACGTAATTTTAAAAATACATAAGGGGTGTTAGAAAGT\n    AAGCGACGGGATATAAGTTAGACTCAAGATTCCGCCGTAAAACGAGACTGATTCCGAAGA\n    TTGTTCGTGGATCTGGTCATGACTTTCACTGAGTAAGGAGTTTCGACATATGTCAATAAA\n    CACAAAAATAGAAGCTATTCGATCTGAAAAATATTAGGACAAGAAACTATCTCACGCTAG\n    CCCAGAATATTCACTCACCCACGGGCGATACTAAAGCACTATATAGTCGCGTGATTACTA\n    TACATATGGTACACATAAGAATCACGATCAGGTTCTCAATTTTCAACAATATATGTTTAT\n    TTGCATAGGTAATATTAGGCCTTTAAGAGAAGGATGGGTGAGATACTCCGGGGATGGCGG\n    CAATAAAGAAAAACACGATATGAGTAATAGGATCCTAATATCTTGGCGAGAGACTTAAGG\n    TACGAATTTTGCGCAATCTATTTTTTACTTGGCCAGAATTCATGTATGGTATAAGTACGA\n    ACTTTTTTGATCACTTTCATGGCTACCTGATTAGGATAGTTTGAGGAATTTCCCAAATAT\n    ACCGATTTAATATACACTAGGGCTTGTCACTTTGAGTCAGAAAAAGAATATAATTACTTA\n    GGGTAATGCTGCATACATATTCTTATATTGCAAAGGTTCTCTGGGTAATCTTGAGCCTTC\n    ACGATACCTGGTGAAGTGTT\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 196,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 11125,
                  "line": 184,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 11135,
              "line": 186,
              "column": 1
            }
          },
          "id": "YG9aCQEwFa2ktsrLhO8EI"
        },
        {
          "text": "\nmy %trans = 'wsatugcyrkmbdhvnATUGCYRKMBDHVN'.comb Z=>\n    'WSTAACGRYMKVHDBNTAACGRYMKVHDBN'.comb;\n\nsub MAIN($input-file = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, \"revcomp.input\")) {\n    my ($desc, @seq);\n\n    for $input-file.IO.lines {\n        dump, $desc = $_, next if /^ \\>/;\n        @seq.unshift(|.comb.reverse.map({ %trans{$^c} // $^c }));\n        LAST dump;\n    }\n\n    sub dump {\n        LEAVE @seq = Empty;\n        return unless $desc.defined;\n\n        @seq.splice($_, 0, \"\\n\")\n            for (60, 120 ...^ * >= +@seq).reverse;\n\n        say $desc, \"\\n\", @seq.join;\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 11135,
              "line": 186,
              "column": 1
            },
            "end": {
              "offset": 11756,
              "line": 211,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "",
    "description": "",
    "footer": "",
    "file": "work_examples/categories/shootout/revcomp.p5.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "3o0Ak6WuH93UY0C_BZ7lz",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/perl\n\n# The Great Computer Language Shootout\n# http://shootout.alioth.debian.org/\n#\n# Contributed by Bradford Powell\n# Fixed slow print substr-solution, by Kjetil Skotheim\n\n\nuse strict;\n\nsub print_revcomp {\n    my ($desc, $s) = @_;\n    return if not $desc;\n    print $desc, \"\\n\";\n    $s =  reverse $s;\n    $s =~ tr{wsatugcyrkmbdhvnATUGCYRKMBDHVN}\n            {WSTAACGRYMKVHDBNTAACGRYMKVHDBN};\n    my($i,$stop)=(0,length($s)/60);\n    print substr($s,$i++*60,60),\"\\n\"  while $i<$stop;\n}\n\nmy($desc,$seq);\nwhile (<STDIN>) {\n    chomp;\n    if (/^>/) {\n        print_revcomp($desc, $seq);\n        $desc = $_;\n        $seq = '';\n    } else {\n        $seq .= $_;\n    }\n}\nprint_revcomp($desc, $seq);\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 703,
              "line": 36,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Read DNA sequences and write their reverse-complement\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/shootout/revcomp.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Feb-L3lGJuADn5iF8cpek",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Read DNA sequences and write their reverse-complement\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Read DNA sequences and write their reverse-complement\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 82,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 82,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "1WGf-qZMv2OlWaxy64h3z"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Daniel Carrera\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Daniel Carrera\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 83,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 106,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 83,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 106,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "9i2TENFNp_SIVWUMw-MPU"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Based on the submission for Perl 5.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Based on the submission for Perl 5.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 107,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 143,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://benchmarksgame.alioth.debian.org/u32/performance.php?test=revcomp>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://benchmarksgame.alioth.debian.org/u32/performance.php?test=revcomp"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 144,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 220,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "USAGE: perl6 revcomp.p6 revcomp.input\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "USAGE: perl6 revcomp.p6 revcomp.input\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 221,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 259,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Expected output\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Expected output\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 260,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 276,
                  "line": 16,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": ">ONE Homo sapiens alu\nCGGAGTCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAAC\nCTCCGCCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACA\nGGCGCGCGCCACCACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCAT\nGTTGGCCAGGCTGGTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAA\nAGTGCTGGGATTACAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTC\nTGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCGCCTCCCGG\nGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGCGCGCCACC\nACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGGCCAGGCTG\nGTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTA\nCAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTCTGTCGCCCAGGCT\nGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCGCCTCCCGGGTTCAAGCGATTC\nTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGCGCGCCACCACGCCCGGCTAAT\nTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGGCCAGGCTGGTCTCGAACTCCT\nGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGCGTGAGCCA\nCCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGC\nGCGATCTCGGCTCACTGCAACCTCCGCCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCC\nTCCCGAGTAGCTGGGATTACAGGCGCGCGCCACCACGCCCGGCTAATTTTTGTATTTTTA\nGTAGAGACGGGGTTTCACCATGTTGGCCAGGCTGGTCTCGAACTCCTGACCTCAGGTGAT\nCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGCGTGAGCCACCGCGCCCGGCCT\nTTTTGAGACGGAGTCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTC\nACTGCAACCTCCGCCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTG\nGGATTACAGGCGCGCGCCACCACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGT\nTTCACCATGTTGGCCAGGCTGGTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGG\nCCTCCCAAAGTGCTGGGATTACAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAG\nTCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCG\nCCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGC\nGCGCCACCACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGG\nCCAGGCTGGTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGC\nTGGGATTACAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTCTGTCG\nCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCGCCTCCCGGGTTCA\nAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGCGCGCCACCACGCC\nCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGGCCAGGCTGGTCTC\nGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGC\nGTGAGCCACCGCGCCCGGCC\n>TWO IUB ambiguity codes\nTAGGDHACHATCRGTRGVTGAGWTATGYTGCTGTCABACDWVTRTAAGAVVAGATTTNDA\nGASMTCTGCATBYTTCAAKTTACMTATTACTTCATARGGYACMRTGTTTTYTATACVAAT\nTTCTAKGDACKADACTATATNTANTCGTTCACGBCGYSCBHTANGGTGATCGTAAAGTAA\nCTATBAAAAGATSTGWATBCSGAKHTTABBAACGTSYCATGCAAVATKTSKTASCGGAAT\nWVATTTNTCCTTCTTCTTDDAGTGGTTGGATACVGTTAYMTMTBTACTTTHAGCTAGBAA\nAAGAGKAAGTTRATWATCAGATTMDDTTTAAAVAAATATTKTCYTAAATTVCNKTTRACG\nADTATATTTATGATSADSCAATAWAGCGRTAGTGTAAGTGACVGRADYGTGCTACHVSDT\nCTVCARCSYTTAATATARAAAATTTAATTTACDAATTGBACAGTAYAABATBTGCAGBVG\nTGATGGDCAAAATBNMSTTABKATTGGSTCCTAGBTTACTTGTTTAGTTTATHCGATSTA\nAAGTCGAKAAASTGTTTTAWAKCAGATATACTTTTMTTTTGBATAGAGGAGCMATGATRA\nAAGGNCAYDCCDDGAAAGTHGBTAATCKYTBTACBGTBCTTTTTGDTAASSWTAAWAARA\nTTGGCTAAGWGRADTYACATAGCTCBTAGATAWAGCAATNGTATMATGTTKMMAGTAWTC\nCCNTSGAAWATWCAAAAMACTGAADNTYGATNAATCCGAYWNCTAACGTTAGAGDTTTTC\nATCTGGKRTAVGAABVCTGWGBTCTDVGKATTBTCTAAGGVADAAAVWTCTAGGGGAGGG\nTTAGAACAATTAAHTAATNAAATGCATKATCTAAYRTDTCAGSAYTTYHGATRTTWAVTA\nBGNTCDACAGBCCRCAGWCRTCABTGMMAWGMCTCAACCGATRTGBCAVAATCGTDWDAA\nCAYAWAATWCTGGTAHCCCTAAGATAACSCTTAGTGSAACAWTBGTCDTTDGACWDBAAC\nHTTTNGSKTYYAAYGGATNTGATTTAARTTAMBAATCTAAGTBTCATYTAACTTADTGTT\nTCGATACGAAHGGCYATATACCWDTKYATDCSHTDTCAAAATGTGBACTGSCCVGATGTA\nTCMMAGCCTTDAAABAATGAAGAGTAACTHATMGVTTAATAACCCGGTTVSANTGCAATT\nGTGAGATTTAMGTTTAMAAYGCTGACAYAAAAAGGCACAMYTAAGVGGCTGGAABVTACG\nGATTSTYGTBVAKTATWACCGTGTKAGTDTGTATGTTTAAAGGAAAAAGTAACATARAAA\nGGTYCAMNYAAABTATAGNTSATANAGTCATCCTATWADKAACTRGTMSACDGTATSAYT\nAAHSHGTAABYGACTYTATADTGSTATAGAGAAATCGNTAAAGGAAATCAGTTGTNCYMV\nTNACDRTATBNATATASTAGAAMSCGGGANRCKKMCAAACATTNAGTCTRMAATBMTACC\nCGTACTTCTBGDSYAATWGAAAATGACADDCHAKAAAYATATTKTTTTCACANACWAGAA\nAKATCCTTATTAYKHKCTAAACARTATTTTDATBTVWCYGCAATACTAGGKAAASTTDGA\nMGGCHTTHAATVCAHDRYAGGRCTATACGTCMAGAGAGCTBTHGNACARTCCBDCTAAGA\nGCGGCTTTARTAAAGAATCCNAGTAWBTGACTTGAATTACWTVACAGAAABCAATNAAAC\nCGTNTRANTTGAYCMAWBADTANABRGGTKTHTWTAGTTVCTMBKTAGMTVKCCAGCANT\nTVAGSWTTAGCCGCRHTTTCCTTHNTATTAAGAAGAATAGGMTRAARTCTABGTACDTTT\nTATAAVDHAHTATAGATCCTAGTAAGYTWATDWCATGAGGGATAGTAAMDMNGBASTWAM\nTSTATRBAYDABATGTATATYCGCACTGTTTTAACMCWBTATAWAGTATBTSTATVTTAR\nCCTMTTAAKADATCAACTAATYTSVTAKGDATTATGCKTCAYCAKAATACTTKAANGAGT\nATTSDAGATCGGAAATACTTAAYAAVGTATMCGCTTGTGTDCTAATYTATTTTATTTWAA\nCAGWRCTATGTAGMTGTTTGTTYKTNGTTKTCAGAACNTRACCTACKTGSRATGTGGGGG\nCTGTCATTAAGTAAATNGSTTABCCCCTCGCAGCTCWHTCGCGAAGCAVATGCKACGHCA\nACAKTTAATAACASAAADATTWNYTGTAATTGTTCGTMHACHTWATGTGCWTTTTGAAHY\nACTTTGTAYAMSAAACTTAADAAATATAGTABMATATYAATGSGGTAGTTTGTGTBYGGT\nTWSGSVGWMATTDMTCCWWCABTCSVACAGBAATGTTKATBGTCAATAATCTTCTTAAAC\nARVAATHAGYBWCTRWCABGTWWAATCTAAGTCASTAAAKTAAGVKBAATTBGABACGTA\nAGGTTAAATAAAAACTRMDTWBCTTTTTAATAAAAGATMGCCTACKAKNTBAGYRASTGT\nASSTCGTHCGAAKTTATTATATTYTTTGTAGAACATGTCAAAACTWTWTHGKTCCYAATA\nAAGTGGAYTMCYTAARCSTAAATWAKTGAATTTRAGTCTSSATACGACWAKAASATDAAA\nTGYYACTSAACAAHAKTSHYARGASTATTATTHAGGYGGASTTTBGAKGATSANAACACD\nTRGSTTRAAAAAAAACAAGARTCVTAGTAAGATAWATGVHAAKATWGAAAAGTYAHVTAC\nTCTGRTGTCAWGATRVAAKTCGCAAVCGASWGGTTRTCSAMCCTAACASGWKKAWDAATG\nACRCBACTATGTGTCTTCAAAHGSCTATATTTCGTVWAGAAGTAYCKGARAKSGKAGTAN\nTTTCYACATWATGTCTAAAADMDTWCAATSTKDACAMAADADBSAAATAGGCTHAHAGTA\nCGACVGAATTATAAAGAHCCVAYHGHTTTACATSTTTATGNCCMTAGCATATGATAVAAG\n>THREE Homo sapiens frequency\nATATTTATCTTTTCACTTCCTACATTGGTCAGACCATTATTCGACACGTGGCGTCATTTT\nGTCATACCGGGTAATGTTGGAAACAAAACGTACTGATAAAATACTGAGTTGTAAACTCTA\nATCAGATAACGCGCTTGGATATTAAGATTCACACAGGGGTTTCGGCTGTAAAAAAACTTG\nTGGAGCTGTTCTGGGACAGATAAGTTGTACCTCGTACTTAGCTAATTAATGAACCAACTG\nATTACGATAGAACAATTCTGAGGCCGCCAGGACAGCCAAATTTTAATCTTATAAAGCTGG\nAAACAGCCGGTATTAGCTTCTCGCATACTTTGCCTGCATTGGTACCTTACAGATATCAGC\nGTAGTCATATACACCTCGGTCTCAGCTAAGCTTGTATCTCTTAGAGTAGTTCAAAGATAG\nTGGACAATACCTGTGGAATCGATTGCAGATATGGATTTATTTAACTACTGAGTCTCATTC\nACAAGCTAAGCAAGGAGCACGTTTTGGTGCCGGCATACCGATTTGCTATCATGTCAGCAA\nATTTGCGTTGTATTCCTAGTTGCACCCATTAAGGCCACACTCCGAACCTAATTATTACAT\nCGCAAAGACATGTACGAAGGACCCGATGTCGAATAGAAGGGAGGACTGTTCATTGGAAGC\nTAGACCAGAGGAATCGCAAAGATGCAACTCTTACAATAAAAATCTAATTTCAGTCAACAC\nGCAATTTCTATAAGGTTTCCGATAATAATGAACCGTCTTCCACAGGGGAATTTGCCATGC\nTCGTAAAAGTAGTTAATCCAAGTAGAAGAAATTTTGATAATGTTTTAAGTTGGCACGAAG\nGAATTCAGAGAGATCTTACCTAACAAAGGCATTAGTAGATGTTCCTTGGTTCACACTCGG\nTCAATCAGAGCACATACTACGGGCGATACCGGGAATGACACAACATCAATGAGATTGTTA\nAGTGAGGTAATTGACTTTAGAGGACTCGATCAGTATACTGTCACTATGAACATCGTATTA\nATTGTTATCCGATATATACACCACCGATTTGCTTGTGCAAGGTTACAGACCCATTCGATA\nAATACAAACACGGAGCGATATTATTTAAGGAGTGCTGTCTTCAAAAGAATTATTCCCACA\nCCGACATAAGAACTTCGCTCCGTCATTCCAGATTTAAATAACATAACGTAACGCTTTGCT\nGATAACATAACATAACCGAGAATTTGCTTAGGAAATTTGGAGCAATATTGCATTGTTTCT\nCAGTCATCACAAGGCCCGCCAAAGAACTCTGAGAATCAGGATTCAACATGATTGGTAAGA\nCTCTATATATATAACTTAATTCTTGTGTCCGGAGATAGAAAGAGGACGAGAGATACTACG\nAAAGAAAGTGTACTTCGATGTATCAATTCAGACGCCTTCTCTATCATCAACATTATAGGT\nCTCGTATATGCTCGGCGCGATCTGCTTCTCTCCGCCAATAGCCCCATAGTGTATTTCAAG\nCGCAGTAACAGTGAAATCGTTACGAAGGTAGGGATGTTGCTTATAATTGTCGTAACTTAT\nCGCTTATGTATCTTTCAAGAATGAACGGCAGCATATACATACGTTCTACCTTTAGCTACA\nAAGCATCCATATACTCCCTCTCATGATTGAAACTCTTCCCTATTTTGTAGCCAATAGTGA\nAAGCGTATTAGTATAAATTCGTCGGTTTTTCACTCGCAACTGTTATACTCTGCAAACAAA\nCGAAAGCCTCATAGTACAAACCTAAAGCTACATACTTCATCATTGGCAGACCAGTGGCGG\nTATTTCTACGGAAGCATCACTATAGATATAAAGTTTCCCTTCATGTACGTCTGTTAACCA\nTATCACAAGAAACTGCTATCTCTGTCACGTAACAATTCACGCGCCTTATCGCCAAATGTT\nCATATATGCGCGGTATACGTATGAACGAATACTAATTAGTATAACGGAGGATTCACGGGA\nGGGATACTTGGGGCATTTATAAATCGTCTAAAAATTTTCTATCAGCACTTGCGGGTTATA\nGTGGATTACTAGGCAACATAATATTCTGTATTGGTCCAAATGACGCTATAGATAAATTAG\nCAAAATACATTGTTTCCATTTATGTAAGTCGAAACTCCAGGACTCCCGGGAACCAGTTAA\nACCGTCTGGAAAAGACACATTGTGAGCGGGACTTCAATGATAGCTTTCAATGAGCTTCTC\nATGCTTGGGGTCTGTACATATATGTTGGCGAAATTATCGTCTGTATTCTGTTATGCTTTG\nATCATGGGTTATTAGTATAGTGTCCGGTTAAGTACCAATACCGCTAGAGACCCGACCTAA\nGTCGATAACTAACGATCATCGACGTAAGGATCGTCTCGATCAGTACTTCAGTCTAGATCT\nGGGAATAGTAACTCGTTAGTGAACTATGTCGTGTCATAACTCTAAAATGCAATCAAATCT\nTATTATTGAGTATTGATTATATAAAGCATCCGCTTAGCTTTACCCTCAAATGTTATATGC\nAATTTAAAGCGCTTGATATCGTCTACTCAAGTTCAGGTTTCACATGGCCGCAACGTGACG\nTTATTAGAGGTGGGTCATCATCTCTGAGGCTAGTGATGTTGAATACTCATTGAATGGGAA\nGTGGAATACCATGCTCGTAGGTAACAGCATGACCTATAAAATATACTATGGGTGTGTGGT\nAGATCAATATTGTTCAAGCATATCGTAACAATAACGGCTGAAATGTTACTGACATGAAAG\nAGGGAGTCCAAACCATTCTAACAGCTGATCAAGTCGTCTAAAAACGCCTGGTTCAGCCTT\nAAGAGTTATAAGCCAGACAAATTGTATCAATAGAGAATCCGTAAATTCCTCGGCCAACCT\nCTTGCAAAGACATCACTATCAATATACTACCGTGATCTTAATTAGTGAACTTATATAAAT\nATCTACAACCAGATTCAACGGAAAAGCTTTAGTGGATTAGAAATTGCCAAGAATCACATT\nCATGTGGGTTCGAATGCTTTAGTAATACCATTTCGCCGAGTAGTCACTTCGCTGAACTGT\nCGTAAATTGCTATGACATAATCGAAAAGGATTGTCAAGAGTCGATTACTGCGGACTAATA\nATCCCCACGGGGGTGGTCTCATGTCTCCCCAGGCGAGTGGGGACGGTTGATAAACACGCT\nGCATCGCGGACTGATGTTCCCAGTATTACATAGTCACATTGGATTGCGAGTAGTCTACCT\nATTTATGAGCGAGAGATGCCTCTAACTACTTCGACTTTTAAAACCTTTCCACGCCAGTAT\nTCGGCGAAAGGGAAGTATTAAGGGTTGTCATAATTAAGCTGATACCACTTCAGACTTTGC\nTCTACTTCTGTCTTTCATTGGTTTAGTAAAGTCTGTCCATTCGTCGAGACCGTCTTTTGC\nAGCCTCATTCTACCAACTGCTCCGACTCTTAGTCTGCTTCTCCCAGCGTTATAACAAGAG\nGCATTTTGTCATCCTTAAAACAATAATAAAGAACTCGGAGCACTGATATAATGACTGAAT\nTAGAACCGCTTAAAAATACAACGAATAGATAAGACTATCGGATAAGATCTAATATGTAGT\nGATTAAGCCCTTTATTAATTAATAATAGTTACCCTTTCTGATGTAACGCGACATATTACG\nATTTAGTGGCACGTCTGAATTGCAAAGCAGATCTCTACCCGATTTTTATTATAAATCCCG\nTATACATCTTGACTTGAGTAATTGTTCATCTTTTTATATCTCTTCGTACTACAAATAATT\nAATATCTCAACCCGTATTGTGTGATTCTAATTACCAACAGAATACGAGGAGGTTTTTGCT\nTAGGGCCATATATAATGAATCTATCTCGTTTATTCGCGGAACCCGAGATAACATTACGAT\nGTAACTATTTTAGAGAACTTAATACAAGAAACATTGCTGATTACTCATAACTAAATGCTT\nGGTAATATATCCTCAGTGCCCCTACCATCTTTTACGCAGGGATGTAATTACTTAGGATTC\nATTGTGTAAGAATTACAATGAACGATGGATATGAAGGCATGTTGCGAGGTGTTCCTTGGT\nATGTGAAGTTCGCAGGGCAACAAAAATTTCGCAGAATAGGCCTCAAAGTATTGGTAAAGA\nAGACAACTAATCATCACGAGCTTCTGATATCAATACGAACGAGTCCTGTGATGGATGAAA\nGAAAGTCGTATCGAAAATGTCAAGAGTCTGCCCAATGTAACTTACTTCAAAAAATAACGC\nTTCCGCCAAGTACGTTCGAATAAACGTAATTTTAAAAATACATAAGGGGTGTTAGAAAGT\nAAGCGACGGGATATAAGTTAGACTCAAGATTCCGCCGTAAAACGAGACTGATTCCGAAGA\nTTGTTCGTGGATCTGGTCATGACTTTCACTGAGTAAGGAGTTTCGACATATGTCAATAAA\nCACAAAAATAGAAGCTATTCGATCTGAAAAATATTAGGACAAGAAACTATCTCACGCTAG\nCCCAGAATATTCACTCACCCACGGGCGATACTAAAGCACTATATAGTCGCGTGATTACTA\nTACATATGGTACACATAAGAATCACGATCAGGTTCTCAATTTTCAACAATATATGTTTAT\nTTGCATAGGTAATATTAGGCCTTTAAGAGAAGGATGGGTGAGATACTCCGGGGATGGCGG\nCAATAAAGAAAAACACGATATGAGTAATAGGATCCTAATATCTTGGCGAGAGACTTAAGG\nTACGAATTTTGCGCAATCTATTTTTTACTTGGCCAGAATTCATGTATGGTATAAGTACGA\nACTTTTTTGATCACTTTCATGGCTACCTGATTAGGATAGTTTGAGGAATTTCCCAAATAT\nACCGATTTAATATACACTAGGGCTTGTCACTTTGAGTCAGAAAAAGAATATAATTACTTA\nGGGTAATGCTGCATACATATTCTTATATTGCAAAGGTTCTCTGGGTAATCTTGAGCCTTC\nACGATACCTGGTGAAGTGTT\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": ">ONE Homo sapiens alu\n    CGGAGTCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAAC\n    CTCCGCCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACA\n    GGCGCGCGCCACCACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCAT\n    GTTGGCCAGGCTGGTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAA\n    AGTGCTGGGATTACAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTC\n    TGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCGCCTCCCGG\n    GTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGCGCGCCACC\n    ACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGGCCAGGCTG\n    GTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTA\n    CAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTCTGTCGCCCAGGCT\n    GGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCGCCTCCCGGGTTCAAGCGATTC\n    TCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGCGCGCCACCACGCCCGGCTAAT\n    TTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGGCCAGGCTGGTCTCGAACTCCT\n    GACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGCGTGAGCCA\n    CCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGC\n    GCGATCTCGGCTCACTGCAACCTCCGCCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCC\n    TCCCGAGTAGCTGGGATTACAGGCGCGCGCCACCACGCCCGGCTAATTTTTGTATTTTTA\n    GTAGAGACGGGGTTTCACCATGTTGGCCAGGCTGGTCTCGAACTCCTGACCTCAGGTGAT\n    CCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGCGTGAGCCACCGCGCCCGGCCT\n    TTTTGAGACGGAGTCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTC\n    ACTGCAACCTCCGCCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTG\n    GGATTACAGGCGCGCGCCACCACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGT\n    TTCACCATGTTGGCCAGGCTGGTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGG\n    CCTCCCAAAGTGCTGGGATTACAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAG\n    TCTCGCTCTGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCG\n    CCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGC\n    GCGCCACCACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGG\n    CCAGGCTGGTCTCGAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGC\n    TGGGATTACAGGCGTGAGCCACCGCGCCCGGCCTTTTTGAGACGGAGTCTCGCTCTGTCG\n    CCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCCGCCTCCCGGGTTCA\n    AGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCGCGCGCCACCACGCC\n    CGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGGCCAGGCTGGTCTC\n    GAACTCCTGACCTCAGGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGC\n    GTGAGCCACCGCGCCCGGCC\n    >TWO IUB ambiguity codes\n    TAGGDHACHATCRGTRGVTGAGWTATGYTGCTGTCABACDWVTRTAAGAVVAGATTTNDA\n    GASMTCTGCATBYTTCAAKTTACMTATTACTTCATARGGYACMRTGTTTTYTATACVAAT\n    TTCTAKGDACKADACTATATNTANTCGTTCACGBCGYSCBHTANGGTGATCGTAAAGTAA\n    CTATBAAAAGATSTGWATBCSGAKHTTABBAACGTSYCATGCAAVATKTSKTASCGGAAT\n    WVATTTNTCCTTCTTCTTDDAGTGGTTGGATACVGTTAYMTMTBTACTTTHAGCTAGBAA\n    AAGAGKAAGTTRATWATCAGATTMDDTTTAAAVAAATATTKTCYTAAATTVCNKTTRACG\n    ADTATATTTATGATSADSCAATAWAGCGRTAGTGTAAGTGACVGRADYGTGCTACHVSDT\n    CTVCARCSYTTAATATARAAAATTTAATTTACDAATTGBACAGTAYAABATBTGCAGBVG\n    TGATGGDCAAAATBNMSTTABKATTGGSTCCTAGBTTACTTGTTTAGTTTATHCGATSTA\n    AAGTCGAKAAASTGTTTTAWAKCAGATATACTTTTMTTTTGBATAGAGGAGCMATGATRA\n    AAGGNCAYDCCDDGAAAGTHGBTAATCKYTBTACBGTBCTTTTTGDTAASSWTAAWAARA\n    TTGGCTAAGWGRADTYACATAGCTCBTAGATAWAGCAATNGTATMATGTTKMMAGTAWTC\n    CCNTSGAAWATWCAAAAMACTGAADNTYGATNAATCCGAYWNCTAACGTTAGAGDTTTTC\n    ATCTGGKRTAVGAABVCTGWGBTCTDVGKATTBTCTAAGGVADAAAVWTCTAGGGGAGGG\n    TTAGAACAATTAAHTAATNAAATGCATKATCTAAYRTDTCAGSAYTTYHGATRTTWAVTA\n    BGNTCDACAGBCCRCAGWCRTCABTGMMAWGMCTCAACCGATRTGBCAVAATCGTDWDAA\n    CAYAWAATWCTGGTAHCCCTAAGATAACSCTTAGTGSAACAWTBGTCDTTDGACWDBAAC\n    HTTTNGSKTYYAAYGGATNTGATTTAARTTAMBAATCTAAGTBTCATYTAACTTADTGTT\n    TCGATACGAAHGGCYATATACCWDTKYATDCSHTDTCAAAATGTGBACTGSCCVGATGTA\n    TCMMAGCCTTDAAABAATGAAGAGTAACTHATMGVTTAATAACCCGGTTVSANTGCAATT\n    GTGAGATTTAMGTTTAMAAYGCTGACAYAAAAAGGCACAMYTAAGVGGCTGGAABVTACG\n    GATTSTYGTBVAKTATWACCGTGTKAGTDTGTATGTTTAAAGGAAAAAGTAACATARAAA\n    GGTYCAMNYAAABTATAGNTSATANAGTCATCCTATWADKAACTRGTMSACDGTATSAYT\n    AAHSHGTAABYGACTYTATADTGSTATAGAGAAATCGNTAAAGGAAATCAGTTGTNCYMV\n    TNACDRTATBNATATASTAGAAMSCGGGANRCKKMCAAACATTNAGTCTRMAATBMTACC\n    CGTACTTCTBGDSYAATWGAAAATGACADDCHAKAAAYATATTKTTTTCACANACWAGAA\n    AKATCCTTATTAYKHKCTAAACARTATTTTDATBTVWCYGCAATACTAGGKAAASTTDGA\n    MGGCHTTHAATVCAHDRYAGGRCTATACGTCMAGAGAGCTBTHGNACARTCCBDCTAAGA\n    GCGGCTTTARTAAAGAATCCNAGTAWBTGACTTGAATTACWTVACAGAAABCAATNAAAC\n    CGTNTRANTTGAYCMAWBADTANABRGGTKTHTWTAGTTVCTMBKTAGMTVKCCAGCANT\n    TVAGSWTTAGCCGCRHTTTCCTTHNTATTAAGAAGAATAGGMTRAARTCTABGTACDTTT\n    TATAAVDHAHTATAGATCCTAGTAAGYTWATDWCATGAGGGATAGTAAMDMNGBASTWAM\n    TSTATRBAYDABATGTATATYCGCACTGTTTTAACMCWBTATAWAGTATBTSTATVTTAR\n    CCTMTTAAKADATCAACTAATYTSVTAKGDATTATGCKTCAYCAKAATACTTKAANGAGT\n    ATTSDAGATCGGAAATACTTAAYAAVGTATMCGCTTGTGTDCTAATYTATTTTATTTWAA\n    CAGWRCTATGTAGMTGTTTGTTYKTNGTTKTCAGAACNTRACCTACKTGSRATGTGGGGG\n    CTGTCATTAAGTAAATNGSTTABCCCCTCGCAGCTCWHTCGCGAAGCAVATGCKACGHCA\n    ACAKTTAATAACASAAADATTWNYTGTAATTGTTCGTMHACHTWATGTGCWTTTTGAAHY\n    ACTTTGTAYAMSAAACTTAADAAATATAGTABMATATYAATGSGGTAGTTTGTGTBYGGT\n    TWSGSVGWMATTDMTCCWWCABTCSVACAGBAATGTTKATBGTCAATAATCTTCTTAAAC\n    ARVAATHAGYBWCTRWCABGTWWAATCTAAGTCASTAAAKTAAGVKBAATTBGABACGTA\n    AGGTTAAATAAAAACTRMDTWBCTTTTTAATAAAAGATMGCCTACKAKNTBAGYRASTGT\n    ASSTCGTHCGAAKTTATTATATTYTTTGTAGAACATGTCAAAACTWTWTHGKTCCYAATA\n    AAGTGGAYTMCYTAARCSTAAATWAKTGAATTTRAGTCTSSATACGACWAKAASATDAAA\n    TGYYACTSAACAAHAKTSHYARGASTATTATTHAGGYGGASTTTBGAKGATSANAACACD\n    TRGSTTRAAAAAAAACAAGARTCVTAGTAAGATAWATGVHAAKATWGAAAAGTYAHVTAC\n    TCTGRTGTCAWGATRVAAKTCGCAAVCGASWGGTTRTCSAMCCTAACASGWKKAWDAATG\n    ACRCBACTATGTGTCTTCAAAHGSCTATATTTCGTVWAGAAGTAYCKGARAKSGKAGTAN\n    TTTCYACATWATGTCTAAAADMDTWCAATSTKDACAMAADADBSAAATAGGCTHAHAGTA\n    CGACVGAATTATAAAGAHCCVAYHGHTTTACATSTTTATGNCCMTAGCATATGATAVAAG\n    >THREE Homo sapiens frequency\n    ATATTTATCTTTTCACTTCCTACATTGGTCAGACCATTATTCGACACGTGGCGTCATTTT\n    GTCATACCGGGTAATGTTGGAAACAAAACGTACTGATAAAATACTGAGTTGTAAACTCTA\n    ATCAGATAACGCGCTTGGATATTAAGATTCACACAGGGGTTTCGGCTGTAAAAAAACTTG\n    TGGAGCTGTTCTGGGACAGATAAGTTGTACCTCGTACTTAGCTAATTAATGAACCAACTG\n    ATTACGATAGAACAATTCTGAGGCCGCCAGGACAGCCAAATTTTAATCTTATAAAGCTGG\n    AAACAGCCGGTATTAGCTTCTCGCATACTTTGCCTGCATTGGTACCTTACAGATATCAGC\n    GTAGTCATATACACCTCGGTCTCAGCTAAGCTTGTATCTCTTAGAGTAGTTCAAAGATAG\n    TGGACAATACCTGTGGAATCGATTGCAGATATGGATTTATTTAACTACTGAGTCTCATTC\n    ACAAGCTAAGCAAGGAGCACGTTTTGGTGCCGGCATACCGATTTGCTATCATGTCAGCAA\n    ATTTGCGTTGTATTCCTAGTTGCACCCATTAAGGCCACACTCCGAACCTAATTATTACAT\n    CGCAAAGACATGTACGAAGGACCCGATGTCGAATAGAAGGGAGGACTGTTCATTGGAAGC\n    TAGACCAGAGGAATCGCAAAGATGCAACTCTTACAATAAAAATCTAATTTCAGTCAACAC\n    GCAATTTCTATAAGGTTTCCGATAATAATGAACCGTCTTCCACAGGGGAATTTGCCATGC\n    TCGTAAAAGTAGTTAATCCAAGTAGAAGAAATTTTGATAATGTTTTAAGTTGGCACGAAG\n    GAATTCAGAGAGATCTTACCTAACAAAGGCATTAGTAGATGTTCCTTGGTTCACACTCGG\n    TCAATCAGAGCACATACTACGGGCGATACCGGGAATGACACAACATCAATGAGATTGTTA\n    AGTGAGGTAATTGACTTTAGAGGACTCGATCAGTATACTGTCACTATGAACATCGTATTA\n    ATTGTTATCCGATATATACACCACCGATTTGCTTGTGCAAGGTTACAGACCCATTCGATA\n    AATACAAACACGGAGCGATATTATTTAAGGAGTGCTGTCTTCAAAAGAATTATTCCCACA\n    CCGACATAAGAACTTCGCTCCGTCATTCCAGATTTAAATAACATAACGTAACGCTTTGCT\n    GATAACATAACATAACCGAGAATTTGCTTAGGAAATTTGGAGCAATATTGCATTGTTTCT\n    CAGTCATCACAAGGCCCGCCAAAGAACTCTGAGAATCAGGATTCAACATGATTGGTAAGA\n    CTCTATATATATAACTTAATTCTTGTGTCCGGAGATAGAAAGAGGACGAGAGATACTACG\n    AAAGAAAGTGTACTTCGATGTATCAATTCAGACGCCTTCTCTATCATCAACATTATAGGT\n    CTCGTATATGCTCGGCGCGATCTGCTTCTCTCCGCCAATAGCCCCATAGTGTATTTCAAG\n    CGCAGTAACAGTGAAATCGTTACGAAGGTAGGGATGTTGCTTATAATTGTCGTAACTTAT\n    CGCTTATGTATCTTTCAAGAATGAACGGCAGCATATACATACGTTCTACCTTTAGCTACA\n    AAGCATCCATATACTCCCTCTCATGATTGAAACTCTTCCCTATTTTGTAGCCAATAGTGA\n    AAGCGTATTAGTATAAATTCGTCGGTTTTTCACTCGCAACTGTTATACTCTGCAAACAAA\n    CGAAAGCCTCATAGTACAAACCTAAAGCTACATACTTCATCATTGGCAGACCAGTGGCGG\n    TATTTCTACGGAAGCATCACTATAGATATAAAGTTTCCCTTCATGTACGTCTGTTAACCA\n    TATCACAAGAAACTGCTATCTCTGTCACGTAACAATTCACGCGCCTTATCGCCAAATGTT\n    CATATATGCGCGGTATACGTATGAACGAATACTAATTAGTATAACGGAGGATTCACGGGA\n    GGGATACTTGGGGCATTTATAAATCGTCTAAAAATTTTCTATCAGCACTTGCGGGTTATA\n    GTGGATTACTAGGCAACATAATATTCTGTATTGGTCCAAATGACGCTATAGATAAATTAG\n    CAAAATACATTGTTTCCATTTATGTAAGTCGAAACTCCAGGACTCCCGGGAACCAGTTAA\n    ACCGTCTGGAAAAGACACATTGTGAGCGGGACTTCAATGATAGCTTTCAATGAGCTTCTC\n    ATGCTTGGGGTCTGTACATATATGTTGGCGAAATTATCGTCTGTATTCTGTTATGCTTTG\n    ATCATGGGTTATTAGTATAGTGTCCGGTTAAGTACCAATACCGCTAGAGACCCGACCTAA\n    GTCGATAACTAACGATCATCGACGTAAGGATCGTCTCGATCAGTACTTCAGTCTAGATCT\n    GGGAATAGTAACTCGTTAGTGAACTATGTCGTGTCATAACTCTAAAATGCAATCAAATCT\n    TATTATTGAGTATTGATTATATAAAGCATCCGCTTAGCTTTACCCTCAAATGTTATATGC\n    AATTTAAAGCGCTTGATATCGTCTACTCAAGTTCAGGTTTCACATGGCCGCAACGTGACG\n    TTATTAGAGGTGGGTCATCATCTCTGAGGCTAGTGATGTTGAATACTCATTGAATGGGAA\n    GTGGAATACCATGCTCGTAGGTAACAGCATGACCTATAAAATATACTATGGGTGTGTGGT\n    AGATCAATATTGTTCAAGCATATCGTAACAATAACGGCTGAAATGTTACTGACATGAAAG\n    AGGGAGTCCAAACCATTCTAACAGCTGATCAAGTCGTCTAAAAACGCCTGGTTCAGCCTT\n    AAGAGTTATAAGCCAGACAAATTGTATCAATAGAGAATCCGTAAATTCCTCGGCCAACCT\n    CTTGCAAAGACATCACTATCAATATACTACCGTGATCTTAATTAGTGAACTTATATAAAT\n    ATCTACAACCAGATTCAACGGAAAAGCTTTAGTGGATTAGAAATTGCCAAGAATCACATT\n    CATGTGGGTTCGAATGCTTTAGTAATACCATTTCGCCGAGTAGTCACTTCGCTGAACTGT\n    CGTAAATTGCTATGACATAATCGAAAAGGATTGTCAAGAGTCGATTACTGCGGACTAATA\n    ATCCCCACGGGGGTGGTCTCATGTCTCCCCAGGCGAGTGGGGACGGTTGATAAACACGCT\n    GCATCGCGGACTGATGTTCCCAGTATTACATAGTCACATTGGATTGCGAGTAGTCTACCT\n    ATTTATGAGCGAGAGATGCCTCTAACTACTTCGACTTTTAAAACCTTTCCACGCCAGTAT\n    TCGGCGAAAGGGAAGTATTAAGGGTTGTCATAATTAAGCTGATACCACTTCAGACTTTGC\n    TCTACTTCTGTCTTTCATTGGTTTAGTAAAGTCTGTCCATTCGTCGAGACCGTCTTTTGC\n    AGCCTCATTCTACCAACTGCTCCGACTCTTAGTCTGCTTCTCCCAGCGTTATAACAAGAG\n    GCATTTTGTCATCCTTAAAACAATAATAAAGAACTCGGAGCACTGATATAATGACTGAAT\n    TAGAACCGCTTAAAAATACAACGAATAGATAAGACTATCGGATAAGATCTAATATGTAGT\n    GATTAAGCCCTTTATTAATTAATAATAGTTACCCTTTCTGATGTAACGCGACATATTACG\n    ATTTAGTGGCACGTCTGAATTGCAAAGCAGATCTCTACCCGATTTTTATTATAAATCCCG\n    TATACATCTTGACTTGAGTAATTGTTCATCTTTTTATATCTCTTCGTACTACAAATAATT\n    AATATCTCAACCCGTATTGTGTGATTCTAATTACCAACAGAATACGAGGAGGTTTTTGCT\n    TAGGGCCATATATAATGAATCTATCTCGTTTATTCGCGGAACCCGAGATAACATTACGAT\n    GTAACTATTTTAGAGAACTTAATACAAGAAACATTGCTGATTACTCATAACTAAATGCTT\n    GGTAATATATCCTCAGTGCCCCTACCATCTTTTACGCAGGGATGTAATTACTTAGGATTC\n    ATTGTGTAAGAATTACAATGAACGATGGATATGAAGGCATGTTGCGAGGTGTTCCTTGGT\n    ATGTGAAGTTCGCAGGGCAACAAAAATTTCGCAGAATAGGCCTCAAAGTATTGGTAAAGA\n    AGACAACTAATCATCACGAGCTTCTGATATCAATACGAACGAGTCCTGTGATGGATGAAA\n    GAAAGTCGTATCGAAAATGTCAAGAGTCTGCCCAATGTAACTTACTTCAAAAAATAACGC\n    TTCCGCCAAGTACGTTCGAATAAACGTAATTTTAAAAATACATAAGGGGTGTTAGAAAGT\n    AAGCGACGGGATATAAGTTAGACTCAAGATTCCGCCGTAAAACGAGACTGATTCCGAAGA\n    TTGTTCGTGGATCTGGTCATGACTTTCACTGAGTAAGGAGTTTCGACATATGTCAATAAA\n    CACAAAAATAGAAGCTATTCGATCTGAAAAATATTAGGACAAGAAACTATCTCACGCTAG\n    CCCAGAATATTCACTCACCCACGGGCGATACTAAAGCACTATATAGTCGCGTGATTACTA\n    TACATATGGTACACATAAGAATCACGATCAGGTTCTCAATTTTCAACAATATATGTTTAT\n    TTGCATAGGTAATATTAGGCCTTTAAGAGAAGGATGGGTGAGATACTCCGGGGATGGCGG\n    CAATAAAGAAAAACACGATATGAGTAATAGGATCCTAATATCTTGGCGAGAGACTTAAGG\n    TACGAATTTTGCGCAATCTATTTTTTACTTGGCCAGAATTCATGTATGGTATAAGTACGA\n    ACTTTTTTGATCACTTTCATGGCTACCTGATTAGGATAGTTTGAGGAATTTCCCAAATAT\n    ACCGATTTAATATACACTAGGGCTTGTCACTTTGAGTCAGAAAAAGAATATAATTACTTA\n    GGGTAATGCTGCATACATATTCTTATATTGCAAAGGTTCTCTGGGTAATCTTGAGCCTTC\n    ACGATACCTGGTGAAGTGTT\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 277,
                  "line": 17,
                  "column": 1
                },
                "end": {
                  "offset": 11206,
                  "line": 188,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 11216,
              "line": 190,
              "column": 1
            }
          },
          "id": "VNoVezr6TQu-JJAzOzoTU"
        },
        {
          "text": "\nsub MAIN($input-file = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, \"revcomp.input\")) {\n    my ($desc,$seq) = ('','');\n    my $input = open $input-file;\n    while $input.get -> $line {\n        if $line.match(/^ \\>/) {\n            print_revcomp();\n            $desc = $line;\n            $seq = '';\n        }\n        else {\n            $seq ~= $line;\n        }\n    }\n    print_revcomp();\n\n    sub print_revcomp() {\n        return if not $desc;\n        say $desc;\n        $seq = $seq.flip.trans('wsatugcyrkmbdhvnATUGCYRKMBDHVN' => 'WSTAACGRYMKVHDBNTAACGRYMKVHDBN');\n\n        for ^($seq.chars/60) -> $i {\n            say $seq.substr($i*60,60);\n        }\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 11216,
              "line": 190,
              "column": 1
            },
            "end": {
              "offset": 11911,
              "line": 218,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Reading from a file\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/tutorial/01-read-from-file.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "zbgbuXKhonB5YAbv16f-p",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env perl6\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 22,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Reading from a file\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Reading from a file\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 34,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 61,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 34,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 61,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "W-oxPZDvYn7TcQlzCtLLo"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 62,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 84,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 62,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 84,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "h-OkDfNMAclIYcGby18Cb"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 22,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 94,
              "line": 10,
              "column": 1
            }
          },
          "id": "JQuf58i6muPiuV2gOe1dj"
        },
        {
          "text": "\nuse v6;\n\nmy $tempfile = open('lorem.txt', :r);\nmy $first_line = $tempfile.get;\nsay $first_line;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 94,
              "line": 10,
              "column": 1
            },
            "end": {
              "offset": 231,
              "line": 18,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Reading from the terminal\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/tutorial/01-read-from-terminal.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "5BqUR3NXvBafd0rSn3rGu",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env perl6\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 22,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Reading from the terminal\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Reading from the terminal\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 34,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 67,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 34,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 67,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "ef-XYks3aJjOuNC9tqpit"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 68,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 90,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 68,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 90,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "hzUYURENU4VYbAU1MickP"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 22,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 100,
              "line": 10,
              "column": 1
            }
          },
          "id": "l902wT6drTZaavD8WPMNd"
        },
        {
          "text": "\nuse v6;\n\nfor $*IN.get {\n    say \"I read the line: $_\";\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 100,
              "line": 10,
              "column": 1
            },
            "end": {
              "offset": 198,
              "line": 18,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Word-wrap paragraphs to a given length\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/tutorial/01-word-wrap.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "kpBgxgktHirw9FRK43GnT",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Word-wrap paragraphs to a given length\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Word-wrap paragraphs to a given length\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 67,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 67,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "hDy09BrGXNRGd4gS-YwF6"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 68,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 90,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 68,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 90,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Nk2uqmdgvDElOi02aPtaW"
            },
            {
              "type": "blankline"
            },
            {
              "text": "Uses a minimum number of lines algorithm based upon\nL<https://en.wikipedia.org/wiki/Line_wrap_and_word_wrap#Minimum_number_of_lines>.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Uses a minimum number of lines algorithm based upon\n"
                },
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "https://en.wikipedia.org/wiki/Line_wrap_and_word_wrap#Minimum_number_of_lines"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": ".\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 91,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 225,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 235,
              "line": 13,
              "column": 1
            }
          },
          "id": "IGRK0SBzSYXaMM9kuIMdw"
        },
        {
          "text": "\nsub MAIN($input-file = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, \"lorem.txt\")) {\n    for $input-file.IO.lines {\n        print-wrapped(.words);\n    }\n}\n\nmy $space-width = 1;  # width of a space character\n\n# Print words, new line at word wrap, new line for paragraph\nsub print-wrapped (@words, $line-width = 60) {\n    my $space-remaining = $line-width;\n    my @words-in-line;\n    for @words -> $word {\n        my $word-length = $word.chars;\n        if $word-length + $space-width > $space-remaining {\n            @words-in-line.join(\" \").say;\n            $space-remaining = $line-width - $word-length;\n            @words-in-line = ($word);\n        }\n        else {\n            @words-in-line.push($word);\n            $space-remaining = $space-remaining - ($word-length + $space-width);\n        }\n    }\n    @words-in-line.join(\" \").say;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 235,
              "line": 13,
              "column": 1
            },
            "end": {
              "offset": 1111,
              "line": 42,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Write to a file\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/tutorial/01-write-to-file.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "9Wl65LqGEt0Ol9ER37HNr",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env perl6\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 22,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Write to a file\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Write to a file\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 34,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 57,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 34,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 57,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "BLfRG1wnn-h8roqs4m1ol"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 58,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 80,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 58,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 80,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "rCiojpCviEWl9RML91Iym"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 22,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 90,
              "line": 10,
              "column": 1
            }
          },
          "id": "NDYVwKKIKm6x1nLj_Q9XJ"
        },
        {
          "text": "\nuse v6;\n\nmy $tempfile = open('output.txt', :w);\n$tempfile.print(\"Hello world\\n\");\n$tempfile.close;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 90,
              "line": 10,
              "column": 1
            },
            "end": {
              "offset": 230,
              "line": 18,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Lazily evaluate items in a list\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/tutorial/lazy-evaluation.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "0gqZpgfFV0dYD9oz2CsZv",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "#!/usr/bin/env perl6\n\nuse v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 31,
              "line": 5,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Lazily evaluate items in a list\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Lazily evaluate items in a list\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 43,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 82,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 43,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 82,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "I6CfbsJupixKj7d9_XMDM"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Scott Penrose\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Scott Penrose\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 83,
                      "line": 9,
                      "column": 1
                    },
                    "end": {
                      "offset": 105,
                      "line": 10,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 83,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 105,
                  "line": 10,
                  "column": 1
                }
              },
              "id": "OsX3Gg-BwUDiOg1NADuOT"
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 31,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 115,
              "line": 12,
              "column": 1
            }
          },
          "id": "CMGsLNKTubNmYer_ASVnX"
        },
        {
          "text": "\nmy @fibonacci = 1, 1, { $^a + $^b } ... *;\nsay @fibonacci[6];     # 13\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 115,
              "line": 12,
              "column": 1
            },
            "end": {
              "offset": 227,
              "line": 17,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Could I Get Your Phone Number?\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/wsg/advanced-2008/event001-eric256.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "RIs_j936R9ikPyo2AAkPg",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Could I Get Your Phone Number?\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Could I Get Your Phone Number?\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 59,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 59,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "vBVF--iou-r7vfmJ5obRJ"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Eric Hodges\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Eric Hodges\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 60,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 80,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 60,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 80,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "WshDfXWdeIIkpdU3N04ER"
            },
            {
              "type": "blankline"
            },
            {
              "text": "In Could I Get Your Phone Number? competitors are given a phone number and\nthen—using the letters found on a standard phone dial—construct a word in\nwhich the letters correspond to the numbers in the phone number.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In Could I Get Your Phone Number? competitors are given a phone number and\nthen—using the letters found on a standard phone dial—construct a word in\nwhich the letters correspond to the numbers in the phone number.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 81,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 295,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Event Scenario\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Event Scenario\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 296,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 311,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "As you probably know, phone numbers can be difficult to remember; that’s why\nmany companies and organizations use mnemonic devices – such as acronyms and\njingles – to make their phone numbers a little more memorable.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "As you probably know, phone numbers can be difficult to remember; that’s why\nmany companies and organizations use mnemonic devices – such as acronyms and\njingles – to make their phone numbers a little more memorable.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 312,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 529,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What’s that? Can we give you an example of one of those mnemonic devices?\nYou bet we can. For example, suppose the Scripting Guys had the phone number\n727-4787. That’s hard to remember; therefore, the Scripting Guys might tell\npeople to dial SCRIPTS instead. The word SCRIPTS – in which the letters in\nthe word correspond to the numbers in the phone number – is a mnemonic\ndevice: it makes it easier for you to remember something.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What’s that? Can we give you an example of one of those mnemonic devices?\nYou bet we can. For example, suppose the Scripting Guys had the phone number\n727-4787. That’s hard to remember; therefore, the Scripting Guys might tell\npeople to dial SCRIPTS instead. The word SCRIPTS – in which the letters in\nthe word correspond to the numbers in the phone number – is a mnemonic\ndevice: it makes it easier for you to remember something.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 530,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 961,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Good question: how do you get SCRIPTS out of a phone number like 727-4787?\nWell, on a standard phone dial, the digits 2 through 9 have all been\nassigned letter values in addition to their numeric value:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Good question: how do you get SCRIPTS out of a phone number like 727-4787?\nWell, on a standard phone dial, the digits 2 through 9 have all been\nassigned letter values in addition to their numeric value:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 962,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 1165,
                  "line": 29,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "block",
              "content": [
                {
                  "name": "table_head",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " Digit"
                        }
                      ],
                      "id": "87fc70ak0ZmjNhrNVpbDj"
                    },
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " Letter Values"
                        }
                      ],
                      "id": "pMYl3U8eCEKHHwN_w3OkH"
                    }
                  ],
                  "id": "azmNmlmiTJa_zkXJ5ayTp"
                },
                {
                  "type": "separator",
                  "text": "=====   =============\n"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 2    "
                        }
                      ],
                      "id": "GtSND0ZDxe9aGWS1S71vk"
                    },
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " A B C"
                        }
                      ],
                      "id": "jYCc0CNqPWdKhZG5aeLvs"
                    }
                  ],
                  "id": "Q9iyyKVuEy8gHADLQp1NA"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 3    "
                        }
                      ],
                      "id": "wMKUrS3CtiGkpTZOAm1TJ"
                    },
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " D E F"
                        }
                      ],
                      "id": "Vwwa8kKju-AcmGafzewHE"
                    }
                  ],
                  "id": "pRDk61lXwF9YltKTHvCzc"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 4    "
                        }
                      ],
                      "id": "eQo6xnP1_MD64cg2TMS6L"
                    },
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " G H I"
                        }
                      ],
                      "id": "BMR3sHV2lSS_xDOsgQaad"
                    }
                  ],
                  "id": "c4TiMK_WiXGnuF3SHwhxF"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 5    "
                        }
                      ],
                      "id": "2Zt9X9SCinI1HHr0cA0z7"
                    },
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " J K L"
                        }
                      ],
                      "id": "fhRpmgBtuXlWHvN41Qh9Y"
                    }
                  ],
                  "id": "pdBtJT5cwFu3m_AwCC8d0"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 6    "
                        }
                      ],
                      "id": "pmewikKmJ2duCZmGcpXep"
                    },
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " M N O"
                        }
                      ],
                      "id": "VXRzzn6qwPHdJhY7rDTOE"
                    }
                  ],
                  "id": "o7IRgCh2zUh1gENJ4vnwV"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 7    "
                        }
                      ],
                      "id": "_MxM6jmI4P7DesO-L0VSi"
                    },
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " P R S"
                        }
                      ],
                      "id": "Q3HeNy9OWbOS_JZ-bxawg"
                    }
                  ],
                  "id": "AND_6uEVuSQkCiv2aKn6P"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 8    "
                        }
                      ],
                      "id": "vqFC63EXr-cyAPVq6sVAa"
                    },
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " T U V"
                        }
                      ],
                      "id": "mITqLMsBQLzv5g0sbTh53"
                    }
                  ],
                  "id": "V78UrxKhvAdi0Gb6IojBB"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 9    "
                        }
                      ],
                      "id": "u2jh1NMfAgrss0PV0CEvm"
                    },
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " W X Y"
                        }
                      ],
                      "id": "uZurmZ9v06oMeV-hKSSns"
                    }
                  ],
                  "id": "O6oDKvhaGyDhu0bCUl6JL"
                }
              ],
              "name": "table",
              "margin": "",
              "text": "=begin table\nDigit   Letter Values\n=====   =============\n2       A B C\n3       D E F\n4       G H I\n5       J K L\n6       M N O\n7       P R S\n8       T U V\n9       W X Y\n=end table\n",
              "config": [],
              "location": {
                "start": {
                  "offset": 1166,
                  "line": 30,
                  "column": 1
                },
                "end": {
                  "offset": 1346,
                  "line": 42,
                  "column": 1
                }
              },
              "id": "_DZisJ3KRjVPjY-XUa0m5"
            },
            {
              "type": "blankline"
            },
            {
              "text": "It’s these corresponding letter values that enable us to derive the word\nSCRIPTS from of the phone number 727-4787:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It’s these corresponding letter values that enable us to derive the word\nSCRIPTS from of the phone number 727-4787:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1347,
                  "line": 43,
                  "column": 1
                },
                "end": {
                  "offset": 1463,
                  "line": 45,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "block",
              "content": [
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 7  S"
                        }
                      ],
                      "id": "LproSgOlwbzk96Xz-tZmy"
                    }
                  ],
                  "id": "kWfF_AlOJLWuPomW5Bmze"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 2  C"
                        }
                      ],
                      "id": "aQoCzG8GMAo66HaFKqlyt"
                    }
                  ],
                  "id": "iFhdShq29fbO7NgVVmPVl"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 7  R"
                        }
                      ],
                      "id": "0sNGeGVyykadurUDpWMiy"
                    }
                  ],
                  "id": "u_FW7XT-kPG5bUTV1S437"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 4  I"
                        }
                      ],
                      "id": "B8-odolBARW6cKQzRxmgM"
                    }
                  ],
                  "id": "QIfG2GmzGkmCApmYKVMbk"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 7  P"
                        }
                      ],
                      "id": "ATPyv7M6uI8v4MwW-EQSU"
                    }
                  ],
                  "id": "X1WhLGTaG5uR3TjHMK2rJ"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 8  T"
                        }
                      ],
                      "id": "6zJpoKdUBI5lw4-Suwk9s"
                    }
                  ],
                  "id": "upNqewFhH9oQODFpnmOqo"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 7  S"
                        }
                      ],
                      "id": "Gj4Zr3efdcEOMkzfpeo8A"
                    }
                  ],
                  "id": "Kzr5h-LuB6-nuQMxo0vw5"
                }
              ],
              "name": "table",
              "margin": "",
              "text": "=begin table\n7  S\n2  C\n7  R\n4  I\n7  P\n8  T\n7  S\n=end table\n",
              "config": [],
              "location": {
                "start": {
                  "offset": 1464,
                  "line": 46,
                  "column": 1
                },
                "end": {
                  "offset": 1523,
                  "line": 55,
                  "column": 1
                }
              },
              "id": "IR79vynXQnmW6GnLgwXaI"
            },
            {
              "type": "blankline"
            },
            {
              "text": "That’s pretty cool; SCRIPTS is way easier to remember than 727-4787. On the\nother hand, trying to figure out which word – if any – can be made from a\ngiven phone number is kind of challenging. What would really be cool is\nscript that can convert a phone number to a word.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "That’s pretty cool; SCRIPTS is way easier to remember than 727-4787. On the\nother hand, trying to figure out which word – if any – can be made from a\ngiven phone number is kind of challenging. What would really be cool is\nscript that can convert a phone number to a word.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1524,
                  "line": 56,
                  "column": 1
                },
                "end": {
                  "offset": 1796,
                  "line": 60,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Now, try to guess what you need to do for Event 1 in the Advanced Division.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Now, try to guess what you need to do for Event 1 in the Advanced Division.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1797,
                  "line": 61,
                  "column": 1
                },
                "end": {
                  "offset": 1873,
                  "line": 62,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Good guess. Your task in Event 1 is this: given a seven-digit phone number\n(e.g., 732-3464), create a seven-letter word corresponding to those digits.\nKeep in mind that you can only use the three letter values that correspond\nto each digit. For example, the word you create for 732-3464 must start with\nthe letter P, R, or S. Why? Because the phone number starts with the number\n7, and, on the standard phone dial, those three letters are the only letters\nassociated with the number 7. In case you’re wondering, one possible\nsolution for 732-3464 is the word READING:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Good guess. Your task in Event 1 is this: given a seven-digit phone number\n(e.g., 732-3464), create a seven-letter word corresponding to those digits.\nKeep in mind that you can only use the three letter values that correspond\nto each digit. For example, the word you create for 732-3464 must start with\nthe letter P, R, or S. Why? Because the phone number starts with the number\n7, and, on the standard phone dial, those three letters are the only letters\nassociated with the number 7. In case you’re wondering, one possible\nsolution for 732-3464 is the word READING:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1874,
                  "line": 63,
                  "column": 1
                },
                "end": {
                  "offset": 2442,
                  "line": 71,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "block",
              "content": [
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " 7  3  2  3  4  6  4"
                        }
                      ],
                      "id": "vaYaCXrsXnMkEoo8BQiO6"
                    }
                  ],
                  "id": "JmfKKOFt11JchruLqh78a"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " =  =  =  =  =  =  ="
                        }
                      ],
                      "id": "MLTBkYhB8IVQpXdJU3lrb"
                    }
                  ],
                  "id": "eYH-NNPqBhLlKwunQcHvA"
                },
                {
                  "name": "table_row",
                  "type": "block",
                  "content": [
                    {
                      "name": "table_cell",
                      "type": "block",
                      "content": [
                        {
                          "type": "text",
                          "value": " R  E  A  D  I  N  G"
                        }
                      ],
                      "id": "mEyrli_a8_8h2Ten0kCxT"
                    }
                  ],
                  "id": "Bd7ztuwcN6hMVSxArqXDY"
                }
              ],
              "name": "table",
              "margin": "",
              "text": "=begin table\n7  3  2  3  4  6  4\n=  =  =  =  =  =  =\nR  E  A  D  I  N  G\n=end table\n",
              "config": [],
              "location": {
                "start": {
                  "offset": 2443,
                  "line": 72,
                  "column": 1
                },
                "end": {
                  "offset": 2527,
                  "line": 77,
                  "column": 1
                }
              },
              "id": "K8EwvP06NX8J_G0FypLZn"
            },
            {
              "type": "blankline"
            },
            {
              "text": "To receive credit for this event you must come up with a seven-letter word;\nany other use of the seven letters (for example, a four-letter word plus a\nthree-letter word) will not be accepted. In addition, the word must appear\nin the file WordList.txt, an official word list that is included as part of\nthe Scripting Games’ Competitors Pack. On top of that, keep in mind that: 1)\nalthough there might be multiple solutions for a given phone number your\nscript should only display one solution; and 2) the script should only\ndisplay a correct solution. Please don’t display all possible solutions; for\nexample, don’t do this:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "To receive credit for this event you must come up with a seven-letter word;\nany other use of the seven letters (for example, a four-letter word plus a\nthree-letter word) will not be accepted. In addition, the word must appear\nin the file WordList.txt, an official word list that is included as part of\nthe Scripting Games’ Competitors Pack. On top of that, keep in mind that: 1)\nalthough there might be multiple solutions for a given phone number your\nscript should only display one solution; and 2) the script should only\ndisplay a correct solution. Please don’t display all possible solutions; for\nexample, don’t do this:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2528,
                  "line": 78,
                  "column": 1
                },
                "end": {
                  "offset": 3152,
                  "line": 87,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "PDBEGMH\nREADING\nSFCFHOI\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "PDBEGMH\n    READING\n    SFCFHOI\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 3153,
                  "line": 88,
                  "column": 1
                },
                "end": {
                  "offset": 3189,
                  "line": 91,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If you do, we’ll have to disqualify your entry. Instead, display only a\nsingle correct solution, like so:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If you do, we’ll have to disqualify your entry. Instead, display only a\nsingle correct solution, like so:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 3190,
                  "line": 92,
                  "column": 1
                },
                "end": {
                  "offset": 3296,
                  "line": 94,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "READING\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "READING\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 3297,
                  "line": 95,
                  "column": 1
                },
                "end": {
                  "offset": 3309,
                  "line": 96,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Your script must prompt the user to enter a phone number (either via the\ncommand line or using an Input box). When the scripts are tested, phone\nnumbers will be entered without the hyphen; thus the number 732-3464 will\nactually be entered into the program like this:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Your script must prompt the user to enter a phone number (either via the\ncommand line or using an Input box). When the scripts are tested, phone\nnumbers will be entered without the hyphen; thus the number 732-3464 will\nactually be entered into the program like this:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 3310,
                  "line": 97,
                  "column": 1
                },
                "end": {
                  "offset": 3577,
                  "line": 101,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "7323464\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "7323464\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 3578,
                  "line": 102,
                  "column": 1
                },
                "end": {
                  "offset": 3590,
                  "line": 103,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "In other words, you do not need to include code that removes the hyphen from\nthe phone number; the hyphen will never appear in the phone number. Oh, and\nwhen your script reads from the file WordList.txt (trust us: your script\nwill need to do that) make sure this file is in the folder C:\\Scripts. If\nthe file is in any other folder, your script will likely fail when we test\nit.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In other words, you do not need to include code that removes the hyphen from\nthe phone number; the hyphen will never appear in the phone number. Oh, and\nwhen your script reads from the file WordList.txt (trust us: your script\nwill need to do that) make sure this file is in the folder C:\\Scripts. If\nthe file is in any other folder, your script will likely fail when we test\nit.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 3591,
                  "line": 104,
                  "column": 1
                },
                "end": {
                  "offset": 3970,
                  "line": 110,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://web.archive.org/web/20080321224441/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/aevent1.mspx>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://web.archive.org/web/20080321224441/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/aevent1.mspx"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 3971,
                  "line": 111,
                  "column": 1
                },
                "end": {
                  "offset": 4097,
                  "line": 112,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 4107,
              "line": 114,
              "column": 1
            }
          },
          "id": "tzwKMcVBxmXnVW-bXhFBY"
        },
        {
          "text": "\nsub MAIN(Bool :$verbose = False) {\n    my $input-file = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, \"wordlist.txt\");\n    my %dict = (($input-file.IO.lines.grep: {.chars == 7}) X 1).flat;\n\n    my %digits = (\n        2 => (<a b c>),\n        3 => (<d e f>),\n        4 => (<g h i>),\n        5 => (<j k l>),\n        6 => (<m n o>),\n        7 => (<p r s>),\n        8 => (<t u v>),\n        9 => (<w x y>),\n    );\n\n    my $phone_number = 7323464;\n    my @test_words;\n\n    for $phone_number.comb {\n        say $_, \"->\", %digits{$_}.join('-') if $verbose;\n        if (@test_words.elems) {\n            my @values = %digits{$_}.values;\n            @test_words = @test_words X~ '' X~ @values;\n        }\n        else {\n            @test_words = %digits{$_}.values;\n        }\n    }\n\n    say \"Comparing {@test_words.elems} words against a dictionary of {%dict.elems} entries\"\n        if $verbose;\n    for @test_words -> $word {\n        $word.uc.say if defined %dict{$word};\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 4107,
              "line": 114,
              "column": 1
            },
            "end": {
              "offset": 5111,
              "line": 152,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Skating on Thin Ice\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/wsg/advanced-2008/event002-eric256.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "6bR6TpJsea_o09UN6jd0R",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Skating on Thin Ice\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Skating on Thin Ice\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 48,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 48,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "Bxmj4WwZzUi6gqVq1njfr"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Eric Hodges\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Eric Hodges\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 49,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 69,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 49,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 69,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "mjn9IBCI7QKNNkGn2n5O2"
            },
            {
              "type": "blankline"
            },
            {
              "text": "In Skating on Thin Ice competitors must write a script that determines the\nwinner of a figure skating competition.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In Skating on Thin Ice competitors must write a script that determines the\nwinner of a figure skating competition.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 70,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 185,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Event Scenario\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Event Scenario\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 186,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 201,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If you’re likely the Scripting Guys, your fondest wish in life is to be able\nto judge a figure skating contest. Event 2 in the Advanced Division is proof\nthat wishes really do come true.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If you’re likely the Scripting Guys, your fondest wish in life is to be able\nto judge a figure skating contest. Event 2 in the Advanced Division is proof\nthat wishes really do come true.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 202,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 389,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "OK, if you want to get picky, you don’t actually get to judge a figure\nskating contest; the judging has already been done for you. Instead, all you\nhave to do is determine who actually won the contest, using a formula\nroughly similar to that used by the International Skating Union. Sounds fun,\nhuh?\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "OK, if you want to get picky, you don’t actually get to judge a figure\nskating contest; the judging has already been done for you. Instead, all you\nhave to do is determine who actually won the contest, using a formula\nroughly similar to that used by the International Skating Union. Sounds fun,\nhuh?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 390,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 690,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "To determine the winner your script must use the scoring information found\nin the text file Skaters.txt (which can be found in the Scripting Games\nCompetitors’ Pack). Each line in the text file consists of information for\nan entrant in the competition; more specifically, each line contains the\nskater’s name followed by the scores awarded by each of the seven judges:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "To determine the winner your script must use the scoring information found\nin the text file Skaters.txt (which can be found in the Scripting Games\nCompetitors’ Pack). Each line in the text file consists of information for\nan entrant in the competition; more specifically, each line contains the\nskater’s name followed by the scores awarded by each of the seven judges:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 691,
                  "line": 24,
                  "column": 1
                },
                "end": {
                  "offset": 1060,
                  "line": 29,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Ken Myer,55,66,76,67,59,70,54\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Ken Myer,55,66,76,67,59,70,54\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1061,
                  "line": 30,
                  "column": 1
                },
                "end": {
                  "offset": 1095,
                  "line": 31,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "To calculate Ken Myer’s score you (or, more precisely, your script) must do\nthe following:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "To calculate Ken Myer’s score you (or, more precisely, your script) must do\nthe following:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1096,
                  "line": 32,
                  "column": 1
                },
                "end": {
                  "offset": 1187,
                  "line": 34,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Throw out the highest of his seven scores (76).\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Throw out the highest of his seven scores (76).\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1188,
                          "line": 35,
                          "column": 1
                        },
                        "end": {
                          "offset": 1242,
                          "line": 36,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1188,
                      "line": 35,
                      "column": 1
                    },
                    "end": {
                      "offset": 1242,
                      "line": 36,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "iHDoCjaJCkbjR5S1g990z"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Throw out the lowest of his seven scores (54).\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Throw out the lowest of his seven scores (54).\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1242,
                          "line": 36,
                          "column": 1
                        },
                        "end": {
                          "offset": 1295,
                          "line": 37,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1242,
                      "line": 36,
                      "column": 1
                    },
                    "end": {
                      "offset": 1295,
                      "line": 37,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "wsGzB0EfyxqnunZVyQflN"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Average the remaining five scores (55, 66, 67, 59, and 70).\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Average the remaining five scores (55, 66, 67, 59, and 70).\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1295,
                          "line": 37,
                          "column": 1
                        },
                        "end": {
                          "offset": 1361,
                          "line": 38,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1295,
                      "line": 37,
                      "column": 1
                    },
                    "end": {
                      "offset": 1361,
                      "line": 38,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "GSoChuUCwQAzxakRaDrFJ"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "Thus Ken Myer would receive a score of 63.4 (55 + 66 + 67 + 59 +70, all\ndivided by 5).\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Thus Ken Myer would receive a score of 63.4 (55 + 66 + 67 + 59 +70, all\ndivided by 5).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1362,
                  "line": 39,
                  "column": 1
                },
                "end": {
                  "offset": 1449,
                  "line": 41,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "To receive credit for this event your script must report back the winners of\nthe gold (skater with the highest score); silver (skater with the\nsecond-highest score); and bronze (skater with the third-highest score)\nmedals, along with their score. Your final output should look similar to\nthis:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "To receive credit for this event your script must report back the winners of\nthe gold (skater with the highest score); silver (skater with the\nsecond-highest score); and bronze (skater with the third-highest score)\nmedals, along with their score. Your final output should look similar to\nthis:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1450,
                  "line": 42,
                  "column": 1
                },
                "end": {
                  "offset": 1744,
                  "line": 47,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Gold medal: Ken Myer, 63.4\nSilver medal: Pilar Ackerman, 62.78\nBronze medal: Jonathan Haas, 61.8272\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Gold medal: Ken Myer, 63.4\n    Silver medal: Pilar Ackerman, 62.78\n    Bronze medal: Jonathan Haas, 61.8272\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1745,
                  "line": 48,
                  "column": 1
                },
                "end": {
                  "offset": 1857,
                  "line": 51,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If another of your fondest wishes is to successfully complete this event,\nmake sure you place the file Skaters.txt in the folder C:\\Scripts; if you\nuse any folder other than C:\\Scripts then your script is likely to fail.\nAlso, you must display the results in the command window; do not overwrite\nthe file Skaters.txt. If you do overwrite the file, you will not receive any\npoints for the event. (And we won’t be very happy with you, because you’ll\nhave overwritten our copy of the file!)\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If another of your fondest wishes is to successfully complete this event,\nmake sure you place the file Skaters.txt in the folder C:\\Scripts; if you\nuse any folder other than C:\\Scripts then your script is likely to fail.\nAlso, you must display the results in the command window; do not overwrite\nthe file Skaters.txt. If you do overwrite the file, you will not receive any\npoints for the event. (And we won’t be very happy with you, because you’ll\nhave overwritten our copy of the file!)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1858,
                  "line": 52,
                  "column": 1
                },
                "end": {
                  "offset": 2346,
                  "line": 59,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Note that your script does not have to include code for handling ties. We’ve\nset up the scores to make sure that there won’t be any ties for the top 3\npositions.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Note that your script does not have to include code for handling ties. We’ve\nset up the scores to make sure that there won’t be any ties for the top 3\npositions.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2347,
                  "line": 60,
                  "column": 1
                },
                "end": {
                  "offset": 2509,
                  "line": 63,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://web.archive.org/web/20080325083541/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/aevent2.mspx>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://web.archive.org/web/20080325083541/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/aevent2.mspx"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2510,
                  "line": 64,
                  "column": 1
                },
                "end": {
                  "offset": 2636,
                  "line": 65,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 2646,
              "line": 67,
              "column": 1
            }
          },
          "id": "RoJvVgEGkOJoXYEkurCTC"
        },
        {
          "text": "\nmy $input-file = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, \"skaters.txt\");\nmy @lines = slurp($input-file).split(\"\\n\");\n\nmy %skaters ;\nfor @lines {\n    next unless .chars > 0;\n    my @data = .split(',');\n    my $score = [+] (@data[1..7].sort)[2..6];\n    %skaters{@data[0]} = $score / 5\n}\n\nmy ($gold, $silver, $bronze) = %skaters.pairs.sort({$^b.value <=> $^a.value})[0,1,2];\nsay \"Gold: {$gold.key}: {$gold.value}\";\nsay \"Silver: {$silver.key}: {$silver.value}\";\nsay \"Bronze: {$bronze.key}: {$bronze.value}\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 2646,
              "line": 67,
              "column": 1
            },
            "end": {
              "offset": 3192,
              "line": 85,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "You Call That a Strong Password?\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/wsg/advanced-2008/event005-eric256.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "zWgaTOz86Nwc9qgGnFgEG",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "You Call That a Strong Password?\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "You Call That a Strong Password?\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 61,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 61,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "_zR-c6PwYFqQ34pTF9EjQ"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Eric Hodges\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Eric Hodges\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 62,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 82,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 62,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 82,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "fBUDpEwLahdQ4UGX1UjmQ"
            },
            {
              "type": "blankline"
            },
            {
              "text": "In You Call That a Strong Password? competitors must write a script that,\nbased on the supplied criteria, determines the strength of a password.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In You Call That a Strong Password? competitors must write a script that,\nbased on the supplied criteria, determines the strength of a password.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 83,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 228,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Event Scenario\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Event Scenario\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 229,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 244,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "In this day and age, people are encouraged to use “strong” passwords any\ntime they need to create or change a password. That’s good advice, but it\nalso leads to a couple of questions: 1) what exactly is a strong password,\nand 2) along the same lines, how can we tell whether a given password is\nstrong or not? Event 5 is designed to help you answer those two questions.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In this day and age, people are encouraged to use “strong” passwords any\ntime they need to create or change a password. That’s good advice, but it\nalso leads to a couple of questions: 1) what exactly is a strong password,\nand 2) along the same lines, how can we tell whether a given password is\nstrong or not? Event 5 is designed to help you answer those two questions.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 245,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 615,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "In this event you will create a script that can determine the “strength” of\na password. Password strength will be determined by submitting the password\nto the following checks. The script must do all of the following:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In this event you will create a script that can determine the “strength” of\na password. Password strength will be determined by submitting the password\nto the following checks. The script must do all of the following:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 616,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 834,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "B<Make sure that the password is not an actual word.> The password\n      rhubarb fails this test because rhubarb is an actual word. To determine\n      whether a word is an actual word or not, always use the file WordList.txt,\n      an official word list that is included as part of the Scripting Games\n      Competitors’ Pack. (Make sure you put this file in the folder C:\\Scripts.)\n      Note that this check should be case-insensitive: not only is rhubarb an\n      actual word but so is RHUBARB, rhUBArb, etc.\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Make sure that the password is not an actual word."
                            }
                          ],
                          "type": "fcode",
                          "name": "B"
                        },
                        {
                          "type": "text",
                          "value": " The password\n      rhubarb fails this test because rhubarb is an actual word. To determine\n      whether a word is an actual word or not, always use the file WordList.txt,\n      an official word list that is included as part of the Scripting Games\n      Competitors’ Pack. (Make sure you put this file in the folder C:\\Scripts.)\n      Note that this check should be case-insensitive: not only is rhubarb an\n      actual word but so is RHUBARB, rhUBArb, etc.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 835,
                          "line": 24,
                          "column": 1
                        },
                        "end": {
                          "offset": 1353,
                          "line": 31,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 835,
                      "line": 24,
                      "column": 1
                    },
                    "end": {
                      "offset": 1353,
                      "line": 31,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "h9KMgpLb8ijZyzBGEGMzF"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "B<Make sure that the password, minus the last letter, is not an actual\n      word.> For example, the password rhubarb5 fails this test because, if you\n      remove the last letter, the remaining string value – rhubarb – is an actual\n      word. This check should be case-insensitive.\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Make sure that the password, minus the last letter, is not an actual\n      word."
                            }
                          ],
                          "type": "fcode",
                          "name": "B"
                        },
                        {
                          "type": "text",
                          "value": " For example, the password rhubarb5 fails this test because, if you\n      remove the last letter, the remaining string value – rhubarb – is an actual\n      word. This check should be case-insensitive.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1354,
                          "line": 32,
                          "column": 1
                        },
                        "end": {
                          "offset": 1644,
                          "line": 36,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1354,
                      "line": 32,
                      "column": 1
                    },
                    "end": {
                      "offset": 1644,
                      "line": 36,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "9QiDHC3kMDcV6_m-eZWtA"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "B<Make sure that the password, minus the first letter, is not an actual\n      word.> For example, the password @rhubarb fails this test because, if you\n      remove the first letter, the remaining string value – rhubarb – is an actual\n      word. This check should be case-insensitive.\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Make sure that the password, minus the first letter, is not an actual\n      word."
                            }
                          ],
                          "type": "fcode",
                          "name": "B"
                        },
                        {
                          "type": "text",
                          "value": " For example, the password @rhubarb fails this test because, if you\n      remove the first letter, the remaining string value – rhubarb – is an actual\n      word. This check should be case-insensitive.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1645,
                          "line": 37,
                          "column": 1
                        },
                        "end": {
                          "offset": 1937,
                          "line": 41,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1645,
                      "line": 37,
                      "column": 1
                    },
                    "end": {
                      "offset": 1937,
                      "line": 41,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "1p_dd2N1vLjk2RRdHXnUW"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "B<Make sure that the password does not simply substitute 0 (zero) for the\n      letter o (either an uppercase O or a lowercase o).> For example, the password\n      t00lb0x fails this test. Why? Because if you replace each of the zeroes with\n      the letter O you’ll be left with an actual word: toolbox.\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Make sure that the password does not simply substitute 0 (zero) for the\n      letter o (either an uppercase O or a lowercase o)."
                            }
                          ],
                          "type": "fcode",
                          "name": "B"
                        },
                        {
                          "type": "text",
                          "value": " For example, the password\n      t00lb0x fails this test. Why? Because if you replace each of the zeroes with\n      the letter O you’ll be left with an actual word: toolbox.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1938,
                          "line": 42,
                          "column": 1
                        },
                        "end": {
                          "offset": 2249,
                          "line": 46,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1938,
                      "line": 42,
                      "column": 1
                    },
                    "end": {
                      "offset": 2249,
                      "line": 46,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "7l84xJSnEcqwsW4DNkReB"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "B<Make sure that the password does not simply substitute 1 (one) for the\n      letter l (either an uppercase L or a lowercase l).> For example, the password\n      f1oti11a fails this test. Why? Because if you replace each of the ones with\n      the letter L you’ll be left with an actual word: flotilla.\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Make sure that the password does not simply substitute 1 (one) for the\n      letter l (either an uppercase L or a lowercase l)."
                            }
                          ],
                          "type": "fcode",
                          "name": "B"
                        },
                        {
                          "type": "text",
                          "value": " For example, the password\n      f1oti11a fails this test. Why? Because if you replace each of the ones with\n      the letter L you’ll be left with an actual word: flotilla.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 2250,
                          "line": 47,
                          "column": 1
                        },
                        "end": {
                          "offset": 2560,
                          "line": 51,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 2250,
                      "line": 47,
                      "column": 1
                    },
                    "end": {
                      "offset": 2560,
                      "line": 51,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "YTVXSNTmzs-1-i4QJd72E"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "B<Make sure that the password is at least 10 characters long but no more\n      than 20 characters long.> The password rhubarb fails this test because it has\n      only 7 characters.\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Make sure that the password is at least 10 characters long but no more\n      than 20 characters long."
                            }
                          ],
                          "type": "fcode",
                          "name": "B"
                        },
                        {
                          "type": "text",
                          "value": " The password rhubarb fails this test because it has\n      only 7 characters.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 2561,
                          "line": 52,
                          "column": 1
                        },
                        "end": {
                          "offset": 2749,
                          "line": 55,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 2561,
                      "line": 52,
                      "column": 1
                    },
                    "end": {
                      "offset": 2749,
                      "line": 55,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "n18QsXSgOCv5j6mqt5Xa8"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "B<Make sure that the password includes at least one number (the digits 0\n      through 9).> The password rhubarb%$qwC fails this test because it does not\n      include a number.\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Make sure that the password includes at least one number (the digits 0\n      through 9)."
                            }
                          ],
                          "type": "fcode",
                          "name": "B"
                        },
                        {
                          "type": "text",
                          "value": " The password rhubarb%$qwC fails this test because it does not\n      include a number.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 2750,
                          "line": 56,
                          "column": 1
                        },
                        "end": {
                          "offset": 2934,
                          "line": 59,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 2750,
                      "line": 56,
                      "column": 1
                    },
                    "end": {
                      "offset": 2934,
                      "line": 59,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "Qe8dloGXayYcz31fdN5ma"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "B<Make sure that the password includes at least one uppercase letter.> The\n      password rhubarb fails this test because it does not have an uppercase\n      letter.\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Make sure that the password includes at least one uppercase letter."
                            }
                          ],
                          "type": "fcode",
                          "name": "B"
                        },
                        {
                          "type": "text",
                          "value": " The\n      password rhubarb fails this test because it does not have an uppercase\n      letter.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 2935,
                          "line": 60,
                          "column": 1
                        },
                        "end": {
                          "offset": 3107,
                          "line": 63,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 2935,
                      "line": 60,
                      "column": 1
                    },
                    "end": {
                      "offset": 3107,
                      "line": 63,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "eIvomRHDOG6KUx_xp0Mw2"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "B<Make sure that the password includes at least one lowercase letter.> The\n      password RHUBARB fails this test because it does not have a lowercase\n      letter.\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Make sure that the password includes at least one lowercase letter."
                            }
                          ],
                          "type": "fcode",
                          "name": "B"
                        },
                        {
                          "type": "text",
                          "value": " The\n      password RHUBARB fails this test because it does not have a lowercase\n      letter.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 3108,
                          "line": 64,
                          "column": 1
                        },
                        "end": {
                          "offset": 3279,
                          "line": 67,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 3108,
                      "line": 64,
                      "column": 1
                    },
                    "end": {
                      "offset": 3279,
                      "line": 67,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "R2BTL7GX8dLLy9R2YgsnW"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "B<Make sure that the password includes at least one symbol.> This can be\n      any character that is neither an uppercase or lowercase letter, or a number;\n      that would include – but not be limited to – the symbols ~, @, #, $, % and\n      ^.\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Make sure that the password includes at least one symbol."
                            }
                          ],
                          "type": "fcode",
                          "name": "B"
                        },
                        {
                          "type": "text",
                          "value": " This can be\n      any character that is neither an uppercase or lowercase letter, or a number;\n      that would include – but not be limited to – the symbols ~, @, #, $, % and\n      ^.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 3280,
                          "line": 68,
                          "column": 1
                        },
                        "end": {
                          "offset": 3532,
                          "line": 72,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 3280,
                      "line": 68,
                      "column": 1
                    },
                    "end": {
                      "offset": 3532,
                      "line": 72,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "ZmYm-W1PwBjtQY9mXItli"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "B<Make sure that the password does not include four (or more) lowercase\n      letters in succession.> The password rhubARB fails this test because it\n      includes four lowercase letters (rhub) in succession.\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Make sure that the password does not include four (or more) lowercase\n      letters in succession."
                            }
                          ],
                          "type": "fcode",
                          "name": "B"
                        },
                        {
                          "type": "text",
                          "value": " The password rhubARB fails this test because it\n      includes four lowercase letters (rhub) in succession.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 3533,
                          "line": 73,
                          "column": 1
                        },
                        "end": {
                          "offset": 3749,
                          "line": 76,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 3533,
                      "line": 73,
                      "column": 1
                    },
                    "end": {
                      "offset": 3749,
                      "line": 76,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "FPwTUfvt9Xu120I91zk85"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "B<Make sure that the password does not include four (or more) uppercase\n      letters in succession.> The password rHUBArb fails this test because it\n      includes four uppercase letters (HUBA) in succession.\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Make sure that the password does not include four (or more) uppercase\n      letters in succession."
                            }
                          ],
                          "type": "fcode",
                          "name": "B"
                        },
                        {
                          "type": "text",
                          "value": " The password rHUBArb fails this test because it\n      includes four uppercase letters (HUBA) in succession.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 3750,
                          "line": 77,
                          "column": 1
                        },
                        "end": {
                          "offset": 3966,
                          "line": 80,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 3750,
                      "line": 77,
                      "column": 1
                    },
                    "end": {
                      "offset": 3966,
                      "line": 80,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "8OfzIxrvJ0lUj0H5-Tf_b"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "B<Make sure that the password does not include any duplicate characters.>\n      The password rhubarb fails this test because it has two r’s and two b’s.\n      This check should be case-sensitive: A and a are to be considered separated\n      letters. Thus the password Oboe would not fail this particular test.\n",
                      "margin": "",
                      "content": [
                        {
                          "content": [
                            {
                              "type": "text",
                              "value": "Make sure that the password does not include any duplicate characters."
                            }
                          ],
                          "type": "fcode",
                          "name": "B"
                        },
                        {
                          "type": "text",
                          "value": "\n      The password rhubarb fails this test because it has two r’s and two b’s.\n      This check should be case-sensitive: A and a are to be considered separated\n      letters. Thus the password Oboe would not fail this particular test.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 3967,
                          "line": 81,
                          "column": 1
                        },
                        "end": {
                          "offset": 4283,
                          "line": 85,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 3967,
                      "line": 81,
                      "column": 1
                    },
                    "end": {
                      "offset": 4283,
                      "line": 85,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "4fxt65wh3ZVrfLClQ4zmo"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "Note. Yes, that is a lot to remember, isn’t it? To help you keep track of\neverything we’ve included a checklist (Password_Checklist.doc) in the\nCompetitors’ Pack.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Note. Yes, that is a lot to remember, isn’t it? To help you keep track of\neverything we’ve included a checklist (Password_Checklist.doc) in the\nCompetitors’ Pack.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 4284,
                  "line": 86,
                  "column": 1
                },
                "end": {
                  "offset": 4447,
                  "line": 89,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "To successfully complete this event, your script must accept a possible\npassword as a command-line argument and rate that password. For example, if\nyou want to rate the strength of the password rhubarb33! you would start\nyour script using a command similar to this command:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "To successfully complete this event, your script must accept a possible\npassword as a command-line argument and rate that password. For example, if\nyou want to rate the strength of the password rhubarb33! you would start\nyour script using a command similar to this command:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 4448,
                  "line": 90,
                  "column": 1
                },
                "end": {
                  "offset": 4722,
                  "line": 94,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "myscript.pl rhubarb33!\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "myscript.pl rhubarb33!\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 4723,
                  "line": 95,
                  "column": 1
                },
                "end": {
                  "offset": 4750,
                  "line": 96,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Your script should start out with a password score of 13; that means that a\npassword that passed every single check will have a final score of 13. After\nretrieving the password from the arguments collection (and we will pass the\nscript only one password at a time) your script should run each of the\npreviously-mentioned checks against that password. If the password passes a\ngiven check (for example, the test that checks to see if the password is an\nactual word) then the script should simply go on to the next test. That\nshould be easy enough.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Your script should start out with a password score of 13; that means that a\npassword that passed every single check will have a final score of 13. After\nretrieving the password from the arguments collection (and we will pass the\nscript only one password at a time) your script should run each of the\npreviously-mentioned checks against that password. If the password passes a\ngiven check (for example, the test that checks to see if the password is an\nactual word) then the script should simply go on to the next test. That\nshould be easy enough.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 4751,
                  "line": 97,
                  "column": 1
                },
                "end": {
                  "offset": 5298,
                  "line": 105,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Now, what happens if the password fails a given check? For example, the\npassword rhubarb will fail the test that says a password cannot have four\nconsecutive lowercase letters. In that case, the script must do two things:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Now, what happens if the password fails a given check? For example, the\npassword rhubarb will fail the test that says a password cannot have four\nconsecutive lowercase letters. In that case, the script must do two things:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 5299,
                  "line": 106,
                  "column": 1
                },
                "end": {
                  "offset": 5521,
                  "line": 109,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Subtract 1 from the password score. For example, if the password score\n      is 11 and the script fails the check for four consecutive lowercase letters\n      then the password score should be lowered to 10\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Subtract 1 from the password score. For example, if the password score\n      is 11 and the script fails the check for four consecutive lowercase letters\n      then the password score should be lowered to 10\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 5522,
                          "line": 110,
                          "column": 1
                        },
                        "end": {
                          "offset": 5735,
                          "line": 113,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 5522,
                      "line": 110,
                      "column": 1
                    },
                    "end": {
                      "offset": 5735,
                      "line": 113,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "p0b1kvC-oK_S0o1fAwley"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Echo back a message stating that the proposed password has failed this\n      test. For example, in this case you would echo back a message similar to\n      this:\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Echo back a message stating that the proposed password has failed this\n      test. For example, in this case you would echo back a message similar to\n      this:\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 5736,
                          "line": 114,
                          "column": 1
                        },
                        "end": {
                          "offset": 5904,
                          "line": 117,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 5736,
                      "line": 114,
                      "column": 1
                    },
                    "end": {
                      "offset": 5904,
                      "line": 117,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "NG1lVIK9jaEBwY2hQ7hPs"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "Four consecutive lowercase letters in password.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Four consecutive lowercase letters in password.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 5905,
                  "line": 118,
                  "column": 1
                },
                "end": {
                  "offset": 5957,
                  "line": 119,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "After all the checks have been made the script should then rate the\npassword, using the following scale:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "After all the checks have been made the script should then rate the\npassword, using the following scale:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 5958,
                  "line": 120,
                  "column": 1
                },
                "end": {
                  "offset": 6063,
                  "line": 122,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "A score of 6 or less represents a weak password.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "A score of 6 or less represents a weak password.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 6064,
                          "line": 123,
                          "column": 1
                        },
                        "end": {
                          "offset": 6119,
                          "line": 124,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 6064,
                      "line": 123,
                      "column": 1
                    },
                    "end": {
                      "offset": 6119,
                      "line": 124,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "zVxksLkSxJOBjmYZoRSIf"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "A score of 7, 8, 9, or 10 represents a moderately-strong password.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "A score of 7, 8, 9, or 10 represents a moderately-strong password.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 6119,
                          "line": 124,
                          "column": 1
                        },
                        "end": {
                          "offset": 6192,
                          "line": 125,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 6119,
                      "line": 124,
                      "column": 1
                    },
                    "end": {
                      "offset": 6192,
                      "line": 125,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "OM_d28EWVTjr-aYaMdzwn"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "A score of 11 or more represents a strong password.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "A score of 11 or more represents a strong password.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 6192,
                          "line": 125,
                          "column": 1
                        },
                        "end": {
                          "offset": 6250,
                          "line": 126,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 6192,
                      "line": 125,
                      "column": 1
                    },
                    "end": {
                      "offset": 6250,
                      "line": 126,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "wt73_VuLJD1QiMAEHkGVC"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "You should echo back both the score and the password rating. For example:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "You should echo back both the score and the password rating. For example:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 6251,
                  "line": 127,
                  "column": 1
                },
                "end": {
                  "offset": 6325,
                  "line": 128,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A password score of 4 indicates a weak password.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "A password score of 4 indicates a weak password.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 6326,
                  "line": 129,
                  "column": 1
                },
                "end": {
                  "offset": 6379,
                  "line": 130,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "As an example, here’s the kind of output you should get when you check the\npassword rhubarb33!:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "As an example, here’s the kind of output you should get when you check the\npassword rhubarb33!:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 6380,
                  "line": 131,
                  "column": 1
                },
                "end": {
                  "offset": 6476,
                  "line": 133,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "block",
              "content": [
                {
                  "type": "verbatim",
                  "value": "No uppercase letters in password.\nFour consecutive lowercase letters in password.\nDuplicate letters in password.\n\nA password score of 10 indicates a moderately-strong password.\n"
                }
              ],
              "name": "code",
              "margin": "",
              "text": "=begin code\nNo uppercase letters in password.\nFour consecutive lowercase letters in password.\nDuplicate letters in password.\n\nA password score of 10 indicates a moderately-strong password.\n=end code\n",
              "config": [],
              "location": {
                "start": {
                  "offset": 6477,
                  "line": 134,
                  "column": 1
                },
                "end": {
                  "offset": 6676,
                  "line": 141,
                  "column": 1
                }
              },
              "id": "RfwFRYklRIinZKLUL5Z4X"
            },
            {
              "type": "blankline"
            },
            {
              "text": "That’s all you need to do.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "That’s all you need to do.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 6677,
                  "line": 142,
                  "column": 1
                },
                "end": {
                  "offset": 6704,
                  "line": 143,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://web.archive.org/web/20080410170315/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/aevent5.mspx>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://web.archive.org/web/20080410170315/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/aevent5.mspx"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 6705,
                  "line": 144,
                  "column": 1
                },
                "end": {
                  "offset": 6831,
                  "line": 145,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 6841,
              "line": 147,
              "column": 1
            }
          },
          "id": "Ym48HQPWdD9zM2VMC0RlM"
        },
        {
          "text": "\nsub MAIN(Str :$pw = \"\", Bool :$verbose = False) {\n    my $password = $pw || prompt(\"Enter password to test: \");\n\n    my $input-file = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, \"wordlist.txt\");\n    my %dict = (($input-file.IO.lines.grep: {.chars > 6}) X 1).flat;\n\n    say \"Testing strength of password '$password'\" if $verbose;\n\n    my $score = 13;\n\n    if %dict{$password} :exists {\n        $score--;\n        say \"Password matched dictionary\";\n    }\n\n    if %dict{$password.substr(0, $password.chars -1 )} :exists {\n        $score--;\n        say \"Password minus last char is in dictionary\";\n    }\n\n    if %dict{$password.substr(1,$password.chars-1)} :exists {\n        $score--;\n        say \"Password minus first char is in dictionary\";\n    }\n\n    my $test = $password;\n    $test.subst(/0/, \"o\");\n    if %dict{$test} :exists {\n        $score--;\n        say \"Password replaces 'o' with '0'\";\n    }\n\n    $test = $password;\n    $test.subst(/1/, \"i\");\n    if %dict{$test} :exists {\n        $score--;\n        say \"Password replaces 'i' with '1'\";\n    }\n\n    if $password.chars == none(10..20) {\n        $score--;\n        say \"Password is too short (less than 10) or too long (more than 20)\"\n    }\n\n    unless $password ~~ rx/<[A..Z]>/ {\n        $score--;\n        say \"No uppercase letters in password.\";\n    }\n\n    if $password ~~ rx/<[a..z]> ** 4..*/ {\n        $score--;\n        say \"Four consecutive lowercase letters in password.\";\n    }\n\n    my @chars = $password.split('');\n    my %letter-frequency;\n    for @chars -> $char {\n        if $char ~~ rx/<[a..zA..Z]>/ {\n            %letter-frequency{$char} =\n                %letter-frequency{$char}:exists ?? ++%letter-frequency{$char} !! 1;\n        }\n    }\n    if %letter-frequency.values.any > 1 {\n        $score--;\n        say \"Duplicate letters in password.\";\n    }\n\n    say \"'$password' scored $score\" if $verbose;\n\n    say \"\";\n    given $score {\n        when $_ <= 6 {\n            say \"A password score of $score indicates a weak password.\";\n        }\n        when 7 < $_ <= 10 {\n            say \"A password score of $score indicates a moderately-strong password.\";\n        }\n        when $_ >= 11 {\n            say \"A password score of $score indicates a strong password.\";\n        }\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 6841,
              "line": 147,
              "column": 1
            },
            "end": {
              "offset": 9125,
              "line": 232,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Blackjack!\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/wsg/advanced-2008/event010-dwhipp.p6",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Qix8DjlHf6OWeWgxYOWL8",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Blackjack!\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Blackjack!\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 39,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 39,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "Gz2DwxYLJDDuBh77Fkvmf"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Whipp\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Whipp\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 40,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 60,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 40,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 60,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "VOinnBJPw3NRxOKza6Vms"
            },
            {
              "type": "blankline"
            },
            {
              "text": "In Blackjack! competitors must write a script that deals and plays a single\nhand of Blackjack (Twenty-One).\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In Blackjack! competitors must write a script that deals and plays a single\nhand of Blackjack (Twenty-One).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 61,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 169,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Event Scenario\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Event Scenario\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 170,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 185,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For the final event in the Advanced Division you must write a script that\ncan deal – and play – a single hand of Blackjack (also known as Twenty-One).\nFor the purposes of this event, we’ll be playing a simplified version of\nBlackjack, one that features the following rules:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For the final event in the Advanced Division you must write a script that\ncan deal – and play – a single hand of Blackjack (also known as Twenty-One).\nFor the purposes of this event, we’ll be playing a simplified version of\nBlackjack, one that features the following rules:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 186,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 460,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "No betting is involved. (Sorry; maybe next year.)\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "No betting is involved. (Sorry; maybe next year.)\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 461,
                          "line": 19,
                          "column": 1
                        },
                        "end": {
                          "offset": 517,
                          "line": 20,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 461,
                      "line": 19,
                      "column": 1
                    },
                    "end": {
                      "offset": 517,
                      "line": 20,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "ubislr09fPdEzK3e6_eHR"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "All aces are worth 11 points. And yes, we know: in standard Blackjack,\n      aces can be worth either 1 point or 11 points. For Event 10, however, aces\n      will only be worth 11 points. (We don’t want to make this event too\n      complicated.)\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "All aces are worth 11 points. And yes, we know: in standard Blackjack,\n      aces can be worth either 1 point or 11 points. For Event 10, however, aces\n      will only be worth 11 points. (We don’t want to make this event too\n      complicated.)\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 518,
                          "line": 21,
                          "column": 1
                        },
                        "end": {
                          "offset": 770,
                          "line": 25,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 518,
                      "line": 21,
                      "column": 1
                    },
                    "end": {
                      "offset": 770,
                      "line": 25,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "Ca4b21M4ojsmJ66TYzgUf"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "Oh, OK: if you want to you can make aces worth 1 or 11. But you don’t have\nto do this unless you want to.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Oh, OK: if you want to you can make aces worth 1 or 11. But you don’t have\nto do this unless you want to.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 771,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 877,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "All face cards (Kings, Queens, Jacks) are worth 10 points.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "All face cards (Kings, Queens, Jacks) are worth 10 points.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 878,
                          "line": 29,
                          "column": 1
                        },
                        "end": {
                          "offset": 943,
                          "line": 30,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 878,
                      "line": 29,
                      "column": 1
                    },
                    "end": {
                      "offset": 943,
                      "line": 30,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "r_uaY7yONunOCKBvJitJj"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "All other cards are equal to their face value: the three of spades is\n      worth 3 points, the 7 of diamonds is worth 7 points, etc.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "All other cards are equal to their face value: the three of spades is\n      worth 3 points, the 7 of diamonds is worth 7 points, etc.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 944,
                          "line": 31,
                          "column": 1
                        },
                        "end": {
                          "offset": 1084,
                          "line": 33,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 944,
                      "line": 31,
                      "column": 1
                    },
                    "end": {
                      "offset": 1084,
                      "line": 33,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "RZAO014EttB4FlQRN1Kr6"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Ties (pushes) go the dealer. Suppose, at the end of the hand, the player\n      has 18 points and the dealer has 18 points. In that case, the dealer is\n      declared the winner.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Ties (pushes) go the dealer. Suppose, at the end of the hand, the player\n      has 18 points and the dealer has 18 points. In that case, the dealer is\n      declared the winner.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1085,
                          "line": 34,
                          "column": 1
                        },
                        "end": {
                          "offset": 1269,
                          "line": 37,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1085,
                      "line": 34,
                      "column": 1
                    },
                    "end": {
                      "offset": 1269,
                      "line": 37,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "kAULNV1oaFQ49QGrDYDIv"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "Your script should start by “shuffling” a standard deck of playing cards and\nthen dealing two cards to the player and two more to the dealer. (Not sure\nwhat cards make up a ‘standard deck of playing cards?” Then click here for\nmore information.) As in regular blackjack, the two cards to the player\nshould be dealt “face up;” that is, both cards should be revealed:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Your script should start by “shuffling” a standard deck of playing cards and\nthen dealing two cards to the player and two more to the dealer. (Not sure\nwhat cards make up a ‘standard deck of playing cards?” Then click here for\nmore information.) As in regular blackjack, the two cards to the player\nshould be dealt “face up;” that is, both cards should be revealed:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1270,
                  "line": 38,
                  "column": 1
                },
                "end": {
                  "offset": 1636,
                  "line": 43,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Your cards:\nSeven of Spades\nEight of Spades\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Your cards:\n    Seven of Spades\n    Eight of Spades\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1637,
                  "line": 44,
                  "column": 1
                },
                "end": {
                  "offset": 1693,
                  "line": 47,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "By contrast, only one of the dealer’s cards should be revealed:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "By contrast, only one of the dealer’s cards should be revealed:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1694,
                  "line": 48,
                  "column": 1
                },
                "end": {
                  "offset": 1758,
                  "line": 49,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Dealer's cards:\nAce of Hearts\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Dealer's cards:\n    Ace of Hearts\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1759,
                  "line": 50,
                  "column": 1
                },
                "end": {
                  "offset": 1797,
                  "line": 52,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Note. Notice that we specified the cards by name. Don’t just list card\nvalues, like this:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Note. Notice that we specified the cards by name. Don’t just list card\nvalues, like this:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1798,
                  "line": 53,
                  "column": 1
                },
                "end": {
                  "offset": 1888,
                  "line": 55,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "7\n8\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "7\n    8\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1889,
                  "line": 56,
                  "column": 1
                },
                "end": {
                  "offset": 1901,
                  "line": 58,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "That will cause your script to fail. Be specific when it comes to listing cards.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "That will cause your script to fail. Be specific when it comes to listing cards.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1902,
                  "line": 59,
                  "column": 1
                },
                "end": {
                  "offset": 1983,
                  "line": 60,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Again, following standard Blackjack rules, the player should be given the\noption to stay (play the two cards he or she was dealt) or hit (be dealt\nanother card). In other words:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Again, following standard Blackjack rules, the player should be given the\noption to stay (play the two cards he or she was dealt) or hit (be dealt\nanother card). In other words:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1984,
                  "line": 61,
                  "column": 1
                },
                "end": {
                  "offset": 2162,
                  "line": 64,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Stay (s) or hit (h) ?\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Stay (s) or hit (h) ?\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2163,
                  "line": 65,
                  "column": 1
                },
                "end": {
                  "offset": 2189,
                  "line": 66,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If the player chooses “hit,” then he or she should be dealt another card. If\nthe sum total of the three cards is more than 21, then the player\nautomatically loses:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If the player chooses “hit,” then he or she should be dealt another card. If\nthe sum total of the three cards is more than 21, then the player\nautomatically loses:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2190,
                  "line": 67,
                  "column": 1
                },
                "end": {
                  "offset": 2354,
                  "line": 70,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Stay (s) or hit (h) ?h\nSeven of Spades\nEight of Spades\nSeven of Diamonds\nOver 21. Sorry, you lose.\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Stay (s) or hit (h) ?h\n    Seven of Spades\n    Eight of Spades\n    Seven of Diamonds\n    Over 21. Sorry, you lose.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2355,
                  "line": 71,
                  "column": 1
                },
                "end": {
                  "offset": 2474,
                  "line": 76,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If the sum total is 20 or less, then the player is given another opportunity\nto hit or stay. (If the sum total is 21 the player wins.) As soon as the\nplayer chooses to stay, the dealer (the computer) checks to see if its point\ntotal exceeds that of the player. For example, suppose the player has the\nseven of spades and the eight of spades; that means that the player has 15\npoints. Now suppose that the dealer has the ace of hearts and the six of\ndiamonds. That means that the dealer has 17 points (11 + 6), which also\nmeans that the dealer automatically wins.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If the sum total is 20 or less, then the player is given another opportunity\nto hit or stay. (If the sum total is 21 the player wins.) As soon as the\nplayer chooses to stay, the dealer (the computer) checks to see if its point\ntotal exceeds that of the player. For example, suppose the player has the\nseven of spades and the eight of spades; that means that the player has 15\npoints. Now suppose that the dealer has the ace of hearts and the six of\ndiamonds. That means that the dealer has 17 points (11 + 6), which also\nmeans that the dealer automatically wins.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2475,
                  "line": 77,
                  "column": 1
                },
                "end": {
                  "offset": 3038,
                  "line": 85,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Now, suppose the player has 16 points and the dealer has 13. In that case,\nthe dealer must be dealt another card. Let’s examine some possibilities for\nthat next card:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Now, suppose the player has 16 points and the dealer has 13. In that case,\nthe dealer must be dealt another card. Let’s examine some possibilities for\nthat next card:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 3039,
                  "line": 86,
                  "column": 1
                },
                "end": {
                  "offset": 3206,
                  "line": 89,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "The dealer is dealt a two, giving the dealer 15 points. That’s less than\n      the player’s 16, so the dealer must go again.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "The dealer is dealt a two, giving the dealer 15 points. That’s less than\n      the player’s 16, so the dealer must go again.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 3207,
                          "line": 90,
                          "column": 1
                        },
                        "end": {
                          "offset": 3338,
                          "line": 92,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 3207,
                      "line": 90,
                      "column": 1
                    },
                    "end": {
                      "offset": 3338,
                      "line": 92,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "tdaCFy9JbyEj4hvYe88ja"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "The dealer is dealt a nine, giving it 22 points. 22 is more than 21, so\n      the dealer loses.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "The dealer is dealt a nine, giving it 22 points. 22 is more than 21, so\n      the dealer loses.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 3339,
                          "line": 93,
                          "column": 1
                        },
                        "end": {
                          "offset": 3441,
                          "line": 95,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 3339,
                      "line": 93,
                      "column": 1
                    },
                    "end": {
                      "offset": 3441,
                      "line": 95,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "NjNIZ7b4GY4JhUXeZfXne"
                },
                {
                  "type": "blankline"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "The dealer is dealt a three, giving both the dealer and the player 16.\n      Because ties go to the dealer, the dealer automatically wins.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "The dealer is dealt a three, giving both the dealer and the player 16.\n      Because ties go to the dealer, the dealer automatically wins.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 3442,
                          "line": 96,
                          "column": 1
                        },
                        "end": {
                          "offset": 3587,
                          "line": 98,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 3442,
                      "line": 96,
                      "column": 1
                    },
                    "end": {
                      "offset": 3587,
                      "line": 98,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "YvNUIfIekiLFk0FgLPW-A"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "A complete hand might play out something like this:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A complete hand might play out something like this:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 3588,
                  "line": 99,
                  "column": 1
                },
                "end": {
                  "offset": 3640,
                  "line": 100,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "block",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Your cards:\nKing of Hearts\nSeven of Hearts\n\nDealer's cards:\nNine of Hearts\n\nStay (s) or hit (h)?s\n\nYou have 17.\n\nDealer's cards:\nNine of Hearts\nSeven of Diamonds\n\nDealers' cards:\n\nNine of Hearts\nSeven of Diamonds\nFive of Diamonds\nThe dealer has 21. Sorry, you lose.\n"
                }
              ],
              "name": "code",
              "margin": "",
              "text": "=begin code\nYour cards:\nKing of Hearts\nSeven of Hearts\n\nDealer's cards:\nNine of Hearts\n\nStay (s) or hit (h)?s\n\nYou have 17.\n\nDealer's cards:\nNine of Hearts\nSeven of Diamonds\n\nDealers' cards:\n\nNine of Hearts\nSeven of Diamonds\nFive of Diamonds\nThe dealer has 21. Sorry, you lose.\n=end code\n",
              "config": [],
              "location": {
                "start": {
                  "offset": 3641,
                  "line": 101,
                  "column": 1
                },
                "end": {
                  "offset": 3929,
                  "line": 124,
                  "column": 1
                }
              },
              "id": "pFwhEvMqR6WgZ6UhKl22i"
            },
            {
              "type": "blankline"
            },
            {
              "text": "See? That shouldn't be too terribly hard, especially not for anyone who made\nit through the first nine events.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "See? That shouldn't be too terribly hard, especially not for anyone who made\nit through the first nine events.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 3930,
                  "line": 125,
                  "column": 1
                },
                "end": {
                  "offset": 4041,
                  "line": 127,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://web.archive.org/web/20080406020248/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/aevent10.mspx>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://web.archive.org/web/20080406020248/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/aevent10.mspx"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 4042,
                  "line": 128,
                  "column": 1
                },
                "end": {
                  "offset": 4169,
                  "line": 129,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 4179,
              "line": 131,
              "column": 1
            }
          },
          "id": "kiMRrEjl3K1hzfCbvyhuS"
        },
        {
          "text": "\nsub MAIN(Bool :$computer-player = False) {\n    my $player_is_human = not $computer-player;\n\n    my @values = (\n        ace => 1|11,\n        two => 2,\n        three => 3,\n        four => 4,\n        five => 5,\n        six => 6,\n        seven => 7,\n        eight => 8,\n        nine => 9,\n        ten => 10,\n        jack => 10,\n        queen => 10,\n        king => 10,\n    );\n\n    my @suites = < spades clubs diamonds hearts >;\n\n    my @deck = ( @values X @suites ).flat.map: {\n        my ($name, $value) = $^a.kv;\n        $name ~= \" of $^b\";\n        $name => $value\n    };\n\n    my @cards = $computer-player ?? default-cards() !! @deck.pick( @deck.elems );\n\n    my @dealer;\n    my @player;\n\n    @dealer.push( @cards.shift );\n    @player.push( @cards.shift );\n    @dealer.push( @cards.shift );\n\n    say \"DEALER:\";\n    say @dealer[0].key;\n    say \"\";\n\n    say \"PLAYER:\";\n    .key.say for @player;\n\n    my $player_value = [+] @player.map: { .value };\n\n    loop {\n        my $card = @cards.shift;\n\n        @player.push( $card );\n        say $card.key;\n\n        $player_value += $card.value;\n\n        say \"current value is { $player_value.perl }\";\n\n        if $player_value == 21 {\n            say \"congratulations, you win!\";\n            exit 0;\n        }\n        elsif $player_value < 21 {\n            say \"hit (h) or stay (s)\";\n            my $choice;\n            if ($player_is_human) {\n                loop {\n                    $choice = lc $*IN.get;\n                    last if $choice eq \"h\" | \"s\";\n                    say \"invalid entry: 'h' or 's'\";\n                }\n            }\n            else {\n                $choice = $player_value < 16 ?? \"hit\" !! \"stay\";\n            }\n            say $choice;\n            last if $choice ~~ /s/;\n        }\n        else {\n            say \"sorry, you bust!\";\n            exit 0;\n        }\n    }\n\n    say \"\";\n\n    $player_value = max (4 .. 21).grep: { $_ == $player_value };\n\n    say \"DEALER:\";\n    .key.say for @dealer;\n\n    my $dealer_value = [+] @dealer.map: { .value };\n\n    loop {\n        say \"dealer value: {$dealer_value.perl}\";\n\n        if $dealer_value == any( $player_value ^.. 21) {\n            say \"you lose!\";\n            exit 0;\n        }\n        elsif $dealer_value < 21 {\n            my $card = @cards.shift;\n            @dealer.push( $card );\n            say $card.key;\n            $dealer_value += $card.value;\n        }\n        else {\n            say \"dealer bust: you win!\";\n            exit 0;\n        }\n    }\n}\n\nsub default-cards {\n    return [\n    \"three of diamonds\" => 3,\n    \"five of diamonds\" => 5,\n    \"seven of diamonds\" => 7,\n    \"ten of diamonds\" => 10,\n    \"two of diamonds\" => 2,\n    \"jack of spades\" => 10,\n    \"five of clubs\" => 5,\n    \"five of hearts\" => 5,\n    \"eight of diamonds\" => 8,\n    \"six of spades\" => 6,\n    \"five of spades\" => 5,\n    \"king of hearts\" => 10,\n    \"nine of diamonds\" => 9,\n    \"two of hearts\" => 2,\n    \"king of clubs\" => 10,\n    \"eight of clubs\" => 8,\n    \"two of spades\" => 2,\n    \"ace of hearts\" => any(1, 11),\n    \"nine of hearts\" => 9,\n    \"eight of spades\" => 8,\n    \"jack of diamonds\" => 10,\n    \"jack of hearts\" => 10,\n    \"nine of clubs\" => 9,\n    \"ten of hearts\" => 10,\n    \"eight of hearts\" => 8,\n    \"king of spades\" => 10,\n    \"ace of spades\" => any(1, 11),\n    \"queen of hearts\" => 10,\n    \"nine of spades\" => 9,\n    \"two of clubs\" => 2,\n    \"queen of diamonds\" => 10,\n    \"three of spades\" => 3,\n    \"queen of clubs\" => 10,\n    \"three of clubs\" => 3,\n    \"ten of spades\" => 10,\n    \"ace of clubs\" => any(1, 11),\n    \"ace of diamonds\" => any(1, 11),\n    \"four of hearts\" => 4,\n    \"six of clubs\" => 6,\n    \"ten of clubs\" => 10,\n    \"seven of hearts\" => 7,\n    \"king of diamonds\" => 10,\n    \"four of diamonds\" => 4,\n    \"seven of spades\" => 7,\n    \"queen of spades\" => 10,\n    \"four of spades\" => 4,\n    \"six of hearts\" => 6,\n    \"four of clubs\" => 4,\n    \"seven of clubs\" => 7,\n    \"six of diamonds\" => 6,\n    \"three of hearts\" => 3,\n    \"jack of clubs\" => 10]<>;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 4179,
              "line": 131,
              "column": 1
            },
            "end": {
              "offset": 8204,
              "line": 299,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "One of These Things is not Like the Others\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/wsg/beginner-2007/event003-eric256.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "TEEQEIdPf9JLgxdCBizaV",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "One of These Things is not Like the Others\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "One of These Things is not Like the Others\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 71,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 71,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "V2MJ-eKh58f0yfWVGBJVg"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Eric Hodges\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Eric Hodges\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 72,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 92,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 72,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 92,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "B859ZeoCq3GWJKjjwvXxm"
            },
            {
              "type": "blankline"
            },
            {
              "text": "This event is a matching game. We'll provide you with some arrays, and you\nhave to write a script that reports which element in each array is different\nfrom the others.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "This event is a matching game. We'll provide you with some arrays, and you\nhave to write a script that reports which element in each array is different\nfrom the others.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 93,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 262,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Event Scenario\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Event Scenario\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 263,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 278,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If you have an apple, an orange, and a carrot, which one doesn't belong?\nWe'd have to say the carrot, because the apple and the orange are fruits,\nwhereas the carrot is a vegetable. In this event you'll take groups of three\nelements and determine which element is different from the others. You'll\nstart with five arrays, with three elements in each array:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If you have an apple, an orange, and a carrot, which one doesn't belong?\nWe'd have to say the carrot, because the apple and the orange are fruits,\nwhereas the carrot is a vegetable. In this event you'll take groups of three\nelements and determine which element is different from the others. You'll\nstart with five arrays, with three elements in each array:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 279,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 636,
                  "line": 20,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "$a1 = (\"monday\", \"MONDAY\", \"monday\");\n$a2 = (\"TUESDAY\", \"tuesday\", \"tuesday\");\n$a3 = (\"WEDNESDAY\", \"wednesday\", \"wednesday\");\n$a4 = (\"thursday\", \"thursday\", \"THURSDAY\");\n$a5 = (\"friday\", \"FRIDAY\", \"friday\");\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "$a1 = (\"monday\", \"MONDAY\", \"monday\");\n    $a2 = (\"TUESDAY\", \"tuesday\", \"tuesday\");\n    $a3 = (\"WEDNESDAY\", \"wednesday\", \"wednesday\");\n    $a4 = (\"thursday\", \"thursday\", \"THURSDAY\");\n    $a5 = (\"friday\", \"FRIDAY\", \"friday\");\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 637,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 865,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "To receive the 5 points for this event you must write a script that reports\nwhich of the three elements in each array is different from the other two.\nFor example, the second element in array 1 is different, so your output\nwould look something like this:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "To receive the 5 points for this event you must write a script that reports\nwhich of the three elements in each array is different from the other two.\nFor example, the second element in array 1 is different, so your output\nwould look something like this:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 866,
                  "line": 27,
                  "column": 1
                },
                "end": {
                  "offset": 1121,
                  "line": 31,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "a1: second\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "a1: second\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1122,
                  "line": 32,
                  "column": 1
                },
                "end": {
                  "offset": 1133,
                  "line": 33,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://web.archive.org/web/20070228055412/http://www.microsoft.com/technet/scriptcenter/funzone/games/games07/bevent3.mspx>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://web.archive.org/web/20070228055412/http://www.microsoft.com/technet/scriptcenter/funzone/games/games07/bevent3.mspx"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1134,
                  "line": 34,
                  "column": 1
                },
                "end": {
                  "offset": 1260,
                  "line": 35,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1270,
              "line": 37,
              "column": 1
            }
          },
          "id": "moWRiOO9-bidTdKnVLZWW"
        },
        {
          "text": "\nsub find_unique (@x) {\n    my %test;\n    %test{$_}++ for @x;\n    return %test.pairs.first( { .value == 1 });\n};\n\nmy @a1 = (\"monday\", \"MONDAY\", \"monday\");\nmy @a2 = (\"TUESDAY\", \"tuesday\", \"tuesday\");\nmy @a3 = (\"WEDNESDAY\", \"wednesday\", \"wednesday\");\nmy @a4 = (\"thursday\", \"thursday\", \"THURSDAY\");\nmy @a5 = (\"friday\", \"FRIDAY\", \"friday\");\n\n\nfind_unique(@a1).key.say;\nfind_unique(@a2).key.say;\nfind_unique(@a3).key.say;\nfind_unique(@a4).key.say;\nfind_unique(@a5).key.say;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1270,
              "line": 37,
              "column": 1
            },
            "end": {
              "offset": 1779,
              "line": 58,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Pairing Off\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/wsg/beginner-2008/event001-eric256.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "YJQEwtle_2I6ypjZ_hjIi",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Pairing Off\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Pairing Off\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 40,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 40,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "5C7MFIavxX3wwoDl-o7Bt"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Eric Hodges\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Eric Hodges\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 41,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 61,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 41,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 61,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "OhV9Z44k_ChdSM86NP-1C"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://web.archive.org/web/20080324231941/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent1.mspx>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://web.archive.org/web/20080324231941/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent1.mspx"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 62,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 188,
                  "line": 10,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Event Scenario\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Event Scenario\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 189,
                  "line": 11,
                  "column": 1
                },
                "end": {
                  "offset": 204,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "This is one of the less-complicated events, both to explain and to perform.\nIn this event we'll be working with a standard deck of playing cards. A\nstandard deck consists of four suits: Hearts, Spades, Clubs, and Diamonds.\nWithin each suit are the numbers two through ten, plus a Jack, a Queen, a\nKing, and an Ace.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "This is one of the less-complicated events, both to explain and to perform.\nIn this event we'll be working with a standard deck of playing cards. A\nstandard deck consists of four suits: Hearts, Spades, Clubs, and Diamonds.\nWithin each suit are the numbers two through ten, plus a Jack, a Queen, a\nKing, and an Ace.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 205,
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "offset": 520,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Given a random set of five cards, your task is to find out how many pairs\nare in that set. In other words, if your five cards are the 2 of hearts, the\n4 of spades, the 4 of clubs, the queen of diamonds and the queen of spades,\nyou have 2 pairs: 2 fours and 2 queens. As another example, you might have a\n3 of clubs, a 3 of diamonds, a 3 of hearts, a 10 of spades and an ace of\nhearts. In that case you have 3 pairs: 3 of clubs and 3 of diamonds; 3 of\ndiamonds and 3 of hearts; and 3 of clubs and 3 of hearts.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Given a random set of five cards, your task is to find out how many pairs\nare in that set. In other words, if your five cards are the 2 of hearts, the\n4 of spades, the 4 of clubs, the queen of diamonds and the queen of spades,\nyou have 2 pairs: 2 fours and 2 queens. As another example, you might have a\n3 of clubs, a 3 of diamonds, a 3 of hearts, a 10 of spades and an ace of\nhearts. In that case you have 3 pairs: 3 of clubs and 3 of diamonds; 3 of\ndiamonds and 3 of hearts; and 3 of clubs and 3 of hearts.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 521,
                  "line": 19,
                  "column": 1
                },
                "end": {
                  "offset": 1030,
                  "line": 26,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For this event you should assume you've been dealt the following five cards:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For this event you should assume you've been dealt the following five cards:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1031,
                  "line": 27,
                  "column": 1
                },
                "end": {
                  "offset": 1108,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Seven of spades\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Seven of spades\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1109,
                          "line": 29,
                          "column": 1
                        },
                        "end": {
                          "offset": 1131,
                          "line": 30,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1109,
                      "line": 29,
                      "column": 1
                    },
                    "end": {
                      "offset": 1131,
                      "line": 30,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "HgYpmUAcpsdRkvcBJEkNu"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Five of hearts\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Five of hearts\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1131,
                          "line": 30,
                          "column": 1
                        },
                        "end": {
                          "offset": 1152,
                          "line": 31,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1131,
                      "line": 30,
                      "column": 1
                    },
                    "end": {
                      "offset": 1152,
                      "line": 31,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "GypqBCU09kdY1M0Ul-hIF"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Seven of diamonds\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Seven of diamonds\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1152,
                          "line": 31,
                          "column": 1
                        },
                        "end": {
                          "offset": 1176,
                          "line": 32,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1152,
                      "line": 31,
                      "column": 1
                    },
                    "end": {
                      "offset": 1176,
                      "line": 32,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "QRWTHOtzdphLoFxWeWkdk"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Seven of clubs\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Seven of clubs\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1176,
                          "line": 32,
                          "column": 1
                        },
                        "end": {
                          "offset": 1197,
                          "line": 33,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1176,
                      "line": 32,
                      "column": 1
                    },
                    "end": {
                      "offset": 1197,
                      "line": 33,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "joMz8GK3nbR78jHcoQOHZ"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "King of clubs\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "King of clubs\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1197,
                          "line": 33,
                          "column": 1
                        },
                        "end": {
                          "offset": 1217,
                          "line": 34,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1197,
                      "line": 33,
                      "column": 1
                    },
                    "end": {
                      "offset": 1217,
                      "line": 34,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "yHayDOu2NJuDoNJQLeUIo"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "Using this set of cards, your script should display the number of pairs.\nKeep in mind that we will look at the scripts as we test them. A script that\nsimply displays the number 3 will receive a score of 0; you actually have to\ndo the calculations based on these cards. Not only that, but it shouldn't\nmatter what the cards are: if we substitute any other set of five cards your\nscript should still return the correct number of pairs.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Using this set of cards, your script should display the number of pairs.\nKeep in mind that we will look at the scripts as we test them. A script that\nsimply displays the number 3 will receive a score of 0; you actually have to\ndo the calculations based on these cards. Not only that, but it shouldn't\nmatter what the cards are: if we substitute any other set of five cards your\nscript should still return the correct number of pairs.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1218,
                  "line": 35,
                  "column": 1
                },
                "end": {
                  "offset": 1652,
                  "line": 41,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1662,
              "line": 43,
              "column": 1
            }
          },
          "id": "xSbrQeWH8fvqFy1yjrvFM"
        },
        {
          "text": "\nmy @cards = qw{6 5 6 6 K};\nmy $p = 0;\nfor @cards.kv -> $k, $v {\n    $p += @cards[$k+1 .. *].grep: {$_ eq $v}\n}\nsay \"Total: $p\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1662,
              "line": 43,
              "column": 1
            },
            "end": {
              "offset": 1831,
              "line": 52,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Pairing off\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/wsg/beginner-2008/event001-j1n3l0.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "IzlVfVsDIvlj4XpJNbA2O",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Pairing off\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Pairing off\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 40,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 40,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "r4cSXjWDb86f1ErUM3_KR"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Nelo Onyiah\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Nelo Onyiah\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 41,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 61,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 41,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 61,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "Q6rc7sBczkfMEMxw0ooqd"
            },
            {
              "type": "blankline"
            },
            {
              "text": "In Pairing Off, competitors will be given a series of five playing cards and\nasked to determine the number of pairs.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In Pairing Off, competitors will be given a series of five playing cards and\nasked to determine the number of pairs.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 62,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 179,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Event Scenario\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Event Scenario\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 180,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 195,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "This is one of the less-complicated events, both to explain and to perform.\nIn this event we'll be working with a standard deck of playing cards. A\nstandard deck consists of four suits: Hearts, Spades, Clubs, and Diamonds.\nWithin each suit are the numbers two through ten, plus a Jack, a Queen, a\nKing, and an Ace.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "This is one of the less-complicated events, both to explain and to perform.\nIn this event we'll be working with a standard deck of playing cards. A\nstandard deck consists of four suits: Hearts, Spades, Clubs, and Diamonds.\nWithin each suit are the numbers two through ten, plus a Jack, a Queen, a\nKing, and an Ace.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 196,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 511,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Given a random set of five cards, your task is to find out how many pairs\nare in that set. In other words, if your five cards are the 2 of hearts, the\n4 of spades, the 4 of clubs, the queen of diamonds and the queen of spades,\nyou have 2 pairs: 2 fours and 2 queens. As another example, you might have a\n3 of clubs, a 3 of diamonds, a 3 of hearts, a 10 of spades and an ace of\nhearts. In that case you have 3 pairs: 3 of clubs and 3 of diamonds; 3 of\ndiamonds and 3 of hearts; and 3 of clubs and 3 of hearts.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Given a random set of five cards, your task is to find out how many pairs\nare in that set. In other words, if your five cards are the 2 of hearts, the\n4 of spades, the 4 of clubs, the queen of diamonds and the queen of spades,\nyou have 2 pairs: 2 fours and 2 queens. As another example, you might have a\n3 of clubs, a 3 of diamonds, a 3 of hearts, a 10 of spades and an ace of\nhearts. In that case you have 3 pairs: 3 of clubs and 3 of diamonds; 3 of\ndiamonds and 3 of hearts; and 3 of clubs and 3 of hearts.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 512,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 1021,
                  "line": 27,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For this event you should assume you've been dealt the following five cards:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For this event you should assume you've been dealt the following five cards:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1022,
                  "line": 28,
                  "column": 1
                },
                "end": {
                  "offset": 1099,
                  "line": 29,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Seven of spades\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Seven of spades\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1100,
                          "line": 30,
                          "column": 1
                        },
                        "end": {
                          "offset": 1122,
                          "line": 31,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1100,
                      "line": 30,
                      "column": 1
                    },
                    "end": {
                      "offset": 1122,
                      "line": 31,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "mTxTQzHk4t11uAhLegOqs"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Five of hearts\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Five of hearts\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1122,
                          "line": 31,
                          "column": 1
                        },
                        "end": {
                          "offset": 1143,
                          "line": 32,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1122,
                      "line": 31,
                      "column": 1
                    },
                    "end": {
                      "offset": 1143,
                      "line": 32,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "_LdqSylJ2CG3RzkZjL-A1"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Seven of diamonds\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Seven of diamonds\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1143,
                          "line": 32,
                          "column": 1
                        },
                        "end": {
                          "offset": 1167,
                          "line": 33,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1143,
                      "line": 32,
                      "column": 1
                    },
                    "end": {
                      "offset": 1167,
                      "line": 33,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "_79KnHPGaFjLxIYp00XtH"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Seven of clubs\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Seven of clubs\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1167,
                          "line": 33,
                          "column": 1
                        },
                        "end": {
                          "offset": 1188,
                          "line": 34,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1167,
                      "line": 33,
                      "column": 1
                    },
                    "end": {
                      "offset": 1188,
                      "line": 34,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "JjNKLehCwJ1tOCJAYp5-M"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "King of clubs\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "King of clubs\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1188,
                          "line": 34,
                          "column": 1
                        },
                        "end": {
                          "offset": 1208,
                          "line": 35,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1188,
                      "line": 34,
                      "column": 1
                    },
                    "end": {
                      "offset": 1208,
                      "line": 35,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "XQPE7xXGmYb8qj9j8X3jR"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "Using this set of cards, your script should display the number of pairs.\nKeep in mind that we will look at the scripts as we test them. A script that\nsimply displays the number 3 will receive a score of 0; you actually have to\ndo the calculations based on these cards. Not only that, but it shouldn't\nmatter what the cards are: if we substitute any other set of five cards your\nscript should still return the correct number of pairs.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Using this set of cards, your script should display the number of pairs.\nKeep in mind that we will look at the scripts as we test them. A script that\nsimply displays the number 3 will receive a score of 0; you actually have to\ndo the calculations based on these cards. Not only that, but it shouldn't\nmatter what the cards are: if we substitute any other set of five cards your\nscript should still return the correct number of pairs.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1209,
                  "line": 36,
                  "column": 1
                },
                "end": {
                  "offset": 1643,
                  "line": 42,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://web.archive.org/web/20080218182214/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent1.mspx>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://web.archive.org/web/20080218182214/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent1.mspx"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1644,
                  "line": 43,
                  "column": 1
                },
                "end": {
                  "offset": 1770,
                  "line": 44,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "USAGE\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "USAGE\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 1771,
                      "line": 45,
                      "column": 1
                    },
                    "end": {
                      "offset": 1784,
                      "line": 46,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 1771,
                  "line": 45,
                  "column": 1
                },
                "end": {
                  "offset": 1784,
                  "line": 46,
                  "column": 1
                }
              },
              "level": "1",
              "id": "USAGE"
            },
            {
              "type": "blankline"
            },
            {
              "text": "$ perl6 event001-j1n3l0.pl <cards>\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "$ perl6 event001-j1n3l0.pl <cards>\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1785,
                  "line": 47,
                  "column": 1
                },
                "end": {
                  "offset": 1824,
                  "line": 48,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "NOTE\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "NOTE\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 1825,
                      "line": 49,
                      "column": 1
                    },
                    "end": {
                      "offset": 1837,
                      "line": 50,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 1825,
                  "line": 49,
                  "column": 1
                },
                "end": {
                  "offset": 1837,
                  "line": 50,
                  "column": 1
                }
              },
              "level": "1",
              "id": "NOTE"
            },
            {
              "type": "blankline"
            },
            {
              "text": "<cards> should be one of 2 .. 10, J, Q, K, A (though I don't check).\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "<cards> should be one of 2 .. 10, J, Q, K, A (though I don't check).\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1838,
                  "line": 51,
                  "column": 1
                },
                "end": {
                  "offset": 1907,
                  "line": 52,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1917,
              "line": 54,
              "column": 1
            }
          },
          "id": "ENcR0XBeknWRyH54QOrhb"
        },
        {
          "text": "\nmy @default-cards = qw{7 5 7 7 K};\nsub MAIN(@cards = @default-cards) {\n    my $pairs = 0;\n    repeat {\n        my $card = @cards.shift;\n        for @cards -> $other_card {\n            $pairs++ if $card eq $other_card;\n        }\n    } until @cards.elems == 0;\n    say 'Total: ' ~ $pairs;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1917,
              "line": 54,
              "column": 1
            },
            "end": {
              "offset": 2247,
              "line": 68,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Pairing Off\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/wsg/beginner-2008/event001-unobe.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "-irvaFhHH3JDxlsVLzltp",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Pairing Off\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Pairing Off\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 40,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 40,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "_QylVTa4UxCzoU5XDqZ16"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Romano\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Romano\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 41,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 62,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 41,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 62,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "lAl4-jDVW3iUrZSORyOkK"
            },
            {
              "type": "blankline"
            },
            {
              "text": "In Pairing Off, competitors will be given a series of five playing cards and\nasked to determine the number of pairs.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In Pairing Off, competitors will be given a series of five playing cards and\nasked to determine the number of pairs.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 63,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 180,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Event Scenario\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Event Scenario\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 181,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 196,
                  "line": 13,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "This is one of the less-complicated events, both to explain and to perform.\nIn this event we'll be working with a standard deck of playing cards. A\nstandard deck consists of four suits: Hearts, Spades, Clubs, and Diamonds.\nWithin each suit are the numbers two through ten, plus a Jack, a Queen, a\nKing, and an Ace.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "This is one of the less-complicated events, both to explain and to perform.\nIn this event we'll be working with a standard deck of playing cards. A\nstandard deck consists of four suits: Hearts, Spades, Clubs, and Diamonds.\nWithin each suit are the numbers two through ten, plus a Jack, a Queen, a\nKing, and an Ace.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 197,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 512,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Given a random set of five cards, your task is to find out how many pairs\nare in that set. In other words, if your five cards are the 2 of hearts, the\n4 of spades, the 4 of clubs, the queen of diamonds and the queen of spades,\nyou have 2 pairs: 2 fours and 2 queens. As another example, you might have a\n3 of clubs, a 3 of diamonds, a 3 of hearts, a 10 of spades and an ace of\nhearts. In that case you have 3 pairs: 3 of clubs and 3 of diamonds; 3 of\ndiamonds and 3 of hearts; and 3 of clubs and 3 of hearts.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Given a random set of five cards, your task is to find out how many pairs\nare in that set. In other words, if your five cards are the 2 of hearts, the\n4 of spades, the 4 of clubs, the queen of diamonds and the queen of spades,\nyou have 2 pairs: 2 fours and 2 queens. As another example, you might have a\n3 of clubs, a 3 of diamonds, a 3 of hearts, a 10 of spades and an ace of\nhearts. In that case you have 3 pairs: 3 of clubs and 3 of diamonds; 3 of\ndiamonds and 3 of hearts; and 3 of clubs and 3 of hearts.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 513,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 1022,
                  "line": 27,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For this event you should assume you've been dealt the following five cards:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For this event you should assume you've been dealt the following five cards:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1023,
                  "line": 28,
                  "column": 1
                },
                "end": {
                  "offset": 1100,
                  "line": 29,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Seven of spades\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Seven of spades\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1101,
                          "line": 30,
                          "column": 1
                        },
                        "end": {
                          "offset": 1123,
                          "line": 31,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1101,
                      "line": 30,
                      "column": 1
                    },
                    "end": {
                      "offset": 1123,
                      "line": 31,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "R7Y6P8hoI4ZMwcVobbdVK"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Five of hearts\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Five of hearts\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1123,
                          "line": 31,
                          "column": 1
                        },
                        "end": {
                          "offset": 1144,
                          "line": 32,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1123,
                      "line": 31,
                      "column": 1
                    },
                    "end": {
                      "offset": 1144,
                      "line": 32,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "6SbIzUgu9dS041vk2GR3a"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Seven of diamonds\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Seven of diamonds\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1144,
                          "line": 32,
                          "column": 1
                        },
                        "end": {
                          "offset": 1168,
                          "line": 33,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1144,
                      "line": 32,
                      "column": 1
                    },
                    "end": {
                      "offset": 1168,
                      "line": 33,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "pyTT-ZIAMHtlCLC57uUZJ"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "Seven of clubs\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "Seven of clubs\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1168,
                          "line": 33,
                          "column": 1
                        },
                        "end": {
                          "offset": 1189,
                          "line": 34,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1168,
                      "line": 33,
                      "column": 1
                    },
                    "end": {
                      "offset": 1189,
                      "line": 34,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "DYBFLVJNgCHufLuF8pYm3"
                },
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "King of clubs\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "King of clubs\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 1189,
                          "line": 34,
                          "column": 1
                        },
                        "end": {
                          "offset": 1209,
                          "line": 35,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 1189,
                      "line": 34,
                      "column": 1
                    },
                    "end": {
                      "offset": 1209,
                      "line": 35,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "JQcghqTYqDM5AtH9oU0R0"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "Using this set of cards, your script should display the number of pairs.\nKeep in mind that we will look at the scripts as we test them. A script that\nsimply displays the number 3 will receive a score of 0; you actually have to\ndo the calculations based on these cards. Not only that, but it shouldn't\nmatter what the cards are: if we substitute any other set of five cards your\nscript should still return the correct number of pairs.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Using this set of cards, your script should display the number of pairs.\nKeep in mind that we will look at the scripts as we test them. A script that\nsimply displays the number 3 will receive a score of 0; you actually have to\ndo the calculations based on these cards. Not only that, but it shouldn't\nmatter what the cards are: if we substitute any other set of five cards your\nscript should still return the correct number of pairs.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1210,
                  "line": 36,
                  "column": 1
                },
                "end": {
                  "offset": 1644,
                  "line": 42,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://web.archive.org/web/20080218182214/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent1.mspx>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://web.archive.org/web/20080218182214/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent1.mspx"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1645,
                  "line": 43,
                  "column": 1
                },
                "end": {
                  "offset": 1771,
                  "line": 44,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1781,
              "line": 46,
              "column": 1
            }
          },
          "id": "_ZxwSp43p0Sfv2oVPLacr"
        },
        {
          "text": "\nmy @x = 6,5,6,6,\"K\";\n\nsay 'Total: ' ~ (([+] @x Xeq @x) - @x.elems)/2;\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1781,
              "line": 46,
              "column": 1
            },
            "end": {
              "offset": 1892,
              "line": 52,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Let's Get Together\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/wsg/beginner-2008/event003-unobe.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "gezUrBstk0F-MXs7tAvjP",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Let's Get Together\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Let's Get Together\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 47,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 47,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "AqnuEqObe8cixIaDEyBae"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "David Romano\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "David Romano\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 48,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 69,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 48,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 69,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "D4Q1ZtTPQAWqdBcmIpa-s"
            },
            {
              "type": "blankline"
            },
            {
              "text": "In this event, you need to combine the contents of several text files into\none. There are a number of things you need to do in order to succeed at this\nevent:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In this event, you need to combine the contents of several text files into\none. There are a number of things you need to do in order to succeed at this\nevent:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 70,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 229,
                  "line": 12,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "1.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "1.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 230,
                          "line": 13,
                          "column": 1
                        },
                        "end": {
                          "offset": 239,
                          "line": 14,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 230,
                      "line": 13,
                      "column": 1
                    },
                    "end": {
                      "offset": 239,
                      "line": 14,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "C9tn60-QT41RwbIr7meix"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "Find all the text files (files with a .txt file extension) in the folder\nC:\\Scripts. (Make sure you use C:\\Scripts; if you use any other folder you\nwon’t receive the points for this event.)\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Find all the text files (files with a .txt file extension) in the folder\nC:\\Scripts. (Make sure you use C:\\Scripts; if you use any other folder you\nwon’t receive the points for this event.)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 240,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 430,
                  "line": 18,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "2.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "2.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 431,
                          "line": 19,
                          "column": 1
                        },
                        "end": {
                          "offset": 440,
                          "line": 20,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 431,
                      "line": 19,
                      "column": 1
                    },
                    "end": {
                      "offset": 440,
                      "line": 20,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "XYfEmf236VX3g33b02hIS"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "Create a new file named C:\\Temp\\Newfile.txt. (Once again, the full path and\nname for the file your script creates must match this exactly.)\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Create a new file named C:\\Temp\\Newfile.txt. (Once again, the full path and\nname for the file your script creates must match this exactly.)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 441,
                  "line": 21,
                  "column": 1
                },
                "end": {
                  "offset": 581,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "type": "list",
              "level": 1,
              "content": [
                {
                  "margin": "",
                  "type": "block",
                  "content": [
                    {
                      "type": "para",
                      "text": "3.\n",
                      "margin": "",
                      "content": [
                        {
                          "type": "text",
                          "value": "3.\n"
                        }
                      ],
                      "location": {
                        "start": {
                          "offset": 582,
                          "line": 24,
                          "column": 1
                        },
                        "end": {
                          "offset": 591,
                          "line": 25,
                          "column": 1
                        }
                      }
                    }
                  ],
                  "name": "item",
                  "location": {
                    "start": {
                      "offset": 582,
                      "line": 24,
                      "column": 1
                    },
                    "end": {
                      "offset": 591,
                      "line": 25,
                      "column": 1
                    }
                  },
                  "level": 1,
                  "id": "_voo2PNZ0wv5HGW3XCzQB"
                },
                {
                  "type": "blankline"
                }
              ],
              "list": "itemized"
            },
            {
              "text": "Copy the first line – and only the first line – from each text file in\nC:\\Scripts into your new file.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Copy the first line – and only the first line – from each text file in\nC:\\Scripts into your new file.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 592,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 694,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "That’s it. When your script completes you should have a new file in your\nC:\\Temp folder named Newfile.txt. Newfile.txt should contain the first line\n– followed by a carriage-return linefeed – from each text file in\nC:\\Scripts.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "That’s it. When your script completes you should have a new file in your\nC:\\Temp folder named Newfile.txt. Newfile.txt should contain the first line\n– followed by a carriage-return linefeed – from each text file in\nC:\\Scripts.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 695,
                  "line": 29,
                  "column": 1
                },
                "end": {
                  "offset": 922,
                  "line": 33,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://web.archive.org/web/20081227065437/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent3.mspx>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://web.archive.org/web/20081227065437/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent3.mspx"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 923,
                  "line": 34,
                  "column": 1
                },
                "end": {
                  "offset": 1049,
                  "line": 35,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1059,
              "line": 37,
              "column": 1
            }
          },
          "id": "S0qPD7E8RQkSis9-ti9XD"
        },
        {
          "text": "\nmy $run-dir = $*PROGRAM-NAME.IO.dirname;\nmy @files = dir($run-dir).sort;\nmy $output = $*SPEC.catdir($run-dir, 'newfile.txt');\n$output.IO.unlink if $output.IO.e;\n\n# only select .txt files required for this event\nfor @files.grep: { .match(/test.*\\.txt $$/) } {\n    my $inputfh = open $_, :r;\n    my $outputfh = open $output, :a;\n    $outputfh.say( $($inputfh.get) ); # $(...) forces item context\n    .close for $inputfh, $outputfh;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1059,
              "line": 37,
              "column": 1
            },
            "end": {
              "offset": 1532,
              "line": 52,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Coffee Break\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/wsg/beginner-2008/event006-eric256.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "T6rrt7aBSgG3vICrC3ZtA",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Coffee Break\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Coffee Break\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 41,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 41,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "SP1cqODfU1A7_oU63r4oG"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Eric Hodges\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Eric Hodges\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 62,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 62,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "a53UJfMA9-sIVKysbA8Hv"
            },
            {
              "type": "blankline"
            },
            {
              "text": "It's Monday morning, at least half the people in the building had to work\nthrough the weekend, everyone's a little tired and there's still a ton of\nwork to do. So the kindly group assistant has decided to go get everyone\ncoffee. Each person can choose between a Latte, an Espresso, and a\nCappuccino. The assistant wanders from one office to the next taking orders.\n(There are several people in each office.) He writes down the office number,\nthen the number of Lattes, Espressos, and cappuccinos for each. His list\nlooks like this:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It's Monday morning, at least half the people in the building had to work\nthrough the weekend, everyone's a little tired and there's still a ton of\nwork to do. So the kindly group assistant has decided to go get everyone\ncoffee. Each person can choose between a Latte, an Espresso, and a\nCappuccino. The assistant wanders from one office to the next taking orders.\n(There are several people in each office.) He writes down the office number,\nthen the number of Lattes, Espressos, and cappuccinos for each. His list\nlooks like this:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 63,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 595,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Office 100\nEspresso 3\nLatte 1\nCappuccino 1\nOffice 200\nCappucino 2\nLatte 2\nEspresso 1\nOffice 300\n…\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Office 100\n    Espresso 3\n    Latte 1\n    Cappuccino 1\n    Office 200\n    Cappucino 2\n    Latte 2\n    Espresso 1\n    Office 300\n    …\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 596,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 734,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "And so on. As soon as he's done, however, he realizes he has one problem: he\ndoesn't want to place an order for 3 espressos and 1 espresso and 2\nespressos, etc. He needs to place an order for the total number of each type\nof drink. You'll successfully complete this event if you read from the text\nfile containing the order (Coffee.txt in the Scripting Games 2008\nCompetitor's Pack) and correctly output a tally of the number of each type\nof drink the assistant needs to order, something like this:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "And so on. As soon as he's done, however, he realizes he has one problem: he\ndoesn't want to place an order for 3 espressos and 1 espresso and 2\nespressos, etc. He needs to place an order for the total number of each type\nof drink. You'll successfully complete this event if you read from the text\nfile containing the order (Coffee.txt in the Scripting Games 2008\nCompetitor's Pack) and correctly output a tally of the number of each type\nof drink the assistant needs to order, something like this:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 735,
                  "line": 29,
                  "column": 1
                },
                "end": {
                  "offset": 1234,
                  "line": 36,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Espresso: 15\nLatte: 10\nCappuccino: 14\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Espresso: 15\n    Latte: 10\n    Cappuccino: 14\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1235,
                  "line": 37,
                  "column": 1
                },
                "end": {
                  "offset": 1285,
                  "line": 40,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Make sure that you put the file Coffee.txt in the C:\\Scripts folder. If you\nreference any path other than C:\\Scripts\\Coffee.txt your script will\nprobably fail when we test it.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Make sure that you put the file Coffee.txt in the C:\\Scripts folder. If you\nreference any path other than C:\\Scripts\\Coffee.txt your script will\nprobably fail when we test it.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1286,
                  "line": 41,
                  "column": 1
                },
                "end": {
                  "offset": 1462,
                  "line": 44,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://web.archive.org/web/20081210123558/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent6.mspx>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://web.archive.org/web/20081210123558/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent6.mspx"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1463,
                  "line": 45,
                  "column": 1
                },
                "end": {
                  "offset": 1589,
                  "line": 46,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1599,
              "line": 48,
              "column": 1
            }
          },
          "id": "-Vj8pZhXZnXb7Wi9P_ACg"
        },
        {
          "text": "\nmy $coffee-list = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, 'coffee.txt');\nmy $lines = slurp($coffee-list).chomp;\nmy %order;\nfor $lines.split(/\\n/) {\n    my ($drink, $amount) = $_.split(' ');\n    next if $drink eq 'Office';\n    %order{$drink} += $amount;\n}\n\nfor %order.kv -> $drink, $qty {\n    \"{$drink}: {$qty}\".say;\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1599,
              "line": 48,
              "column": 1
            },
            "end": {
              "offset": 1959,
              "line": 63,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Coffee Break\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/wsg/beginner-2008/event006-j1n3l0.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "9DxvHuxk30GlpX8E95B7N",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Coffee Break\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Coffee Break\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 41,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 41,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "VsO-0gaVsz4jQZYj3f6LY"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Nelo Onyiah\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Nelo Onyiah\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 62,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 62,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "DqY5pE64zaO63oKW-S5pB"
            },
            {
              "type": "blankline"
            },
            {
              "text": "It’s Monday morning, at least half the people in the building had to work\nthrough the weekend, everyone’s a little tired and there’s still a ton of\nwork to do. So the kindly group assistant has decided to go get everyone\ncoffee. Each person can choose between a Latte, an Espresso, and a\nCappuccino. The assistant wanders from one office to the next taking orders.\n(There are several people in each office.) He writes down the office number,\nthen the number of Lattes, Espressos, and cappuccinos for each. His list\nlooks like this:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "It’s Monday morning, at least half the people in the building had to work\nthrough the weekend, everyone’s a little tired and there’s still a ton of\nwork to do. So the kindly group assistant has decided to go get everyone\ncoffee. Each person can choose between a Latte, an Espresso, and a\nCappuccino. The assistant wanders from one office to the next taking orders.\n(There are several people in each office.) He writes down the office number,\nthen the number of Lattes, Espressos, and cappuccinos for each. His list\nlooks like this:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 63,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 595,
                  "line": 17,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Office 100\nEspresso 3\nLatte 1\nCappuccino 1\nOffice 200\nCappucino 2\nLatte 2\nEspresso 1\nOffice 300\n…\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Office 100\n    Espresso 3\n    Latte 1\n    Cappuccino 1\n    Office 200\n    Cappucino 2\n    Latte 2\n    Espresso 1\n    Office 300\n    …\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 596,
                  "line": 18,
                  "column": 1
                },
                "end": {
                  "offset": 734,
                  "line": 28,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "And so on. As soon as he’s done, however, he realizes he has one problem: he\ndoesn’t want to place an order for 3 espressos and 1 espresso and 2\nespressos, etc. He needs to place an order for the total number of each type\nof drink. You’ll successfully complete this event if you read from the text\nfile containing the order (Coffee.txt in the Scripting Games 2008\nCompetitor’s Pack) and correctly output a tally of the number of each type\nof drink the assistant needs to order, something like this:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "And so on. As soon as he’s done, however, he realizes he has one problem: he\ndoesn’t want to place an order for 3 espressos and 1 espresso and 2\nespressos, etc. He needs to place an order for the total number of each type\nof drink. You’ll successfully complete this event if you read from the text\nfile containing the order (Coffee.txt in the Scripting Games 2008\nCompetitor’s Pack) and correctly output a tally of the number of each type\nof drink the assistant needs to order, something like this:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 735,
                  "line": 29,
                  "column": 1
                },
                "end": {
                  "offset": 1234,
                  "line": 36,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Espresso: 15\nLatte: 10\nCappuccino: 14\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "Espresso: 15\n    Latte: 10\n    Cappuccino: 14\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1235,
                  "line": 37,
                  "column": 1
                },
                "end": {
                  "offset": 1285,
                  "line": 40,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Make sure that you put the file Coffee.txt in the C:\\Scripts folder. If you\nreference any path other than C:\\Scripts\\Coffee.txt your script will\nprobably fail when we test it.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Make sure that you put the file Coffee.txt in the C:\\Scripts folder. If you\nreference any path other than C:\\Scripts\\Coffee.txt your script will\nprobably fail when we test it.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1286,
                  "line": 41,
                  "column": 1
                },
                "end": {
                  "offset": 1462,
                  "line": 44,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://web.archive.org/web/20081210123558/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent6.mspx>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://web.archive.org/web/20081210123558/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent6.mspx"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1463,
                  "line": 45,
                  "column": 1
                },
                "end": {
                  "offset": 1589,
                  "line": 46,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1599,
              "line": 48,
              "column": 1
            }
          },
          "id": "n6r1S45xvVfqrTHEoAqCb"
        },
        {
          "text": "\nour %count_for;\n\nsub MAIN(Str $orders = $*SPEC.catdir($*PROGRAM-NAME.IO.dirname, 'coffee.txt')) {\n    # get the data\n    my @contents = $orders.IO.lines;\n\n    # count the orders\n    for @contents -> $line {\n        unless $line ~~ /^ (Office \\s+ \\d+) $/ {\n            my ($drink, $count) = $line.split(/\\s+/);\n            %count_for{$drink} += $count;\n        }\n    }\n\n    # print to screen\n    for %count_for.kv -> $drink, $total {\n        say $drink ~ \": \" ~ $total;\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1599,
              "line": 48,
              "column": 1
            },
            "end": {
              "offset": 2117,
              "line": 70,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Random Guess\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/wsg/beginner-2008/event008-eric256.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "B5Ik374wyEhdoDmr7X9jY",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Random Guess\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Random Guess\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 41,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 41,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "bm8wYrIqjnHAG0GHlPPUW"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Eric Hodges\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Eric Hodges\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 62,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 62,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "CwbQgh2MUbp6nsOqy3ujk"
            },
            {
              "type": "blankline"
            },
            {
              "text": "For this event you’ll be creating a game. Okay, maybe not the most\ninteresting game you’ve even seen (hey, this is the Beginner’s Division\nafter all), but a game nonetheless. In this game, your script will generate\na random number between 1 and 50, and the user will be required to guess\nthat number.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For this event you’ll be creating a game. Okay, maybe not the most\ninteresting game you’ve even seen (hey, this is the Beginner’s Division\nafter all), but a game nonetheless. In this game, your script will generate\na random number between 1 and 50, and the user will be required to guess\nthat number.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 63,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 364,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For Windows PowerShell and Perl this will be a standard command-line script.\nThe script will display a message asking the user to enter a number between\n1 and 50. The script will compare the number supplied by the user to a\nrandomly-generated number. If the numbers don’t match, the script will\ndisplay a message indicating whether the guess was too high or too low and\nask them to guess again.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For Windows PowerShell and Perl this will be a standard command-line script.\nThe script will display a message asking the user to enter a number between\n1 and 50. The script will compare the number supplied by the user to a\nrandomly-generated number. If the numbers don’t match, the script will\ndisplay a message indicating whether the guess was too high or too low and\nask them to guess again.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 365,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 760,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "When the user guesses correctly, the script will display the random number\nand the number of guesses it took to reach the correct number. At that point\nthe game is over, so the script will end.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "When the user guesses correctly, the script will display the random number\nand the number of guesses it took to reach the correct number. At that point\nthe game is over, so the script will end.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 761,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 955,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://web.archive.org/web/20081210124629/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent8.mspx>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://web.archive.org/web/20081210124629/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent8.mspx"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 956,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 1082,
                  "line": 27,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1092,
              "line": 29,
              "column": 1
            }
          },
          "id": "lF-crB3aQSfZisvbosPvo"
        },
        {
          "text": "\nmy $num = (1..50).pick[0];\nmy $guesses = 0;\nmy $guess = 0;\n\n\nloop {\n    $guess = prompt(\"Pick a number between 1 and 50: \");\n    $guesses++;\n    given $guess {\n        when $num {\n            say \"You guessed correctly in {$guesses} guesses!\";\n            last;\n        };\n        when $_ < $num {say \"You guessed too low.\"};\n        when $_ > $num {say \"You guessed too high.\"};\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1092,
              "line": 29,
              "column": 1
            },
            "end": {
              "offset": 1521,
              "line": 49,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Random Guess\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/wsg/beginner-2008/event008-j1n3l0.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "Q44Sg6CeF-npEYL1cbVCn",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Random Guess\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Random Guess\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 41,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 41,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "rjYsCOfmuDnDbGQtpb3QD"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Nelo Onyiah\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Nelo Onyiah\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 42,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 62,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 42,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 62,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "PzY9XGjpKlXHnDeOy8kA3"
            },
            {
              "type": "blankline"
            },
            {
              "text": "For this event you’ll be creating a game. Okay, maybe not the most\ninteresting game you’ve even seen (hey, this is the Beginner’s Division\nafter all), but a game nonetheless. In this game, your script will generate\na random number between 1 and 50, and the user will be required to guess\nthat number.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For this event you’ll be creating a game. Okay, maybe not the most\ninteresting game you’ve even seen (hey, this is the Beginner’s Division\nafter all), but a game nonetheless. In this game, your script will generate\na random number between 1 and 50, and the user will be required to guess\nthat number.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 63,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 364,
                  "line": 14,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "For Windows PowerShell and Perl this will be a standard command-line script.\nThe script will display a message asking the user to enter a number between\n1 and 50. The script will compare the number supplied by the user to a\nrandomly-generated number. If the numbers don’t match, the script will\ndisplay a message indicating whether the guess was too high or too low and\nask them to guess again.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "For Windows PowerShell and Perl this will be a standard command-line script.\nThe script will display a message asking the user to enter a number between\n1 and 50. The script will compare the number supplied by the user to a\nrandomly-generated number. If the numbers don’t match, the script will\ndisplay a message indicating whether the guess was too high or too low and\nask them to guess again.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 365,
                  "line": 15,
                  "column": 1
                },
                "end": {
                  "offset": 760,
                  "line": 21,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "When the user guesses correctly, the script will display the random number\nand the number of guesses it took to reach the correct number. At that point\nthe game is over, so the script will end.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "When the user guesses correctly, the script will display the random number\nand the number of guesses it took to reach the correct number. At that point\nthe game is over, so the script will end.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 761,
                  "line": 22,
                  "column": 1
                },
                "end": {
                  "offset": 955,
                  "line": 25,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://web.archive.org/web/20081210124629/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent8.mspx>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://web.archive.org/web/20081210124629/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent8.mspx"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 956,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 1082,
                  "line": 27,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 1092,
              "line": 29,
              "column": 1
            }
          },
          "id": "UIORDV43isbsgkXlckpf9"
        },
        {
          "text": "\nour $number  = (1..50).pick(1);\nour $guesses = 0;\n\nsub is_valid($guess) {\n    unless $guess ~~ /^ \\d+ $/ && 1 <= $guess <= 50 {\n        warn \"Invalid input ($guess).\";\n        return;\n    }\n    return $guess;\n}\n\nsub MAIN() {\n    loop {\n        my $guess = prompt \"Enter a number between 1 and 50: \";\n\n        next unless is_valid $guess;\n\n        $guesses++;\n\n        if $guess == $number {\n            say \"Got it in $guesses guess(es)!\";\n            last;\n        }\n        elsif $guess  > $number { say 'Too high' }\n        elsif $guess  < $number { say 'Too low'  }\n    }\n}\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 1092,
              "line": 29,
              "column": 1
            },
            "end": {
              "offset": 1711,
              "line": 59,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "title": "Bowling\n",
    "description": "",
    "author": {},
    "footer": "",
    "file": "work_examples/categories/wsg/beginner-2008/event010-eric256.pl",
    "sources": [],
    "node": {
      "type": "block",
      "id": "7-95kaL7GUtJfPPL5O5HR",
      "margin": "",
      "name": "root",
      "content": [
        {
          "text": "use v6;\n\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 9,
              "line": 3,
              "column": 1
            }
          }
        },
        {
          "type": "block",
          "content": [
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Bowling\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Bowling\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 21,
                      "line": 5,
                      "column": 1
                    },
                    "end": {
                      "offset": 36,
                      "line": 6,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "TITLE",
              "location": {
                "start": {
                  "offset": 21,
                  "line": 5,
                  "column": 1
                },
                "end": {
                  "offset": 36,
                  "line": 6,
                  "column": 1
                }
              },
              "id": "-J2pjr9nsNrtZmq8d9BQa"
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Eric Hodges\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Eric Hodges\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 37,
                      "line": 7,
                      "column": 1
                    },
                    "end": {
                      "offset": 57,
                      "line": 8,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "AUTHOR",
              "location": {
                "start": {
                  "offset": 37,
                  "line": 7,
                  "column": 1
                },
                "end": {
                  "offset": 57,
                  "line": 8,
                  "column": 1
                }
              },
              "id": "cGjm6xJzt-x4Swupu-o7a"
            },
            {
              "type": "blankline"
            },
            {
              "text": "In Bowling, competitors will be given the score card for a 10-frame bowling\ngame and asked to calculate the score.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "In Bowling, competitors will be given the score card for a 10-frame bowling\ngame and asked to calculate the score.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 58,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 173,
                  "line": 11,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "The game of bowling involves rolling a ball down an alley and trying to\nknock over 10 pins arranged in a triangular formation. The bowler gets two\nchances to do this. If all 10 pins are knocked down in the first roll,\nthat’s called a “strike.” A strike is represented on the scorecard by an X.\nIf the bowler knocks down some of the pins on the first roll and the\nremainder of the pins on the second roll, that’s called a “spare.” A spare\nis indicated on the scorecard by a /.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "The game of bowling involves rolling a ball down an alley and trying to\nknock over 10 pins arranged in a triangular formation. The bowler gets two\nchances to do this. If all 10 pins are knocked down in the first roll,\nthat’s called a “strike.” A strike is represented on the scorecard by an X.\nIf the bowler knocks down some of the pins on the first roll and the\nremainder of the pins on the second roll, that’s called a “spare.” A spare\nis indicated on the scorecard by a /.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 174,
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "offset": 650,
                  "line": 19,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "If a bowler fails to knock down all the pins with two rolls, he or she\nreceives a score indicating the number of pins knocked down. For example, if\nhe knocks down 4 pins on the first roll and 3 on the second, his score is 7.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "If a bowler fails to knock down all the pins with two rolls, he or she\nreceives a score indicating the number of pins knocked down. For example, if\nhe knocks down 4 pins on the first roll and 3 on the second, his score is 7.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 651,
                  "line": 20,
                  "column": 1
                },
                "end": {
                  "offset": 876,
                  "line": 23,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "A spare is calculated by taking the 10 points for knocking down all the\npins, plus the points from the next roll. For example, if he knocks down 8\npins then 2, that’s a spare. In the next frame (a “frame” being the next\nattempt at knocking down 10 pins) the bowler’s first roll knocks down 4\npins. That means that, for the frame in which he got the spare, the bowler\nreceives 14 points. On a bowling scorecard that looks like this:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "A spare is calculated by taking the 10 points for knocking down all the\npins, plus the points from the next roll. For example, if he knocks down 8\npins then 2, that’s a spare. In the next frame (a “frame” being the next\nattempt at knocking down 10 pins) the bowler’s first roll knocks down 4\npins. That means that, for the frame in which he got the spare, the bowler\nreceives 14 points. On a bowling scorecard that looks like this:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 877,
                  "line": 24,
                  "column": 1
                },
                "end": {
                  "offset": 1309,
                  "line": 30,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "What this means is that in order to calculate the total for the spare frame,\nyou have to wait until the first ball in the next frame is thrown. A strike\nis similar, except that you get to count the next two rolls, rather than the\nnext one. So if the bowler gets a strike in frame 1, he receives ten points\nfor the strike, but he also receives the points for the next two rolls. If\nthe next two rolls knock down 6 and then 3, the total score for frame 1 is\n19 (10 + 6 + 3), and the score for frame 2 is 9 (6 + 3). That gives a\nrunning total after the first two frames of 28, like this:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "What this means is that in order to calculate the total for the spare frame,\nyou have to wait until the first ball in the next frame is thrown. A strike\nis similar, except that you get to count the next two rolls, rather than the\nnext one. So if the bowler gets a strike in frame 1, he receives ten points\nfor the strike, but he also receives the points for the next two rolls. If\nthe next two rolls knock down 6 and then 3, the total score for frame 1 is\n19 (10 + 6 + 3), and the score for frame 2 is 9 (6 + 3). That gives a\nrunning total after the first two frames of 28, like this:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1310,
                  "line": 31,
                  "column": 1
                },
                "end": {
                  "offset": 1895,
                  "line": 39,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Your challenge for this event is to calculate the score based on this set of\n10 frames:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Your challenge for this event is to calculate the score based on this set of\n10 frames:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1896,
                  "line": 40,
                  "column": 1
                },
                "end": {
                  "offset": 1984,
                  "line": 42,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Before you get started, we’re going to give you a little bit of a hint. Not\njust a hint, but we’re going to give you a starting point for your script.\nThere are probably other ways to do this, but you’re going to be using an\narray. Why? Because we’re going to give you the array:\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Before you get started, we’re going to give you a little bit of a hint. Not\njust a hint, but we’re going to give you a starting point for your script.\nThere are probably other ways to do this, but you’re going to be using an\narray. Why? Because we’re going to give you the array:\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 1985,
                  "line": 43,
                  "column": 1
                },
                "end": {
                  "offset": 2265,
                  "line": 47,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "@arrFrames = (2,5,7,\"/\",8,1,\"X\",9,\"/\",5,3,7,0,4,5,\"X\",2,0)\n",
              "margin": "    ",
              "type": "code",
              "content": [
                {
                  "type": "verbatim",
                  "value": "@arrFrames = (2,5,7,\"/\",8,1,\"X\",9,\"/\",5,3,7,0,4,5,\"X\",2,0)\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2266,
                  "line": 48,
                  "column": 1
                },
                "end": {
                  "offset": 2329,
                  "line": 49,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Why did we give you the array? Because when we test the entries for this\nevent, we’re going to replace this array with a different one. That means\nyour script needs to work with any 10-frame bowling score, not just the one\nwe showed you here.\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Why did we give you the array? Because when we test the entries for this\nevent, we’re going to replace this array with a different one. That means\nyour script needs to work with any 10-frame bowling score, not just the one\nwe showed you here.\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2330,
                  "line": 50,
                  "column": 1
                },
                "end": {
                  "offset": 2573,
                  "line": 54,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "Note: In case you’re wondering what happens if a strike or spare occurs in\nthe last frame, in a real bowling game you’ll get a third roll of the ball\nat the very end. In this event we’re not going to account for that. The last\nframe in this event contains two numbers, no spares or strikes. Any array we\nput in to test the scripts will also end with two numbers, no spares or\nstrikes in the very last frame. In other words, you don’t need to account\nfor spares or strikes in the last frame.  Top of page\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "type": "text",
                  "value": "Note: In case you’re wondering what happens if a strike or spare occurs in\nthe last frame, in a real bowling game you’ll get a third roll of the ball\nat the very end. In this event we’re not going to account for that. The last\nframe in this event contains two numbers, no spares or strikes. Any array we\nput in to test the scripts will also end with two numbers, no spares or\nstrikes in the very last frame. In other words, you don’t need to account\nfor spares or strikes in the last frame.  Top of page\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 2574,
                  "line": 55,
                  "column": 1
                },
                "end": {
                  "offset": 3078,
                  "line": 62,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://web.archive.org/web/20081208155503/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent10.mspx>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://web.archive.org/web/20081208155503/http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/bevent10.mspx"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 3079,
                  "line": 63,
                  "column": 1
                },
                "end": {
                  "offset": 3206,
                  "line": 64,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            },
            {
              "margin": "",
              "type": "block",
              "content": [
                {
                  "type": "para",
                  "text": "Solution\n",
                  "margin": "",
                  "content": [
                    {
                      "type": "text",
                      "value": "Solution\n"
                    }
                  ],
                  "location": {
                    "start": {
                      "offset": 3207,
                      "line": 65,
                      "column": 1
                    },
                    "end": {
                      "offset": 3223,
                      "line": 66,
                      "column": 1
                    }
                  }
                }
              ],
              "name": "head",
              "location": {
                "start": {
                  "offset": 3207,
                  "line": 65,
                  "column": 1
                },
                "end": {
                  "offset": 3223,
                  "line": 66,
                  "column": 1
                }
              },
              "level": "1",
              "id": "Solution"
            },
            {
              "type": "blankline"
            },
            {
              "text": "L<http://web.archive.org/web/20081210124632/http://www.microsoft.com/technet/scriptcenter/funzone/games/solutions08/bpssol10.mspx>\n",
              "margin": "",
              "type": "para",
              "content": [
                {
                  "content": [
                    {
                      "type": "text",
                      "value": "http://web.archive.org/web/20081210124632/http://www.microsoft.com/technet/scriptcenter/funzone/games/solutions08/bpssol10.mspx"
                    }
                  ],
                  "type": "fcode",
                  "name": "L",
                  "meta": null
                },
                {
                  "type": "text",
                  "value": "\n"
                }
              ],
              "location": {
                "start": {
                  "offset": 3224,
                  "line": 67,
                  "column": 1
                },
                "end": {
                  "offset": 3355,
                  "line": 68,
                  "column": 1
                }
              }
            },
            {
              "type": "blankline"
            }
          ],
          "name": "pod",
          "margin": "",
          "config": [],
          "location": {
            "start": {
              "offset": 9,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 3365,
              "line": 70,
              "column": 1
            }
          },
          "id": "1tZmPpb3iRwSojCkZTVSb"
        },
        {
          "text": "\nmy @frames = <2 5 7 / 8 1 X 9 / 5 3 7 0 4 5 X 2 0>;\nmy @pins;\n\nmy $score = 0;\n\nsub score ($ball) {\n    return 10  if  $ball eq 'X';\n    return $ball;\n};\n\nwhile (@frames) {\n    my $frame = @frames.shift;\n    last unless defined $frame;\n    say \"checking $frame\";\n    given $frame {\n        when '/' {\n            $score += 10 + score(@frames[1]);\n        }\n        when 'X' {\n            if @frames[1,2] ~~ *, '/' {\n                $score += 20;\n            }\n            else {\n                $score += 10 + score(@frames[1]) + score(@frames[2]);\n            }\n        }\n        when '0'..'9' {\n            if @frames.elems > 1 {\n                $score += $frame unless defined @frames[1] eq '/';\n            }\n            else {\n                $score += $frame;\n            }\n        }\n    }\n\n}\nsay \"$score\";\n\n# vim: expandtab shiftwidth=4 ft=perl6\n",
          "type": "ambient",
          "location": {
            "start": {
              "offset": 3365,
              "line": 70,
              "column": 1
            },
            "end": {
              "offset": 4218,
              "line": 111,
              "column": 1
            }
          }
        }
      ]
    }
  },
  {
    "type": "page",
    "file": "work_examples/categories/wsg/README.md",
    "sources": [],
    "node": {
      "type": "block",
      "id": "byBeedVItdn4Vrh0w9N1o",
      "margin": "",
      "name": "root",
      "content": [
        {
          "type": "block",
          "id": "8qGc8E9vYh-qe9NXOK3ej",
          "margin": "",
          "level": 1,
          "name": "head",
          "location": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          },
          "content": [
            "Winter Scripting Games"
          ]
        },
        {
          "type": "para",
          "id": "sg_-NSVbXP7RLc5ICqeMS",
          "margin": "",
          "location": {
            "start": {
              "line": 3,
              "column": 1,
              "offset": 26
            },
            "end": {
              "line": 3,
              "column": 73,
              "offset": 98
            }
          },
          "text": "text",
          "content": [
            {
              "meta": "http://www.microsoft.com/technet/scriptcenter/funzone/games/default.mspx",
              "type": "fcode",
              "name": "L",
              "content": [
                "http://www.microsoft.com/technet/scriptcenter/funzone/games/default.mspx"
              ]
            }
          ]
        },
        {
          "type": "para",
          "id": "RzrE1ieGPBanUGIX0dn_U",
          "margin": "",
          "location": {
            "start": {
              "line": 5,
              "column": 1,
              "offset": 100
            },
            "end": {
              "line": 7,
              "column": 6,
              "offset": 257
            }
          },
          "text": "text",
          "content": [
            "This is a directory to post solutions to the winter scripting games events.\nIt is further divided by difficulty and year (beginner-2008, advanced-2007,\netc.)"
          ]
        },
        {
          "type": "para",
          "id": "i_UVP-57JHYcoS8Fw_bwU",
          "margin": "",
          "location": {
            "start": {
              "line": 9,
              "column": 1,
              "offset": 259
            },
            "end": {
              "line": 11,
              "column": 45,
              "offset": 459
            }
          },
          "text": "text",
          "content": [
            "Use the file format ",
            {
              "type": "fcode",
              "name": "C",
              "content": [
                "event000-author.pl"
              ]
            },
            " replacing 000 with the problem number\nand author with your name.  For example if I am eric256 and I answer problem\none I will save it as ",
            {
              "type": "fcode",
              "name": "C",
              "content": [
                "event001-eric256.pl"
              ]
            },
            "."
          ]
        },
        {
          "type": "para",
          "id": "XCThnxjluCVUT642CT4kE",
          "margin": "",
          "location": {
            "start": {
              "line": 13,
              "column": 1,
              "offset": 461
            },
            "end": {
              "line": 13,
              "column": 20,
              "offset": 480
            }
          },
          "text": "text",
          "content": [
            "Thanks for playing!"
          ]
        }
      ]
    }
  }
]
